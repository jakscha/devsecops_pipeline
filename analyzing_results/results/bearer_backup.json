{"critical":[{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00007.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00007.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":46}},"sink":{"start":61,"end":61,"column":{"start":25,"end":46},"content":""},"parent_line_number":61,"fingerprint":"4b44f26ced1d38c01bc3fe4275b3a142_0","old_fingerprint":"4b44f26ced1d38c01bc3fe4275b3a142_2","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00017.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00017.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":25,"end":44}},"sink":{"start":63,"end":63,"column":{"start":25,"end":44},"content":""},"parent_line_number":63,"fingerprint":"65edb457be3e48f59d350f810ccd5230_0","old_fingerprint":"65edb457be3e48f59d350f810ccd5230_19","code_extract":"            Process p = r.exec(cmd + param);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":25,"end":42}},"sink":{"start":81,"end":81,"column":{"start":25,"end":42},"content":""},"parent_line_number":81,"fingerprint":"93e055a2c1d5f47333fe090ffecccf4e_0","old_fingerprint":"93e055a2c1d5f47333fe090ffecccf4e_79","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":25,"end":46}},"sink":{"start":76,"end":76,"column":{"start":25,"end":46},"content":""},"parent_line_number":76,"fingerprint":"e55b85c0431c0bd28e256609a08ca72d_0","old_fingerprint":"e55b85c0431c0bd28e256609a08ca72d_67","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00159.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00159.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":29,"end":53}},"sink":{"start":67,"end":67,"column":{"start":29,"end":53},"content":""},"parent_line_number":67,"fingerprint":"4b641060ba95c5056098bb69c1d857d9_0","old_fingerprint":"4b641060ba95c5056098bb69c1d857d9_33","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00174.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00174.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":25,"end":45}},"sink":{"start":63,"end":63,"column":{"start":25,"end":45},"content":""},"parent_line_number":63,"fingerprint":"02d96fd2e887d68e8e00485668d68cf7_0","old_fingerprint":"02d96fd2e887d68e8e00485668d68cf7_18","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00176.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00176.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":97}},"sink":{"start":64,"end":64,"column":{"start":21,"end":97},"content":""},"parent_line_number":64,"fingerprint":"668102e2ebe7211e41a26bb4c14a0ffd_0","old_fingerprint":"668102e2ebe7211e41a26bb4c14a0ffd_25","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00177.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00177.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":21,"end":97}},"sink":{"start":69,"end":69,"column":{"start":21,"end":97},"content":""},"parent_line_number":69,"fingerprint":"14a738764680034773fe675aaf3a532b_0","old_fingerprint":"14a738764680034773fe675aaf3a532b_37","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00295.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00295.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":29,"end":53}},"sink":{"start":72,"end":72,"column":{"start":29,"end":53},"content":""},"parent_line_number":72,"fingerprint":"955f3698d052a32e4839b8f91f2d664a_0","old_fingerprint":"955f3698d052a32e4839b8f91f2d664a_46","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00302.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00302.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":25,"end":42}},"sink":{"start":69,"end":69,"column":{"start":25,"end":42},"content":""},"parent_line_number":69,"fingerprint":"1054177d016fb6e5ea56164cfe0d0862_0","old_fingerprint":"1054177d016fb6e5ea56164cfe0d0862_38","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00303.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00303.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":25,"end":37}},"sink":{"start":83,"end":83,"column":{"start":25,"end":37},"content":""},"parent_line_number":83,"fingerprint":"3829b625383435b74d21b5971d1c4e19_0","old_fingerprint":"3829b625383435b74d21b5971d1c4e19_86","code_extract":"            Process p = r.exec(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00308.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00308.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":25,"end":51}},"sink":{"start":70,"end":70,"column":{"start":25,"end":51},"content":""},"parent_line_number":70,"fingerprint":"c5c641a6299e64bd465184d647ffefb7_0","old_fingerprint":"c5c641a6299e64bd465184d647ffefb7_42","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00496.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00496.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":25,"end":46}},"sink":{"start":68,"end":68,"column":{"start":25,"end":46},"content":""},"parent_line_number":68,"fingerprint":"788b8b3744a18a51488683339e13443d_0","old_fingerprint":"788b8b3744a18a51488683339e13443d_36","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00498.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00498.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":25,"end":96}},"sink":{"start":68,"end":68,"column":{"start":25,"end":96},"content":""},"parent_line_number":68,"fingerprint":"ebbcc326b263d042a369f8c59c2bb0a3_0","old_fingerprint":"ebbcc326b263d042a369f8c59c2bb0a3_34","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00499.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00499.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":25,"end":51}},"sink":{"start":62,"end":62,"column":{"start":25,"end":51},"content":""},"parent_line_number":62,"fingerprint":"c6762fe5c1f98346989ae2aff92be3db_0","old_fingerprint":"c6762fe5c1f98346989ae2aff92be3db_12","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00567.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00567.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":25,"end":42}},"sink":{"start":78,"end":78,"column":{"start":25,"end":42},"content":""},"parent_line_number":78,"fingerprint":"ff86c59d0ce9077c6ee00f12f9fe893f_0","old_fingerprint":"ff86c59d0ce9077c6ee00f12f9fe893f_72","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00568.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00568.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":25,"end":46}},"sink":{"start":87,"end":87,"column":{"start":25,"end":46},"content":""},"parent_line_number":87,"fingerprint":"20487b094b23fed1e2d8789645d4d881_0","old_fingerprint":"20487b094b23fed1e2d8789645d4d881_92","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00571.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00571.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":25,"end":96}},"sink":{"start":76,"end":76,"column":{"start":25,"end":96},"content":""},"parent_line_number":76,"fingerprint":"d2a3023f5829cafaf7dd4cd7855a3ebc_0","old_fingerprint":"d2a3023f5829cafaf7dd4cd7855a3ebc_60","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00572.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00572.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":51}},"sink":{"start":77,"end":77,"column":{"start":25,"end":51},"content":""},"parent_line_number":77,"fingerprint":"7032492514763e034c0eb26febed9311_0","old_fingerprint":"7032492514763e034c0eb26febed9311_68","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00573.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00573.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":25,"end":45}},"sink":{"start":70,"end":70,"column":{"start":25,"end":45},"content":""},"parent_line_number":70,"fingerprint":"4abd212549dfa715c3cf394255e7add4_0","old_fingerprint":"4abd212549dfa715c3cf394255e7add4_41","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00574.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00574.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":25,"end":45}},"sink":{"start":75,"end":75,"column":{"start":25,"end":45},"content":""},"parent_line_number":75,"fingerprint":"2eec99d6978b603fe28ce18c7978f044_0","old_fingerprint":"2eec99d6978b603fe28ce18c7978f044_55","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00576.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00576.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":97}},"sink":{"start":75,"end":75,"column":{"start":21,"end":97},"content":""},"parent_line_number":75,"fingerprint":"bb72b193150e7c77abbb164a6b2d1e2f_0","old_fingerprint":"bb72b193150e7c77abbb164a6b2d1e2f_54","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00815.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00815.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":9,"end":25}},"sink":{"start":86,"end":86,"column":{"start":9,"end":25},"content":""},"parent_line_number":86,"fingerprint":"b157be15fab6f28442cb998eb8905efa_0","old_fingerprint":"b157be15fab6f28442cb998eb8905efa_90","code_extract":"        pb.command(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00825.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00825.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":25,"end":96}},"sink":{"start":83,"end":83,"column":{"start":25,"end":96},"content":""},"parent_line_number":83,"fingerprint":"eeee3480d0fc363fe909e961c10fe0a4_0","old_fingerprint":"eeee3480d0fc363fe909e961c10fe0a4_83","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00826.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00826.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":21,"end":97}},"sink":{"start":88,"end":88,"column":{"start":21,"end":97},"content":""},"parent_line_number":88,"fingerprint":"48463d4e32e57b410bd31fcd250803fa_0","old_fingerprint":"48463d4e32e57b410bd31fcd250803fa_93","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":25,"end":37}},"sink":{"start":88,"end":88,"column":{"start":25,"end":37},"content":""},"parent_line_number":88,"fingerprint":"c3ae0bef5a2dc9f94611705955235db1_0","old_fingerprint":"c3ae0bef5a2dc9f94611705955235db1_94","code_extract":"            Process p = r.exec(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":25,"end":46}},"sink":{"start":90,"end":90,"column":{"start":25,"end":46},"content":""},"parent_line_number":90,"fingerprint":"65b152dffaa206201252a7eac719dc04_0","old_fingerprint":"65b152dffaa206201252a7eac719dc04_95","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":25,"end":46}},"sink":{"start":76,"end":76,"column":{"start":25,"end":46},"content":""},"parent_line_number":76,"fingerprint":"d356b6bdc5b53db2c24a04314ccb9318_0","old_fingerprint":"d356b6bdc5b53db2c24a04314ccb9318_61","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":25,"end":96}},"sink":{"start":90,"end":90,"column":{"start":25,"end":96},"content":""},"parent_line_number":90,"fingerprint":"fc3d3132dfbcbce07e88b6a7129de719_0","old_fingerprint":"fc3d3132dfbcbce07e88b6a7129de719_96","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":25,"end":96}},"sink":{"start":76,"end":76,"column":{"start":25,"end":96},"content":""},"parent_line_number":76,"fingerprint":"112224ebf2a324d8ca3b5c6300fd83c0_0","old_fingerprint":"112224ebf2a324d8ca3b5c6300fd83c0_62","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":25,"end":45}},"sink":{"start":75,"end":75,"column":{"start":25,"end":45},"content":""},"parent_line_number":75,"fingerprint":"e2e2304b48ce35591db7dfc60199b120_0","old_fingerprint":"e2e2304b48ce35591db7dfc60199b120_56","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01064.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01064.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":25,"end":42}},"sink":{"start":62,"end":62,"column":{"start":25,"end":42},"content":""},"parent_line_number":62,"fingerprint":"541cd9de1a949717c0e2369b719235cc_0","old_fingerprint":"541cd9de1a949717c0e2369b719235cc_11","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01065.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01065.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":25,"end":37}},"sink":{"start":74,"end":74,"column":{"start":25,"end":37},"content":""},"parent_line_number":74,"fingerprint":"a1b5153211cc473053c1e8e0317a5b5b_0","old_fingerprint":"a1b5153211cc473053c1e8e0317a5b5b_52","code_extract":"            Process p = r.exec(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01066.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01066.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":25,"end":46}},"sink":{"start":62,"end":62,"column":{"start":25,"end":46},"content":""},"parent_line_number":62,"fingerprint":"18d2a42257b5ba6f4d148e2faeccfd7b_0","old_fingerprint":"18d2a42257b5ba6f4d148e2faeccfd7b_15","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01067.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01067.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":45}},"sink":{"start":61,"end":61,"column":{"start":25,"end":45},"content":""},"parent_line_number":61,"fingerprint":"7941f1e8bf3a65db1f1e27f3fabdb656_0","old_fingerprint":"7941f1e8bf3a65db1f1e27f3fabdb656_4","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01068.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01068.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":97}},"sink":{"start":64,"end":64,"column":{"start":21,"end":97},"content":""},"parent_line_number":64,"fingerprint":"8a6057d7080af5d45ef3f74b192420aa_0","old_fingerprint":"8a6057d7080af5d45ef3f74b192420aa_21","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01189.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01189.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":25,"end":37}},"sink":{"start":76,"end":76,"column":{"start":25,"end":37},"content":""},"parent_line_number":76,"fingerprint":"eea8a598ca8e542ac28d9797d0847fc3_0","old_fingerprint":"eea8a598ca8e542ac28d9797d0847fc3_63","code_extract":"            Process p = r.exec(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01190.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01190.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":25,"end":46}},"sink":{"start":64,"end":64,"column":{"start":25,"end":46},"content":""},"parent_line_number":64,"fingerprint":"6b433a540aed94bb27ca0bf4ba98e9a3_0","old_fingerprint":"6b433a540aed94bb27ca0bf4ba98e9a3_28","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01191.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01191.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":25,"end":46}},"sink":{"start":64,"end":64,"column":{"start":25,"end":46},"content":""},"parent_line_number":64,"fingerprint":"b95d6a199a8b1c7e81373dd66bac0661_0","old_fingerprint":"b95d6a199a8b1c7e81373dd66bac0661_20","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01192.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01192.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":25,"end":46}},"sink":{"start":64,"end":64,"column":{"start":25,"end":46},"content":""},"parent_line_number":64,"fingerprint":"f59dd8c23879eaee5819526ef0ac222d_0","old_fingerprint":"f59dd8c23879eaee5819526ef0ac222d_23","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01193.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01193.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":25,"end":96}},"sink":{"start":78,"end":78,"column":{"start":25,"end":96},"content":""},"parent_line_number":78,"fingerprint":"e6bbb799e2f366a8999d2c29802cee80_0","old_fingerprint":"e6bbb799e2f366a8999d2c29802cee80_71","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01194.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01194.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":25,"end":51}},"sink":{"start":65,"end":65,"column":{"start":25,"end":51},"content":""},"parent_line_number":65,"fingerprint":"fe7efd2099091037c7cdd6e3e85df308_0","old_fingerprint":"fe7efd2099091037c7cdd6e3e85df308_31","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01360.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01360.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":42}},"sink":{"start":61,"end":61,"column":{"start":25,"end":42},"content":""},"parent_line_number":61,"fingerprint":"b682281a4e5125760148601c04f5c5e6_0","old_fingerprint":"b682281a4e5125760148601c04f5c5e6_7","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01361.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01361.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":46}},"sink":{"start":61,"end":61,"column":{"start":25,"end":46},"content":""},"parent_line_number":61,"fingerprint":"5144702b6acd18c38a50dacca0835647_0","old_fingerprint":"5144702b6acd18c38a50dacca0835647_3","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01362.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01362.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":25,"end":96}},"sink":{"start":75,"end":75,"column":{"start":25,"end":96},"content":""},"parent_line_number":75,"fingerprint":"b44b956505c6ab94bf9f1a06bd80bd7b_0","old_fingerprint":"b44b956505c6ab94bf9f1a06bd80bd7b_57","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01363.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01363.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":45}},"sink":{"start":60,"end":60,"column":{"start":25,"end":45},"content":""},"parent_line_number":60,"fingerprint":"b492093604b7672688d4b2c19ef9c90e_0","old_fingerprint":"b492093604b7672688d4b2c19ef9c90e_1","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01364.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01364.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":45}},"sink":{"start":60,"end":60,"column":{"start":25,"end":45},"content":""},"parent_line_number":60,"fingerprint":"3e5c257a9436aa9535fb2dac22a06a88_0","old_fingerprint":"3e5c257a9436aa9535fb2dac22a06a88_0","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01365.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01365.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":21,"end":97}},"sink":{"start":63,"end":63,"column":{"start":21,"end":97},"content":""},"parent_line_number":63,"fingerprint":"fa3ae04574ff0f4a95d879ebdec4e4c1_0","old_fingerprint":"fa3ae04574ff0f4a95d879ebdec4e4c1_17","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01430.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01430.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":29,"end":53}},"sink":{"start":74,"end":74,"column":{"start":29,"end":53},"content":""},"parent_line_number":74,"fingerprint":"f46b5de2de427cae53bd27f8069a21f3_0","old_fingerprint":"f46b5de2de427cae53bd27f8069a21f3_53","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01440.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01440.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":25,"end":42}},"sink":{"start":71,"end":71,"column":{"start":25,"end":42},"content":""},"parent_line_number":71,"fingerprint":"d79397673f76589ac000f2dfd519f4af_0","old_fingerprint":"d79397673f76589ac000f2dfd519f4af_44","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01441.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01441.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":25,"end":37}},"sink":{"start":83,"end":83,"column":{"start":25,"end":37},"content":""},"parent_line_number":83,"fingerprint":"a022a595cad51ef505a7b78c7ceeae1f_0","old_fingerprint":"a022a595cad51ef505a7b78c7ceeae1f_87","code_extract":"            Process p = r.exec(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01442.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01442.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":25,"end":46}},"sink":{"start":71,"end":71,"column":{"start":25,"end":46},"content":""},"parent_line_number":71,"fingerprint":"52120db9a58c4950f3b76e518bf7e1ed_0","old_fingerprint":"52120db9a58c4950f3b76e518bf7e1ed_43","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01443.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01443.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":51}},"sink":{"start":72,"end":72,"column":{"start":25,"end":51},"content":""},"parent_line_number":72,"fingerprint":"5a617b49107f9d945be0868b8d80bb47_0","old_fingerprint":"5a617b49107f9d945be0868b8d80bb47_48","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01444.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01444.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":25,"end":45}},"sink":{"start":70,"end":70,"column":{"start":25,"end":45},"content":""},"parent_line_number":70,"fingerprint":"9428ac7a6e5e3f77cc80108791d1b7b3_0","old_fingerprint":"9428ac7a6e5e3f77cc80108791d1b7b3_39","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01445.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01445.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":25,"end":45}},"sink":{"start":70,"end":70,"column":{"start":25,"end":45},"content":""},"parent_line_number":70,"fingerprint":"277ab50d2e415a518b31315638594f4f_0","old_fingerprint":"277ab50d2e415a518b31315638594f4f_40","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01446.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01446.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":97}},"sink":{"start":73,"end":73,"column":{"start":21,"end":97},"content":""},"parent_line_number":73,"fingerprint":"20b4313f23dd428e459ceac5e9c98d0a_0","old_fingerprint":"20b4313f23dd428e459ceac5e9c98d0a_49","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01672.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01672.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":9,"end":25}},"sink":{"start":86,"end":86,"column":{"start":9,"end":25},"content":""},"parent_line_number":86,"fingerprint":"89219b4312b1b0c0a1d4b86a00a069c4_0","old_fingerprint":"89219b4312b1b0c0a1d4b86a00a069c4_91","code_extract":"        pb.command(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01674.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01674.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":53}},"sink":{"start":84,"end":84,"column":{"start":29,"end":53},"content":""},"parent_line_number":84,"fingerprint":"859412c28c4da53615de6129b4885c02_0","old_fingerprint":"859412c28c4da53615de6129b4885c02_88","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01685.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01685.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":25,"end":46}},"sink":{"start":95,"end":95,"column":{"start":25,"end":46},"content":""},"parent_line_number":95,"fingerprint":"4cce39dc4b00f67fcb4510e93f999aec_0","old_fingerprint":"4cce39dc4b00f67fcb4510e93f999aec_98","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01686.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01686.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":25,"end":46}},"sink":{"start":81,"end":81,"column":{"start":25,"end":46},"content":""},"parent_line_number":81,"fingerprint":"cf43e1eb2d85001590d535a02efd12bf_0","old_fingerprint":"cf43e1eb2d85001590d535a02efd12bf_78","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01687.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01687.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":25,"end":96}},"sink":{"start":95,"end":95,"column":{"start":25,"end":96},"content":""},"parent_line_number":95,"fingerprint":"ede525d54f25139d90d5ac7876e5baa9_0","old_fingerprint":"ede525d54f25139d90d5ac7876e5baa9_97","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01688.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01688.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":25,"end":51}},"sink":{"start":82,"end":82,"column":{"start":25,"end":51},"content":""},"parent_line_number":82,"fingerprint":"0d97bfd48d0b697b0beb74bb1073226b_0","old_fingerprint":"0d97bfd48d0b697b0beb74bb1073226b_82","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01689.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01689.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":25,"end":51}},"sink":{"start":82,"end":82,"column":{"start":25,"end":51},"content":""},"parent_line_number":82,"fingerprint":"2b853cb38ef12d626c6eaa021f4685c3_0","old_fingerprint":"2b853cb38ef12d626c6eaa021f4685c3_81","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01690.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01690.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":25,"end":45}},"sink":{"start":80,"end":80,"column":{"start":25,"end":45},"content":""},"parent_line_number":80,"fingerprint":"967d12049e455ffff295081d205aad0f_0","old_fingerprint":"967d12049e455ffff295081d205aad0f_76","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01691.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01691.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":25,"end":45}},"sink":{"start":80,"end":80,"column":{"start":25,"end":45},"content":""},"parent_line_number":80,"fingerprint":"22faf9624f6aaf1645231093127a433c_0","old_fingerprint":"22faf9624f6aaf1645231093127a433c_77","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01692.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01692.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":21,"end":97}},"sink":{"start":83,"end":83,"column":{"start":21,"end":97},"content":""},"parent_line_number":83,"fingerprint":"20df53e15c01401b39b75eae6c6d3226_0","old_fingerprint":"20df53e15c01401b39b75eae6c6d3226_84","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01693.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01693.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":21,"end":97}},"sink":{"start":83,"end":83,"column":{"start":21,"end":97},"content":""},"parent_line_number":83,"fingerprint":"20c0da258b3511c73aa062d52894020b_0","old_fingerprint":"20c0da258b3511c73aa062d52894020b_85","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":53}},"sink":{"start":79,"end":79,"column":{"start":29,"end":53},"content":""},"parent_line_number":79,"fingerprint":"8798ede47cba63f747399d6c10e2bfff_0","old_fingerprint":"8798ede47cba63f747399d6c10e2bfff_75","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":51}},"sink":{"start":77,"end":77,"column":{"start":25,"end":51},"content":""},"parent_line_number":77,"fingerprint":"3aac4b1d8eb6f47e7a708d3611031378_0","old_fingerprint":"3aac4b1d8eb6f47e7a708d3611031378_70","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":51}},"sink":{"start":77,"end":77,"column":{"start":25,"end":51},"content":""},"parent_line_number":77,"fingerprint":"d186aa217bf9adf33bce0e561704b340_0","old_fingerprint":"d186aa217bf9adf33bce0e561704b340_69","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01929.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01929.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":29,"end":53}},"sink":{"start":65,"end":65,"column":{"start":29,"end":53},"content":""},"parent_line_number":65,"fingerprint":"c9e8235c45c257318b513613f44cbf07_0","old_fingerprint":"c9e8235c45c257318b513613f44cbf07_29","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01936.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01936.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":25,"end":42}},"sink":{"start":62,"end":62,"column":{"start":25,"end":42},"content":""},"parent_line_number":62,"fingerprint":"806d87915ac243a7efd4e4aaba7121a1_0","old_fingerprint":"806d87915ac243a7efd4e4aaba7121a1_13","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01937.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01937.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":25,"end":42}},"sink":{"start":62,"end":62,"column":{"start":25,"end":42},"content":""},"parent_line_number":62,"fingerprint":"91bf6a86dc31ee52ccbef69790992349_0","old_fingerprint":"91bf6a86dc31ee52ccbef69790992349_14","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01938.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01938.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":25,"end":96}},"sink":{"start":76,"end":76,"column":{"start":25,"end":96},"content":""},"parent_line_number":76,"fingerprint":"20c5586fe51edc0cd86ba3a46398bf8d_0","old_fingerprint":"20c5586fe51edc0cd86ba3a46398bf8d_66","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01939.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01939.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":25,"end":96}},"sink":{"start":62,"end":62,"column":{"start":25,"end":96},"content":""},"parent_line_number":62,"fingerprint":"6362eac51400ab01691508c812239f88_0","old_fingerprint":"6362eac51400ab01691508c812239f88_10","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01940.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01940.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":25,"end":51}},"sink":{"start":63,"end":63,"column":{"start":25,"end":51},"content":""},"parent_line_number":63,"fingerprint":"9d340bc9db0353550bd366ca00af5471_0","old_fingerprint":"9d340bc9db0353550bd366ca00af5471_16","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01941.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01941.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":45}},"sink":{"start":61,"end":61,"column":{"start":25,"end":45},"content":""},"parent_line_number":61,"fingerprint":"d2190e94d389c8b9027ad00210ba060c_0","old_fingerprint":"d2190e94d389c8b9027ad00210ba060c_5","code_extract":"            Process p = r.exec(cmd, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01942.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01942.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":97}},"sink":{"start":64,"end":64,"column":{"start":21,"end":97},"content":""},"parent_line_number":64,"fingerprint":"6e9946f1c401e9df9fc02d0d39504f61_0","old_fingerprint":"6e9946f1c401e9df9fc02d0d39504f61_27","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01943.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01943.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":97}},"sink":{"start":64,"end":64,"column":{"start":21,"end":97},"content":""},"parent_line_number":64,"fingerprint":"8bee70b3e5f4f940d7125103fbfe676d_0","old_fingerprint":"8bee70b3e5f4f940d7125103fbfe676d_22","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01944.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01944.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":97}},"sink":{"start":64,"end":64,"column":{"start":21,"end":97},"content":""},"parent_line_number":64,"fingerprint":"84531ee1c1ef1f5bbc1e2b13c6467a77_0","old_fingerprint":"84531ee1c1ef1f5bbc1e2b13c6467a77_24","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02059.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02059.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":29,"end":53}},"sink":{"start":67,"end":67,"column":{"start":29,"end":53},"content":""},"parent_line_number":67,"fingerprint":"d2a4ddf159e9be41aa63b3cdbbe804e3_0","old_fingerprint":"d2a4ddf159e9be41aa63b3cdbbe804e3_32","code_extract":"        ProcessBuilder pb = new ProcessBuilder(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02067.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02067.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":25,"end":46}},"sink":{"start":78,"end":78,"column":{"start":25,"end":46},"content":""},"parent_line_number":78,"fingerprint":"99ee5b383fc35b17df561c7a892378a5_0","old_fingerprint":"99ee5b383fc35b17df561c7a892378a5_73","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02068.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02068.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":25,"end":96}},"sink":{"start":64,"end":64,"column":{"start":25,"end":96},"content":""},"parent_line_number":64,"fingerprint":"e18ddb52108cb48efa856da684d5bc1a_0","old_fingerprint":"e18ddb52108cb48efa856da684d5bc1a_26","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02069.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02069.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":25,"end":51}},"sink":{"start":65,"end":65,"column":{"start":25,"end":51},"content":""},"parent_line_number":65,"fingerprint":"edbb14543d8ae0fbaccfb686b357372d_0","old_fingerprint":"edbb14543d8ae0fbaccfb686b357372d_30","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02070.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02070.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":95}},"sink":{"start":61,"end":61,"column":{"start":25,"end":95},"content":""},"parent_line_number":61,"fingerprint":"e2efb9ad48c46b5a0a7fb4f54efa59dc_0","old_fingerprint":"e2efb9ad48c46b5a0a7fb4f54efa59dc_9","code_extract":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02249.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02249.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":42}},"sink":{"start":61,"end":61,"column":{"start":25,"end":42},"content":""},"parent_line_number":61,"fingerprint":"34378f8bc9233411de1729578ebac5b7_0","old_fingerprint":"34378f8bc9233411de1729578ebac5b7_8","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02250.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02250.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":25,"end":42}},"sink":{"start":61,"end":61,"column":{"start":25,"end":42},"content":""},"parent_line_number":61,"fingerprint":"97be22575bfaee7f321eed4a87636e6f_0","old_fingerprint":"97be22575bfaee7f321eed4a87636e6f_6","code_extract":"            Process p = r.exec(cmd + bar);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02251.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02251.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":25,"end":37}},"sink":{"start":73,"end":73,"column":{"start":25,"end":37},"content":""},"parent_line_number":73,"fingerprint":"be89d240e78f770e7fb3f1a0f3aa3592_0","old_fingerprint":"be89d240e78f770e7fb3f1a0f3aa3592_50","code_extract":"            Process p = r.exec(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02252.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02252.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":25,"end":96}},"sink":{"start":75,"end":75,"column":{"start":25,"end":96},"content":""},"parent_line_number":75,"fingerprint":"58e208285dcfd921fe03f4c59c2153df_0","old_fingerprint":"58e208285dcfd921fe03f4c59c2153df_58","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02253.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02253.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":25,"end":96}},"sink":{"start":75,"end":75,"column":{"start":25,"end":96},"content":""},"parent_line_number":75,"fingerprint":"c49b20fb0d3ac76483f4417cfc8d5019_0","old_fingerprint":"c49b20fb0d3ac76483f4417cfc8d5019_59","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02335.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02335.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":9,"end":25}},"sink":{"start":76,"end":76,"column":{"start":9,"end":25},"content":""},"parent_line_number":76,"fingerprint":"1681e4b4548c1e15e342bba318d77ae9_0","old_fingerprint":"1681e4b4548c1e15e342bba318d77ae9_64","code_extract":"        pb.command(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02336.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02336.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":9,"end":25}},"sink":{"start":76,"end":76,"column":{"start":9,"end":25},"content":""},"parent_line_number":76,"fingerprint":"3cb76407cccad6f9ded27e0e2563ae90_0","old_fingerprint":"3cb76407cccad6f9ded27e0e2563ae90_65","code_extract":"        pb.command(args);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02340.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02340.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":25,"end":46}},"sink":{"start":85,"end":85,"column":{"start":25,"end":46},"content":""},"parent_line_number":85,"fingerprint":"2ebb9834276af941ce247db28eb440ae_0","old_fingerprint":"2ebb9834276af941ce247db28eb440ae_89","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02341.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02341.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":25,"end":96}},"sink":{"start":71,"end":71,"column":{"start":25,"end":96},"content":""},"parent_line_number":71,"fingerprint":"9fcabdc0fa6073581970f7ffd3f05981_0","old_fingerprint":"9fcabdc0fa6073581970f7ffd3f05981_45","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02342.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02342.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":51}},"sink":{"start":72,"end":72,"column":{"start":25,"end":51},"content":""},"parent_line_number":72,"fingerprint":"301077dc3a3e09ea5ad492ed07e3da44_0","old_fingerprint":"301077dc3a3e09ea5ad492ed07e3da44_47","code_extract":"            Process p = r.exec(cmd + bar, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02343.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02343.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":97}},"sink":{"start":73,"end":73,"column":{"start":21,"end":97},"content":""},"parent_line_number":73,"fingerprint":"752bb7dc4c4e8e1a15ba280027faaa89_0","old_fingerprint":"752bb7dc4c4e8e1a15ba280027faaa89_51","code_extract":"                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02344.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02344.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":25,"end":95}},"sink":{"start":68,"end":68,"column":{"start":25,"end":95},"content":""},"parent_line_number":68,"fingerprint":"5816f1d2fa49d8eb61d8a973cc64d744_0","old_fingerprint":"5816f1d2fa49d8eb61d8a973cc64d744_35","code_extract":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02610.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02610.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":25,"end":46}},"sink":{"start":95,"end":95,"column":{"start":25,"end":46},"content":""},"parent_line_number":95,"fingerprint":"a82bf803a0e719154c9f95b90a66d18b_0","old_fingerprint":"a82bf803a0e719154c9f95b90a66d18b_99","code_extract":"            Process p = r.exec(args, argsEnv);"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02611.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02611.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":25,"end":96}},"sink":{"start":95,"end":95,"column":{"start":25,"end":96},"content":""},"parent_line_number":95,"fingerprint":"361711f85ab59b836fab0e33871f06f9_0","old_fingerprint":"361711f85ab59b836fab0e33871f06f9_100","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02612.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02612.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":25,"end":96}},"sink":{"start":81,"end":81,"column":{"start":25,"end":96},"content":""},"parent_line_number":81,"fingerprint":"e0b95894e0ca43b423fdebd3fc993ce1_0","old_fingerprint":"e0b95894e0ca43b423fdebd3fc993ce1_80","code_extract":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["78"],"id":"java_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.\n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.\n  ```java\n  String filePattern = \"*.json\";\n  if (\"xml\".equals(request.getParameter(\"format\"))) {\n    filePattern = \"*.xml\";\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + filePattern);\n  ```\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_os_command_injection","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02613.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02613.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":25,"end":95}},"sink":{"start":78,"end":78,"column":{"start":25,"end":95},"content":""},"parent_line_number":78,"fingerprint":"e97909daf0ab048f56a9be4e532c4cad_0","old_fingerprint":"e97909daf0ab048f56a9be4e532c4cad_74","code_extract":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":173,"full_filename":"src/main/java/org/owasp/benchmark/helpers/DatabaseHelper.java","filename":"src/main/java/org/owasp/benchmark/helpers/DatabaseHelper.java","category_groups":["PII","Personal Data"],"source":{"start":173,"end":173,"column":{"start":9,"end":32}},"sink":{"start":173,"end":173,"column":{"start":9,"end":32},"content":""},"parent_line_number":173,"fingerprint":"bcbd39b43f509eb6724e88b87bd01735_0","old_fingerprint":"bcbd39b43f509eb6724e88b87bd01735_252","code_extract":"        stmt.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":118,"full_filename":"src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java","filename":"src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java","category_groups":["PII","Personal Data"],"source":{"start":118,"end":118,"column":{"start":9,"end":30}},"sink":{"start":118,"end":118,"column":{"start":9,"end":30},"content":""},"parent_line_number":118,"fingerprint":"43b2de22af78dfde392f722d3c1902f4_0","old_fingerprint":"43b2de22af78dfde392f722d3c1902f4_251","code_extract":"        st.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":52,"end":79}},"sink":{"start":57,"end":57,"column":{"start":52,"end":79},"content":""},"parent_line_number":57,"fingerprint":"b239a98105b6649edebd2fb95b840db9_0","old_fingerprint":"b239a98105b6649edebd2fb95b840db9_75","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":25,"end":53}},"sink":{"start":59,"end":59,"column":{"start":25,"end":53},"content":""},"parent_line_number":59,"fingerprint":"c24b49d9a786ec26541d609dc01d0a6f_0","old_fingerprint":"c24b49d9a786ec26541d609dc01d0a6f_121","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":77}},"sink":{"start":56,"end":56,"column":{"start":13,"end":77},"content":""},"parent_line_number":56,"fingerprint":"3018e0e12b733d6f00bd146d136b451d_0","old_fingerprint":"3018e0e12b733d6f00bd146d136b451d_62","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":71,"column":{"start":21,"end":72}},"sink":{"start":67,"end":71,"column":{"start":21,"end":72},"content":""},"parent_line_number":67,"fingerprint":"c0da7f0fb14f7a9ce802e6f19e001774_0","old_fingerprint":"c0da7f0fb14f7a9ce802e6f19e001774_169","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":36}},"sink":{"start":77,"end":77,"column":{"start":13,"end":36},"content":""},"parent_line_number":77,"fingerprint":"d27b08cb1bfaea2cd695ebd16330c52f_0","old_fingerprint":"d27b08cb1bfaea2cd695ebd16330c52f_211","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":13,"end":74}},"sink":{"start":79,"end":79,"column":{"start":13,"end":74},"content":""},"parent_line_number":79,"fingerprint":"08ed2702d414ec447098ed1db7ebd56a_0","old_fingerprint":"08ed2702d414ec447098ed1db7ebd56a_248","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":25,"end":53}},"sink":{"start":74,"end":74,"column":{"start":25,"end":53},"content":""},"parent_line_number":74,"fingerprint":"972474d1ad37435c59ba332e4c7bc908_0","old_fingerprint":"972474d1ad37435c59ba332e4c7bc908_205","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":71}},"sink":{"start":77,"end":77,"column":{"start":25,"end":71},"content":""},"parent_line_number":77,"fingerprint":"d518733a11bae0a5e64c1f42627bf603_0","old_fingerprint":"d518733a11bae0a5e64c1f42627bf603_220","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":25,"end":92}},"sink":{"start":63,"end":63,"column":{"start":25,"end":92},"content":""},"parent_line_number":63,"fingerprint":"b4ce5e243d3526bbeba17785cb260c0b_0","old_fingerprint":"b4ce5e243d3526bbeba17785cb260c0b_150","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00204.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00204.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":92}},"sink":{"start":60,"end":60,"column":{"start":25,"end":92},"content":""},"parent_line_number":60,"fingerprint":"6aebf0892962326a3b5335224a774ffc_0","old_fingerprint":"6aebf0892962326a3b5335224a774ffc_127","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":52,"end":79}},"sink":{"start":65,"end":65,"column":{"start":52,"end":79},"content":""},"parent_line_number":65,"fingerprint":"b3b0a1b5235e888f84bddc04d2a95483_0","old_fingerprint":"b3b0a1b5235e888f84bddc04d2a95483_153","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00329.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00329.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":52,"end":79}},"sink":{"start":65,"end":65,"column":{"start":52,"end":79},"content":""},"parent_line_number":65,"fingerprint":"08615511803fce1db133525486234f15_0","old_fingerprint":"08615511803fce1db133525486234f15_154","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00333.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00333.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":52,"end":84}},"sink":{"start":65,"end":65,"column":{"start":52,"end":84},"content":""},"parent_line_number":65,"fingerprint":"3bba67e92dfa355710c562fa74c53259_0","old_fingerprint":"3bba67e92dfa355710c562fa74c53259_155","code_extract":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00343.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00343.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":74}},"sink":{"start":65,"end":65,"column":{"start":13,"end":74},"content":""},"parent_line_number":65,"fingerprint":"ad290ca6361d7b80402674a54b9d0a90_0","old_fingerprint":"ad290ca6361d7b80402674a54b9d0a90_152","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00344.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00344.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":37,"end":64}},"sink":{"start":65,"end":65,"column":{"start":37,"end":64},"content":""},"parent_line_number":65,"fingerprint":"3f71fad006e7c2db2bd970f4868b31c3_0","old_fingerprint":"3f71fad006e7c2db2bd970f4868b31c3_151","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":13,"end":35}},"sink":{"start":57,"end":57,"column":{"start":13,"end":35},"content":""},"parent_line_number":57,"fingerprint":"a72d435fe9dfbd2d49695a5f1e9d4a8a_0","old_fingerprint":"a72d435fe9dfbd2d49695a5f1e9d4a8a_76","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00514.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00514.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":13,"end":35}},"sink":{"start":62,"end":62,"column":{"start":13,"end":35},"content":""},"parent_line_number":62,"fingerprint":"25c8b6dd4d4b9a20705e113ed97e6bf6_0","old_fingerprint":"25c8b6dd4d4b9a20705e113ed97e6bf6_149","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00517.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00517.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":13,"end":74}},"sink":{"start":62,"end":62,"column":{"start":13,"end":74},"content":""},"parent_line_number":62,"fingerprint":"5069843472ff4a0693e91da8edc7b5ba_0","old_fingerprint":"5069843472ff4a0693e91da8edc7b5ba_148","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00518.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00518.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":25,"end":71}},"sink":{"start":59,"end":59,"column":{"start":25,"end":71},"content":""},"parent_line_number":59,"fingerprint":"6302b8ef048a2997ba904984509debeb_0","old_fingerprint":"6302b8ef048a2997ba904984509debeb_117","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00591.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00591.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":21,"end":95}},"sink":{"start":70,"end":70,"column":{"start":21,"end":95},"content":""},"parent_line_number":70,"fingerprint":"814e9956986c3920c8f0973dab133be5_0","old_fingerprint":"814e9956986c3920c8f0973dab133be5_179","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":90}},"sink":{"start":73,"end":73,"column":{"start":21,"end":90},"content":""},"parent_line_number":73,"fingerprint":"0d8de9b25feea8d3084711d61166c9e1_0","old_fingerprint":"0d8de9b25feea8d3084711d61166c9e1_196","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00601.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00601.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":36}},"sink":{"start":72,"end":72,"column":{"start":13,"end":36},"content":""},"parent_line_number":72,"fingerprint":"535c61831639c914bfcc7fa2f9fa48ae_0","old_fingerprint":"535c61831639c914bfcc7fa2f9fa48ae_181","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00603.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00603.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":77}},"sink":{"start":69,"end":69,"column":{"start":13,"end":77},"content":""},"parent_line_number":69,"fingerprint":"6d2c7cdab8e95328f6dd62e8e155c52a_0","old_fingerprint":"6d2c7cdab8e95328f6dd62e8e155c52a_178","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":64}},"sink":{"start":74,"end":74,"column":{"start":37,"end":64},"content":""},"parent_line_number":74,"fingerprint":"0c1bfa51315fd2cbb4e45d0a53527dc8_0","old_fingerprint":"0c1bfa51315fd2cbb4e45d0a53527dc8_206","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00605.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00605.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":53}},"sink":{"start":72,"end":72,"column":{"start":25,"end":53},"content":""},"parent_line_number":72,"fingerprint":"5443a316c7d56858f401de80e4865ede_0","old_fingerprint":"5443a316c7d56858f401de80e4865ede_184","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":21,"end":90}},"sink":{"start":83,"end":83,"column":{"start":21,"end":90},"content":""},"parent_line_number":83,"fingerprint":"08992fb750d08ea77f86e3bc72b42e4b_0","old_fingerprint":"08992fb750d08ea77f86e3bc72b42e4b_250","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":36}},"sink":{"start":77,"end":77,"column":{"start":13,"end":36},"content":""},"parent_line_number":77,"fingerprint":"2337e8d936dcb6e7d43c176b37abf056_0","old_fingerprint":"2337e8d936dcb6e7d43c176b37abf056_209","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00851.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00851.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":25,"end":92}},"sink":{"start":82,"end":82,"column":{"start":25,"end":92},"content":""},"parent_line_number":82,"fingerprint":"835749c77a6c7975f60eb7784bd6fc67_0","old_fingerprint":"835749c77a6c7975f60eb7784bd6fc67_249","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":52,"end":79}},"sink":{"start":73,"end":73,"column":{"start":52,"end":79},"content":""},"parent_line_number":73,"fingerprint":"86b5f05226c670f7e087f967532e4440_0","old_fingerprint":"86b5f05226c670f7e087f967532e4440_192","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":77,"column":{"start":21,"end":65}},"sink":{"start":74,"end":77,"column":{"start":21,"end":65},"content":""},"parent_line_number":74,"fingerprint":"fee0f026c440505b2cf3e255c2471be4_0","old_fingerprint":"fee0f026c440505b2cf3e255c2471be4_203","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":77,"column":{"start":21,"end":65}},"sink":{"start":74,"end":77,"column":{"start":21,"end":65},"content":""},"parent_line_number":74,"fingerprint":"482329f23ccd974ab4b9a962fcc61163_0","old_fingerprint":"482329f23ccd974ab4b9a962fcc61163_204","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":77,"column":{"start":21,"end":65}},"sink":{"start":74,"end":77,"column":{"start":21,"end":65},"content":""},"parent_line_number":74,"fingerprint":"012a3be188d8d379ae8009c6d695dc6e_0","old_fingerprint":"012a3be188d8d379ae8009c6d695dc6e_202","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":78,"column":{"start":21,"end":72}},"sink":{"start":74,"end":78,"column":{"start":21,"end":72},"content":""},"parent_line_number":74,"fingerprint":"146a3309e29d69b9e3342476d136b2c4_0","old_fingerprint":"146a3309e29d69b9e3342476d136b2c4_200","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":52,"end":84}},"sink":{"start":72,"end":72,"column":{"start":52,"end":84},"content":""},"parent_line_number":72,"fingerprint":"b87d139bbef2486696ff720cc9b4bce7_0","old_fingerprint":"b87d139bbef2486696ff720cc9b4bce7_190","code_extract":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":71}},"sink":{"start":73,"end":73,"column":{"start":21,"end":71},"content":""},"parent_line_number":73,"fingerprint":"1eef296628ac5e47e7a70a2bc529f3e5_0","old_fingerprint":"1eef296628ac5e47e7a70a2bc529f3e5_193","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":90}},"sink":{"start":73,"end":73,"column":{"start":21,"end":90},"content":""},"parent_line_number":73,"fingerprint":"4ecd1fdc42a08f3eabc8d81d6d97f51c_0","old_fingerprint":"4ecd1fdc42a08f3eabc8d81d6d97f51c_194","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":90}},"sink":{"start":73,"end":73,"column":{"start":21,"end":90},"content":""},"parent_line_number":73,"fingerprint":"a74864950c9a5ba72cfcbd68b7bb169a_0","old_fingerprint":"a74864950c9a5ba72cfcbd68b7bb169a_195","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":36}},"sink":{"start":72,"end":72,"column":{"start":13,"end":36},"content":""},"parent_line_number":72,"fingerprint":"5a026d5d7d73325a5e4f824490d2b418_0","old_fingerprint":"5a026d5d7d73325a5e4f824490d2b418_186","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":77}},"sink":{"start":72,"end":72,"column":{"start":13,"end":77},"content":""},"parent_line_number":72,"fingerprint":"3cb334632e9880c0f9ca23472c3b7dc8_0","old_fingerprint":"3cb334632e9880c0f9ca23472c3b7dc8_180","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":62,"column":{"start":21,"end":65}},"sink":{"start":59,"end":62,"column":{"start":21,"end":65},"content":""},"parent_line_number":59,"fingerprint":"5c5a583bdcd0bdaca6b03f85372f88ab_0","old_fingerprint":"5c5a583bdcd0bdaca6b03f85372f88ab_119","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":21,"end":90}},"sink":{"start":59,"end":59,"column":{"start":21,"end":90},"content":""},"parent_line_number":59,"fingerprint":"1e77d8b26f8e892f95023cd3afa960be_0","old_fingerprint":"1e77d8b26f8e892f95023cd3afa960be_122","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":36}},"sink":{"start":58,"end":58,"column":{"start":13,"end":36},"content":""},"parent_line_number":58,"fingerprint":"2d18d59fe42c5a0d2a7773da1adbc51c_0","old_fingerprint":"2d18d59fe42c5a0d2a7773da1adbc51c_110","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":35}},"sink":{"start":58,"end":58,"column":{"start":13,"end":35},"content":""},"parent_line_number":58,"fingerprint":"61a05a950d5d4696a7961bd2fda80f50_0","old_fingerprint":"61a05a950d5d4696a7961bd2fda80f50_104","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01092.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01092.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":35}},"sink":{"start":58,"end":58,"column":{"start":13,"end":35},"content":""},"parent_line_number":58,"fingerprint":"be2bec16c20568edeef033064e07ca96_0","old_fingerprint":"be2bec16c20568edeef033064e07ca96_108","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":53}},"sink":{"start":58,"end":58,"column":{"start":13,"end":53},"content":""},"parent_line_number":58,"fingerprint":"84825378112d0851ed04bf431ec5cbc0_0","old_fingerprint":"84825378112d0851ed04bf431ec5cbc0_109","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":74}},"sink":{"start":58,"end":58,"column":{"start":13,"end":74},"content":""},"parent_line_number":58,"fingerprint":"dbfd2aa3bacd9a9175110143f697444f_0","old_fingerprint":"dbfd2aa3bacd9a9175110143f697444f_89","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01095.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01095.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":74}},"sink":{"start":58,"end":58,"column":{"start":13,"end":74},"content":""},"parent_line_number":58,"fingerprint":"73681589d0dd18ae7e8b87d09148fd74_0","old_fingerprint":"73681589d0dd18ae7e8b87d09148fd74_111","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01096.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01096.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":25,"end":53}},"sink":{"start":58,"end":58,"column":{"start":25,"end":53},"content":""},"parent_line_number":58,"fingerprint":"338698da293f95081cbc86562bdb75b8_0","old_fingerprint":"338698da293f95081cbc86562bdb75b8_112","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":25,"end":53}},"sink":{"start":58,"end":58,"column":{"start":25,"end":53},"content":""},"parent_line_number":58,"fingerprint":"1432cbfcb112ec47b584ba096899dfb5_0","old_fingerprint":"1432cbfcb112ec47b584ba096899dfb5_113","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01098.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01098.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":25,"end":71}},"sink":{"start":58,"end":58,"column":{"start":25,"end":71},"content":""},"parent_line_number":58,"fingerprint":"e998e159d04ba79f897a7e432f0c0ca2_0","old_fingerprint":"e998e159d04ba79f897a7e432f0c0ca2_90","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":65,"column":{"start":21,"end":72}},"sink":{"start":61,"end":65,"column":{"start":21,"end":72},"content":""},"parent_line_number":61,"fingerprint":"16f23505ba61a798476f16f53278b8bc_0","old_fingerprint":"16f23505ba61a798476f16f53278b8bc_145","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":21,"end":95}},"sink":{"start":61,"end":61,"column":{"start":21,"end":95},"content":""},"parent_line_number":61,"fingerprint":"09b81979c44ca41bea6a0aebff7a3443_0","old_fingerprint":"09b81979c44ca41bea6a0aebff7a3443_139","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":64,"column":{"start":21,"end":65}},"sink":{"start":61,"end":64,"column":{"start":21,"end":65},"content":""},"parent_line_number":61,"fingerprint":"aa8929f521369e152bd7940077d49957_0","old_fingerprint":"aa8929f521369e152bd7940077d49957_147","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":65,"column":{"start":21,"end":72}},"sink":{"start":61,"end":65,"column":{"start":21,"end":72},"content":""},"parent_line_number":61,"fingerprint":"e8ad927c4c390a98f270de2b9c603c82_0","old_fingerprint":"e8ad927c4c390a98f270de2b9c603c82_146","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01212.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01212.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":21,"end":71}},"sink":{"start":61,"end":61,"column":{"start":21,"end":71},"content":""},"parent_line_number":61,"fingerprint":"4c8a2820324721cd61588edd3c8c342d_0","old_fingerprint":"4c8a2820324721cd61588edd3c8c342d_144","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01213.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01213.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":21,"end":90}},"sink":{"start":61,"end":61,"column":{"start":21,"end":90},"content":""},"parent_line_number":61,"fingerprint":"281cfe6ddd16ba37dc7b631ed11524e2_0","old_fingerprint":"281cfe6ddd16ba37dc7b631ed11524e2_143","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01216.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01216.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":36}},"sink":{"start":60,"end":60,"column":{"start":13,"end":36},"content":""},"parent_line_number":60,"fingerprint":"5cf4945268757f84e7bc7221fa610803_0","old_fingerprint":"5cf4945268757f84e7bc7221fa610803_138","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01217.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01217.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":36}},"sink":{"start":60,"end":60,"column":{"start":13,"end":36},"content":""},"parent_line_number":60,"fingerprint":"55536064aec16961b59b9f0ac84afea0_0","old_fingerprint":"55536064aec16961b59b9f0ac84afea0_137","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01218.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01218.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":36}},"sink":{"start":60,"end":60,"column":{"start":13,"end":36},"content":""},"parent_line_number":60,"fingerprint":"157772111e158480d3cb1baad135bba6_0","old_fingerprint":"157772111e158480d3cb1baad135bba6_136","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01219.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01219.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":64}},"sink":{"start":60,"end":60,"column":{"start":37,"end":64},"content":""},"parent_line_number":60,"fingerprint":"afd41db2f0a73d9fad568e3e0932b51f_0","old_fingerprint":"afd41db2f0a73d9fad568e3e0932b51f_135","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01220.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01220.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":53}},"sink":{"start":60,"end":60,"column":{"start":25,"end":53},"content":""},"parent_line_number":60,"fingerprint":"fa7945acc3504a4569b5479bc8a86f02_0","old_fingerprint":"fa7945acc3504a4569b5479bc8a86f02_134","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":95}},"sink":{"start":60,"end":60,"column":{"start":25,"end":95},"content":""},"parent_line_number":60,"fingerprint":"04dc0952e80d5b2b19823a438e6f8e58_0","old_fingerprint":"04dc0952e80d5b2b19823a438e6f8e58_123","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":95}},"sink":{"start":60,"end":60,"column":{"start":25,"end":95},"content":""},"parent_line_number":60,"fingerprint":"275ab2c1769fbecdb29ea31d0183884a_0","old_fingerprint":"275ab2c1769fbecdb29ea31d0183884a_133","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01301.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01301.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":57,"column":{"start":21,"end":65}},"sink":{"start":54,"end":57,"column":{"start":21,"end":65},"content":""},"parent_line_number":54,"fingerprint":"5b9750914c05c4b2a80405e6184ee278_0","old_fingerprint":"5b9750914c05c4b2a80405e6184ee278_18","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01302.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01302.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":58,"column":{"start":21,"end":72}},"sink":{"start":54,"end":58,"column":{"start":21,"end":72},"content":""},"parent_line_number":54,"fingerprint":"216a8d9d5bb4b11df61d4020a73cb02d_0","old_fingerprint":"216a8d9d5bb4b11df61d4020a73cb02d_14","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01303.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01303.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":21,"end":95}},"sink":{"start":54,"end":54,"column":{"start":21,"end":95},"content":""},"parent_line_number":54,"fingerprint":"2cffbc7a2cb544584bf1095bdb466260_0","old_fingerprint":"2cffbc7a2cb544584bf1095bdb466260_26","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01304.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01304.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":58,"column":{"start":21,"end":72}},"sink":{"start":54,"end":58,"column":{"start":21,"end":72},"content":""},"parent_line_number":54,"fingerprint":"01521f4f5998a27006f5d78a080a9d73_0","old_fingerprint":"01521f4f5998a27006f5d78a080a9d73_13","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01305.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01305.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":21,"end":71}},"sink":{"start":54,"end":54,"column":{"start":21,"end":71},"content":""},"parent_line_number":54,"fingerprint":"b3312118981b0a40a51bf4f044fd4d0e_0","old_fingerprint":"b3312118981b0a40a51bf4f044fd4d0e_11","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01306.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01306.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":21,"end":90}},"sink":{"start":54,"end":54,"column":{"start":21,"end":90},"content":""},"parent_line_number":54,"fingerprint":"71a7b1875e40316a0e533ae827f22bca_0","old_fingerprint":"71a7b1875e40316a0e533ae827f22bca_30","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01307.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01307.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":21,"end":90}},"sink":{"start":54,"end":54,"column":{"start":21,"end":90},"content":""},"parent_line_number":54,"fingerprint":"093797f8fe976531f8f3e97bd9231c0e_0","old_fingerprint":"093797f8fe976531f8f3e97bd9231c0e_23","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01310.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01310.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":35}},"sink":{"start":53,"end":53,"column":{"start":13,"end":35},"content":""},"parent_line_number":53,"fingerprint":"319d5b82e9f0ef989bee680178a8e5aa_0","old_fingerprint":"319d5b82e9f0ef989bee680178a8e5aa_5","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01311.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01311.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":35}},"sink":{"start":53,"end":53,"column":{"start":13,"end":35},"content":""},"parent_line_number":53,"fingerprint":"72bb5f91d7a1b945908ba07321328b82_0","old_fingerprint":"72bb5f91d7a1b945908ba07321328b82_4","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01312.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01312.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":74}},"sink":{"start":53,"end":53,"column":{"start":13,"end":74},"content":""},"parent_line_number":53,"fingerprint":"ebb33c474f9f503d56cf8412c7fca21e_0","old_fingerprint":"ebb33c474f9f503d56cf8412c7fca21e_0","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01313.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01313.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":25,"end":53}},"sink":{"start":53,"end":53,"column":{"start":25,"end":53},"content":""},"parent_line_number":53,"fingerprint":"b892e815078613c9f67786fa3969e339_0","old_fingerprint":"b892e815078613c9f67786fa3969e339_1","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01314.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01314.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":25,"end":53}},"sink":{"start":53,"end":53,"column":{"start":25,"end":53},"content":""},"parent_line_number":53,"fingerprint":"09439fe02427191f83ca291f5026d134_0","old_fingerprint":"09439fe02427191f83ca291f5026d134_3","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01315.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01315.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":25,"end":95}},"sink":{"start":53,"end":53,"column":{"start":25,"end":95},"content":""},"parent_line_number":53,"fingerprint":"160b6374644bbf6c1c842695db4771f4_0","old_fingerprint":"160b6374644bbf6c1c842695db4771f4_2","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01378.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01378.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":61,"column":{"start":21,"end":65}},"sink":{"start":58,"end":61,"column":{"start":21,"end":65},"content":""},"parent_line_number":58,"fingerprint":"8c888fa290a5fb1a9e1c578e0da7a2f1_0","old_fingerprint":"8c888fa290a5fb1a9e1c578e0da7a2f1_107","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":62,"column":{"start":21,"end":72}},"sink":{"start":58,"end":62,"column":{"start":21,"end":72},"content":""},"parent_line_number":58,"fingerprint":"b52d9a9ae7770d4ff8756ec3fabdd8da_0","old_fingerprint":"b52d9a9ae7770d4ff8756ec3fabdd8da_106","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01380.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01380.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":62,"column":{"start":21,"end":72}},"sink":{"start":58,"end":62,"column":{"start":21,"end":72},"content":""},"parent_line_number":58,"fingerprint":"33515814306d05bf0887b1bfbe84371f_0","old_fingerprint":"33515814306d05bf0887b1bfbe84371f_105","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":21,"end":95}},"sink":{"start":58,"end":58,"column":{"start":21,"end":95},"content":""},"parent_line_number":58,"fingerprint":"9896e404239e5dc43e28cc1e1c3fe358_0","old_fingerprint":"9896e404239e5dc43e28cc1e1c3fe358_103","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":21,"end":95}},"sink":{"start":58,"end":58,"column":{"start":21,"end":95},"content":""},"parent_line_number":58,"fingerprint":"63139e8c594511e5ced7e70bffe6761e_0","old_fingerprint":"63139e8c594511e5ced7e70bffe6761e_102","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01383.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01383.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":61,"column":{"start":21,"end":65}},"sink":{"start":58,"end":61,"column":{"start":21,"end":65},"content":""},"parent_line_number":58,"fingerprint":"da2aa65423c93ac2369b4e1e8e291e99_0","old_fingerprint":"da2aa65423c93ac2369b4e1e8e291e99_101","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":21,"end":71}},"sink":{"start":58,"end":58,"column":{"start":21,"end":71},"content":""},"parent_line_number":58,"fingerprint":"369ed4dff3bde753597702d19e176891_0","old_fingerprint":"369ed4dff3bde753597702d19e176891_91","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01385.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01385.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":21,"end":90}},"sink":{"start":58,"end":58,"column":{"start":21,"end":90},"content":""},"parent_line_number":58,"fingerprint":"81f0e994759e45d765ec2a2969f13f08_0","old_fingerprint":"81f0e994759e45d765ec2a2969f13f08_114","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":37,"end":64}},"sink":{"start":57,"end":57,"column":{"start":37,"end":64},"content":""},"parent_line_number":57,"fingerprint":"15e8aa346c8bdab494fd26687c130d41_0","old_fingerprint":"15e8aa346c8bdab494fd26687c130d41_86","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01392.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01392.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":37,"end":64}},"sink":{"start":57,"end":57,"column":{"start":37,"end":64},"content":""},"parent_line_number":57,"fingerprint":"a00f4e8bd02f94088635a924ae7cffa0_0","old_fingerprint":"a00f4e8bd02f94088635a924ae7cffa0_87","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01393.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01393.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":71}},"sink":{"start":57,"end":57,"column":{"start":25,"end":71},"content":""},"parent_line_number":57,"fingerprint":"2fefb219291ece8b0cde5d4caadd5511_0","old_fingerprint":"2fefb219291ece8b0cde5d4caadd5511_88","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":71}},"sink":{"start":57,"end":57,"column":{"start":25,"end":71},"content":""},"parent_line_number":57,"fingerprint":"63fdc8593510f4f3a2d7d08e9d268fbe_0","old_fingerprint":"63fdc8593510f4f3a2d7d08e9d268fbe_74","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":92}},"sink":{"start":57,"end":57,"column":{"start":25,"end":92},"content":""},"parent_line_number":57,"fingerprint":"a7ebc0e4f2888c1ed43446c39c208414_0","old_fingerprint":"a7ebc0e4f2888c1ed43446c39c208414_85","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01396.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01396.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":92}},"sink":{"start":57,"end":57,"column":{"start":25,"end":92},"content":""},"parent_line_number":57,"fingerprint":"cb2ba5f4ea426daa478f1246cb05d60d_0","old_fingerprint":"cb2ba5f4ea426daa478f1246cb05d60d_84","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01459.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01459.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":52,"end":79}},"sink":{"start":67,"end":67,"column":{"start":52,"end":79},"content":""},"parent_line_number":67,"fingerprint":"4aa17cdf6c4b316ee5d25c1a1c4cfa2d_0","old_fingerprint":"4aa17cdf6c4b316ee5d25c1a1c4cfa2d_159","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":71,"column":{"start":21,"end":65}},"sink":{"start":68,"end":71,"column":{"start":21,"end":65},"content":""},"parent_line_number":68,"fingerprint":"9e891be05a6a330c32ed5b71b5feb528_0","old_fingerprint":"9e891be05a6a330c32ed5b71b5feb528_171","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01461.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01461.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":71,"column":{"start":21,"end":65}},"sink":{"start":68,"end":71,"column":{"start":21,"end":65},"content":""},"parent_line_number":68,"fingerprint":"765bc4dfad9a3471c60dfbd5534590b6_0","old_fingerprint":"765bc4dfad9a3471c60dfbd5534590b6_172","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":72,"column":{"start":21,"end":72}},"sink":{"start":68,"end":72,"column":{"start":21,"end":72},"content":""},"parent_line_number":68,"fingerprint":"25a8336b8966a5dbada4f34af6baa258_0","old_fingerprint":"25a8336b8966a5dbada4f34af6baa258_173","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":72,"column":{"start":21,"end":72}},"sink":{"start":68,"end":72,"column":{"start":21,"end":72},"content":""},"parent_line_number":68,"fingerprint":"9b6db96c4225999001423a6251872e90_0","old_fingerprint":"9b6db96c4225999001423a6251872e90_170","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":72,"column":{"start":21,"end":72}},"sink":{"start":68,"end":72,"column":{"start":21,"end":72},"content":""},"parent_line_number":68,"fingerprint":"5d359fb4aaf364668320b5563569301d_0","old_fingerprint":"5d359fb4aaf364668320b5563569301d_175","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01472.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01472.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":36}},"sink":{"start":67,"end":67,"column":{"start":13,"end":36},"content":""},"parent_line_number":67,"fingerprint":"5631bea2f1b46df98e77225912fe3157_0","old_fingerprint":"5631bea2f1b46df98e77225912fe3157_166","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":53}},"sink":{"start":67,"end":67,"column":{"start":13,"end":53},"content":""},"parent_line_number":67,"fingerprint":"f434684aa42a86e3f533b6938bd4a01d_0","old_fingerprint":"f434684aa42a86e3f533b6938bd4a01d_167","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":25,"end":95}},"sink":{"start":67,"end":67,"column":{"start":25,"end":95},"content":""},"parent_line_number":67,"fingerprint":"859e1623cba5f4fbb44ee5315114a0ae_0","old_fingerprint":"859e1623cba5f4fbb44ee5315114a0ae_162","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01475.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01475.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":25,"end":95}},"sink":{"start":67,"end":67,"column":{"start":25,"end":95},"content":""},"parent_line_number":67,"fingerprint":"8f86afc113caac415a15a22a5d324e93_0","old_fingerprint":"8f86afc113caac415a15a22a5d324e93_161","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01476.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01476.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":25,"end":92}},"sink":{"start":67,"end":67,"column":{"start":25,"end":92},"content":""},"parent_line_number":67,"fingerprint":"8ecc3baee413fad0cc70e0c6c5d8f50b_0","old_fingerprint":"8ecc3baee413fad0cc70e0c6c5d8f50b_157","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":25,"end":92}},"sink":{"start":67,"end":67,"column":{"start":25,"end":92},"content":""},"parent_line_number":67,"fingerprint":"20cdf00f700969ece3981581c0174b89_0","old_fingerprint":"20cdf00f700969ece3981581c0174b89_163","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01552.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01552.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"30754ba2ef94095afc9505b4a20361b4_0","old_fingerprint":"30754ba2ef94095afc9505b4a20361b4_61","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01557.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01557.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":77}},"sink":{"start":55,"end":55,"column":{"start":13,"end":77},"content":""},"parent_line_number":55,"fingerprint":"94b622e5b7b1fb0b6bdce9d5e6182603_0","old_fingerprint":"94b622e5b7b1fb0b6bdce9d5e6182603_34","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01558.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01558.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":77}},"sink":{"start":55,"end":55,"column":{"start":13,"end":77},"content":""},"parent_line_number":55,"fingerprint":"3f4489abc73b985c62368d816b7cd4f9_0","old_fingerprint":"3f4489abc73b985c62368d816b7cd4f9_35","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01559.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01559.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":53}},"sink":{"start":55,"end":55,"column":{"start":13,"end":53},"content":""},"parent_line_number":55,"fingerprint":"5b6bb2f262ed5278bdbc7ef5d6234ae7_0","old_fingerprint":"5b6bb2f262ed5278bdbc7ef5d6234ae7_36","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01560.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01560.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":95}},"sink":{"start":55,"end":55,"column":{"start":25,"end":95},"content":""},"parent_line_number":55,"fingerprint":"41112b4ce0ea3d395207685dc2b91d7d_0","old_fingerprint":"41112b4ce0ea3d395207685dc2b91d7d_37","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01620.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01620.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":52,"end":79}},"sink":{"start":55,"end":55,"column":{"start":52,"end":79},"content":""},"parent_line_number":55,"fingerprint":"556304da949df3439d405e1ca0a5526c_0","old_fingerprint":"556304da949df3439d405e1ca0a5526c_43","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01621.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01621.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":59,"column":{"start":21,"end":65}},"sink":{"start":56,"end":59,"column":{"start":21,"end":65},"content":""},"parent_line_number":56,"fingerprint":"d2f2aefa32f813960710a654c3731671_0","old_fingerprint":"d2f2aefa32f813960710a654c3731671_70","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01622.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01622.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"45f7d86cb081098ed5b180fe4f4d8889_0","old_fingerprint":"45f7d86cb081098ed5b180fe4f4d8889_69","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01623.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01623.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"1f818bf6243303b954b5006b7e44fd61_0","old_fingerprint":"1f818bf6243303b954b5006b7e44fd61_68","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01626.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01626.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":36}},"sink":{"start":55,"end":55,"column":{"start":13,"end":36},"content":""},"parent_line_number":55,"fingerprint":"c90873b7aa3e430d36046ea607a83c38_0","old_fingerprint":"c90873b7aa3e430d36046ea607a83c38_44","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01627.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01627.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":74}},"sink":{"start":55,"end":55,"column":{"start":13,"end":74},"content":""},"parent_line_number":55,"fingerprint":"38317bcca71ed2b2902f014bcf28db89_0","old_fingerprint":"38317bcca71ed2b2902f014bcf28db89_45","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01628.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01628.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":74}},"sink":{"start":55,"end":55,"column":{"start":13,"end":74},"content":""},"parent_line_number":55,"fingerprint":"721a8050586380954b0c71abd66b2250_0","old_fingerprint":"721a8050586380954b0c71abd66b2250_46","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01629.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01629.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":95}},"sink":{"start":55,"end":55,"column":{"start":25,"end":95},"content":""},"parent_line_number":55,"fingerprint":"976ea90d448e51220b454083e1627297_0","old_fingerprint":"976ea90d448e51220b454083e1627297_47","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01630.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01630.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":71}},"sink":{"start":55,"end":55,"column":{"start":25,"end":71},"content":""},"parent_line_number":55,"fingerprint":"cfd430543708cd7f729381257184d27a_0","old_fingerprint":"cfd430543708cd7f729381257184d27a_48","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01631.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01631.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":92}},"sink":{"start":55,"end":55,"column":{"start":25,"end":92},"content":""},"parent_line_number":55,"fingerprint":"dab946d5f353a13fcf8a90f47023cfeb_0","old_fingerprint":"dab946d5f353a13fcf8a90f47023cfeb_49","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":52,"end":79}},"sink":{"start":77,"end":77,"column":{"start":52,"end":79},"content":""},"parent_line_number":77,"fingerprint":"c8dbefd1637a6e9a0cd578254d10b30a_0","old_fingerprint":"c8dbefd1637a6e9a0cd578254d10b30a_210","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01713.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01713.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":52,"end":79}},"sink":{"start":77,"end":77,"column":{"start":52,"end":79},"content":""},"parent_line_number":77,"fingerprint":"f841007350b0c1946aa8fed3688de39b_0","old_fingerprint":"f841007350b0c1946aa8fed3688de39b_215","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01714.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01714.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"31488ea676c585ceea917d511e8bccbd_0","old_fingerprint":"31488ea676c585ceea917d511e8bccbd_247","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01715.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01715.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"c03a6e4afc899e0c91585ab590b3b248_0","old_fingerprint":"c03a6e4afc899e0c91585ab590b3b248_243","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"087dfbdb7ed49242dc82c716fe78acc1_0","old_fingerprint":"087dfbdb7ed49242dc82c716fe78acc1_233","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01717.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01717.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":82,"column":{"start":21,"end":72}},"sink":{"start":78,"end":82,"column":{"start":21,"end":72},"content":""},"parent_line_number":78,"fingerprint":"228308f98950532c6ab9125a8e02022a_0","old_fingerprint":"228308f98950532c6ab9125a8e02022a_245","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":82,"column":{"start":21,"end":72}},"sink":{"start":78,"end":82,"column":{"start":21,"end":72},"content":""},"parent_line_number":78,"fingerprint":"d8e3df04d91fc22bf9e5c8a473ec18dc_0","old_fingerprint":"d8e3df04d91fc22bf9e5c8a473ec18dc_244","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01719.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01719.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":21,"end":90}},"sink":{"start":78,"end":78,"column":{"start":21,"end":90},"content":""},"parent_line_number":78,"fingerprint":"8c33b957afb963d4bb39c56918dfa105_0","old_fingerprint":"8c33b957afb963d4bb39c56918dfa105_246","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":36}},"sink":{"start":77,"end":77,"column":{"start":13,"end":36},"content":""},"parent_line_number":77,"fingerprint":"c28cbfb461f25f1cc73d5b161a1d6f47_0","old_fingerprint":"c28cbfb461f25f1cc73d5b161a1d6f47_221","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01729.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01729.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":36}},"sink":{"start":77,"end":77,"column":{"start":13,"end":36},"content":""},"parent_line_number":77,"fingerprint":"19fcae2d9f19c3b9261e5c25efd18a87_0","old_fingerprint":"19fcae2d9f19c3b9261e5c25efd18a87_208","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":77}},"sink":{"start":77,"end":77,"column":{"start":13,"end":77},"content":""},"parent_line_number":77,"fingerprint":"33742476eec979b0bc58fa08ad426d7e_0","old_fingerprint":"33742476eec979b0bc58fa08ad426d7e_219","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":74}},"sink":{"start":77,"end":77,"column":{"start":13,"end":74},"content":""},"parent_line_number":77,"fingerprint":"84f763b440d098cc3eb39ef15c78ee2b_0","old_fingerprint":"84f763b440d098cc3eb39ef15c78ee2b_218","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01732.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01732.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":64}},"sink":{"start":77,"end":77,"column":{"start":37,"end":64},"content":""},"parent_line_number":77,"fingerprint":"9875a889aab174719e3ab3a5e56c5841_0","old_fingerprint":"9875a889aab174719e3ab3a5e56c5841_207","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01733.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01733.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":92}},"sink":{"start":77,"end":77,"column":{"start":25,"end":92},"content":""},"parent_line_number":77,"fingerprint":"6ec24da63e3c7b366559cfbd95544ce6_0","old_fingerprint":"6ec24da63e3c7b366559cfbd95544ce6_216","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01803.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01803.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":52,"end":79}},"sink":{"start":54,"end":54,"column":{"start":52,"end":79},"content":""},"parent_line_number":54,"fingerprint":"aa6d5aecaae2d9942374e01c423bbe60_0","old_fingerprint":"aa6d5aecaae2d9942374e01c423bbe60_10","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01804.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01804.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":52,"end":84}},"sink":{"start":54,"end":54,"column":{"start":52,"end":84},"content":""},"parent_line_number":54,"fingerprint":"035c56467e53333c235de4bcce164d7e_0","old_fingerprint":"035c56467e53333c235de4bcce164d7e_27","code_extract":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01805.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01805.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":58,"column":{"start":21,"end":65}},"sink":{"start":55,"end":58,"column":{"start":21,"end":65},"content":""},"parent_line_number":55,"fingerprint":"71565f396fe64a87c81425d2ba25ffee_0","old_fingerprint":"71565f396fe64a87c81425d2ba25ffee_59","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01815.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01815.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":36}},"sink":{"start":54,"end":54,"column":{"start":13,"end":36},"content":""},"parent_line_number":54,"fingerprint":"d36998b8bc31526ca2c7e81936c0c01a_0","old_fingerprint":"d36998b8bc31526ca2c7e81936c0c01a_32","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01816.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01816.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":36}},"sink":{"start":54,"end":54,"column":{"start":13,"end":36},"content":""},"parent_line_number":54,"fingerprint":"7cced61674e93b643caeb65b15a7eab5_0","old_fingerprint":"7cced61674e93b643caeb65b15a7eab5_16","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01817.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01817.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":36}},"sink":{"start":54,"end":54,"column":{"start":13,"end":36},"content":""},"parent_line_number":54,"fingerprint":"f3ee87d354bd6fe1b6ced40729275127_0","old_fingerprint":"f3ee87d354bd6fe1b6ced40729275127_24","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01818.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01818.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":53}},"sink":{"start":54,"end":54,"column":{"start":13,"end":53},"content":""},"parent_line_number":54,"fingerprint":"6404ba2178cd3ab503baa3743a27ddd3_0","old_fingerprint":"6404ba2178cd3ab503baa3743a27ddd3_22","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01819.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01819.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":25,"end":53}},"sink":{"start":54,"end":54,"column":{"start":25,"end":53},"content":""},"parent_line_number":54,"fingerprint":"194b52e775a527e97b70d46d50b71a52_0","old_fingerprint":"194b52e775a527e97b70d46d50b71a52_31","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01820.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01820.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":25,"end":92}},"sink":{"start":54,"end":54,"column":{"start":25,"end":92},"content":""},"parent_line_number":54,"fingerprint":"40bb9228bba4c291118e574c89d9875c_0","old_fingerprint":"40bb9228bba4c291118e574c89d9875c_29","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":77,"column":{"start":21,"end":65}},"sink":{"start":74,"end":77,"column":{"start":21,"end":65},"content":""},"parent_line_number":74,"fingerprint":"4008f9599fd61c2ea3ffa594158ed630_0","old_fingerprint":"4008f9599fd61c2ea3ffa594158ed630_201","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":95}},"sink":{"start":73,"end":73,"column":{"start":21,"end":95},"content":""},"parent_line_number":73,"fingerprint":"fc5ede4147661fafcbcb213d932fd9ec_0","old_fingerprint":"fc5ede4147661fafcbcb213d932fd9ec_198","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":76,"column":{"start":21,"end":65}},"sink":{"start":73,"end":76,"column":{"start":21,"end":65},"content":""},"parent_line_number":73,"fingerprint":"8d1f3bdeb65a7e393598fe99c1bf4d6e_0","old_fingerprint":"8d1f3bdeb65a7e393598fe99c1bf4d6e_197","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":77,"column":{"start":21,"end":72}},"sink":{"start":73,"end":77,"column":{"start":21,"end":72},"content":""},"parent_line_number":73,"fingerprint":"3842467bc496f9e1103d021c4eb45623_0","old_fingerprint":"3842467bc496f9e1103d021c4eb45623_199","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":77}},"sink":{"start":72,"end":72,"column":{"start":13,"end":77},"content":""},"parent_line_number":72,"fingerprint":"a36b83750e3b99aa95833be6888d1cf7_0","old_fingerprint":"a36b83750e3b99aa95833be6888d1cf7_183","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":74}},"sink":{"start":72,"end":72,"column":{"start":13,"end":74},"content":""},"parent_line_number":72,"fingerprint":"9f4a1991c392baadfe1c31496346819a_0","old_fingerprint":"9f4a1991c392baadfe1c31496346819a_182","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":53}},"sink":{"start":72,"end":72,"column":{"start":25,"end":53},"content":""},"parent_line_number":72,"fingerprint":"294000ac127bf80cd93b2d081254ac71_0","old_fingerprint":"294000ac127bf80cd93b2d081254ac71_185","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":53}},"sink":{"start":72,"end":72,"column":{"start":25,"end":53},"content":""},"parent_line_number":72,"fingerprint":"269a23d0454f1842e6961d0dd43203d9_0","old_fingerprint":"269a23d0454f1842e6961d0dd43203d9_191","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":71}},"sink":{"start":72,"end":72,"column":{"start":25,"end":71},"content":""},"parent_line_number":72,"fingerprint":"094dba86d98fa48c49265c79f5ebf795_0","old_fingerprint":"094dba86d98fa48c49265c79f5ebf795_189","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":92}},"sink":{"start":72,"end":72,"column":{"start":25,"end":92},"content":""},"parent_line_number":72,"fingerprint":"aa0eec612d099019d47efa7bfa4dde7b_0","old_fingerprint":"aa0eec612d099019d47efa7bfa4dde7b_188","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":25,"end":92}},"sink":{"start":72,"end":72,"column":{"start":25,"end":92},"content":""},"parent_line_number":72,"fingerprint":"23b6f7bd54f50436cc7f3aed7599749c_0","old_fingerprint":"23b6f7bd54f50436cc7f3aed7599749c_187","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01961.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01961.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":21,"end":95}},"sink":{"start":59,"end":59,"column":{"start":21,"end":95},"content":""},"parent_line_number":59,"fingerprint":"e202d8d229e197a0914e7b57eaff4c7c_0","old_fingerprint":"e202d8d229e197a0914e7b57eaff4c7c_118","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":21,"end":90}},"sink":{"start":59,"end":59,"column":{"start":21,"end":90},"content":""},"parent_line_number":59,"fingerprint":"88c3ffb143ae5674589ab4d3c26d175b_0","old_fingerprint":"88c3ffb143ae5674589ab4d3c26d175b_120","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01969.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01969.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":36}},"sink":{"start":58,"end":58,"column":{"start":13,"end":36},"content":""},"parent_line_number":58,"fingerprint":"0a9a56ef74da98a7dbc0e6f7e0f4560c_0","old_fingerprint":"0a9a56ef74da98a7dbc0e6f7e0f4560c_97","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":36}},"sink":{"start":58,"end":58,"column":{"start":13,"end":36},"content":""},"parent_line_number":58,"fingerprint":"88658c5f8105ad462adc4017944efe20_0","old_fingerprint":"88658c5f8105ad462adc4017944efe20_96","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":53}},"sink":{"start":58,"end":58,"column":{"start":13,"end":53},"content":""},"parent_line_number":58,"fingerprint":"c5896dfd114567ba041301136cc8ba7b_0","old_fingerprint":"c5896dfd114567ba041301136cc8ba7b_95","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":74}},"sink":{"start":58,"end":58,"column":{"start":13,"end":74},"content":""},"parent_line_number":58,"fingerprint":"e8d3796b7c4b9bb44b435a9efeb19670_0","old_fingerprint":"e8d3796b7c4b9bb44b435a9efeb19670_94","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01973.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01973.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":25,"end":53}},"sink":{"start":58,"end":58,"column":{"start":25,"end":53},"content":""},"parent_line_number":58,"fingerprint":"8be4263d7215ca303d35d0bf81e89cd2_0","old_fingerprint":"8be4263d7215ca303d35d0bf81e89cd2_93","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02087.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02087.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":21,"end":95}},"sink":{"start":61,"end":61,"column":{"start":21,"end":95},"content":""},"parent_line_number":61,"fingerprint":"83436d473ce574633cc619fd8a3b748b_0","old_fingerprint":"83436d473ce574633cc619fd8a3b748b_142","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02088.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02088.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":64,"column":{"start":21,"end":65}},"sink":{"start":61,"end":64,"column":{"start":21,"end":65},"content":""},"parent_line_number":61,"fingerprint":"bbaea42ad858dcfb9de4c7a7aa7b7987_0","old_fingerprint":"bbaea42ad858dcfb9de4c7a7aa7b7987_140","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02089.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02089.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":64,"column":{"start":21,"end":65}},"sink":{"start":61,"end":64,"column":{"start":21,"end":65},"content":""},"parent_line_number":61,"fingerprint":"c3394f36d20ef6c63c4fa1d4833a3a5f_0","old_fingerprint":"c3394f36d20ef6c63c4fa1d4833a3a5f_141","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":35}},"sink":{"start":60,"end":60,"column":{"start":13,"end":35},"content":""},"parent_line_number":60,"fingerprint":"6ad03ae2ecad9539f5dce5c4accf7a07_0","old_fingerprint":"6ad03ae2ecad9539f5dce5c4accf7a07_132","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02093.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02093.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":35}},"sink":{"start":60,"end":60,"column":{"start":13,"end":35},"content":""},"parent_line_number":60,"fingerprint":"70241045c4fc635f1bbfa6a8484789ed_0","old_fingerprint":"70241045c4fc635f1bbfa6a8484789ed_131","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":35}},"sink":{"start":60,"end":60,"column":{"start":13,"end":35},"content":""},"parent_line_number":60,"fingerprint":"2272de7c5d1504d10a5e602a08ce3ba9_0","old_fingerprint":"2272de7c5d1504d10a5e602a08ce3ba9_130","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02095.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02095.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":77}},"sink":{"start":60,"end":60,"column":{"start":13,"end":77},"content":""},"parent_line_number":60,"fingerprint":"d502d0f84bf4ec3801bb42e6cfee3827_0","old_fingerprint":"d502d0f84bf4ec3801bb42e6cfee3827_129","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":53}},"sink":{"start":60,"end":60,"column":{"start":13,"end":53},"content":""},"parent_line_number":60,"fingerprint":"b9acdfa9a12dc2cdb431639e2886da78_0","old_fingerprint":"b9acdfa9a12dc2cdb431639e2886da78_128","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02097.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02097.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":64}},"sink":{"start":60,"end":60,"column":{"start":37,"end":64},"content":""},"parent_line_number":60,"fingerprint":"540af51cbcaa2995819e711765f51854_0","old_fingerprint":"540af51cbcaa2995819e711765f51854_126","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02098.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02098.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":64}},"sink":{"start":60,"end":60,"column":{"start":37,"end":64},"content":""},"parent_line_number":60,"fingerprint":"33b4263a5188e901b8f65ff61e00a47f_0","old_fingerprint":"33b4263a5188e901b8f65ff61e00a47f_125","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":25,"end":53}},"sink":{"start":60,"end":60,"column":{"start":25,"end":53},"content":""},"parent_line_number":60,"fingerprint":"77a5e7afdc544a88abccfa6d808d8bdd_0","old_fingerprint":"77a5e7afdc544a88abccfa6d808d8bdd_124","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02169.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02169.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":57,"column":{"start":21,"end":65}},"sink":{"start":54,"end":57,"column":{"start":21,"end":65},"content":""},"parent_line_number":54,"fingerprint":"9b2e58dcb20664bb7eb3be052b57bbeb_0","old_fingerprint":"9b2e58dcb20664bb7eb3be052b57bbeb_28","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02170.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02170.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":58,"column":{"start":21,"end":72}},"sink":{"start":54,"end":58,"column":{"start":21,"end":72},"content":""},"parent_line_number":54,"fingerprint":"4b0224339a9b87996546c6e3e00c56ab_0","old_fingerprint":"4b0224339a9b87996546c6e3e00c56ab_20","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02171.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02171.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":57,"column":{"start":21,"end":65}},"sink":{"start":54,"end":57,"column":{"start":21,"end":65},"content":""},"parent_line_number":54,"fingerprint":"8e39f14c49c198a514d3e0d30633934b_0","old_fingerprint":"8e39f14c49c198a514d3e0d30633934b_21","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02172.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02172.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":57,"column":{"start":21,"end":65}},"sink":{"start":54,"end":57,"column":{"start":21,"end":65},"content":""},"parent_line_number":54,"fingerprint":"728a1874977c33ea86830db5e2f9a875_0","old_fingerprint":"728a1874977c33ea86830db5e2f9a875_12","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02173.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02173.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":57,"column":{"start":21,"end":65}},"sink":{"start":54,"end":57,"column":{"start":21,"end":65},"content":""},"parent_line_number":54,"fingerprint":"b7408ab14899d973c550b53c38dc07c5_0","old_fingerprint":"b7408ab14899d973c550b53c38dc07c5_15","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02185.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02185.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":36}},"sink":{"start":53,"end":53,"column":{"start":13,"end":36},"content":""},"parent_line_number":53,"fingerprint":"d04bb31a18aded48d85472a4768136c6_0","old_fingerprint":"d04bb31a18aded48d85472a4768136c6_9","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02186.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02186.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":35}},"sink":{"start":53,"end":53,"column":{"start":13,"end":35},"content":""},"parent_line_number":53,"fingerprint":"2cd0a4f7ba8fec7c2774b2af5d522da3_0","old_fingerprint":"2cd0a4f7ba8fec7c2774b2af5d522da3_7","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02187.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02187.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":35}},"sink":{"start":53,"end":53,"column":{"start":13,"end":35},"content":""},"parent_line_number":53,"fingerprint":"c98fbc4cd7760b7d5828590015170890_0","old_fingerprint":"c98fbc4cd7760b7d5828590015170890_6","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02188.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02188.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":37,"end":64}},"sink":{"start":53,"end":53,"column":{"start":37,"end":64},"content":""},"parent_line_number":53,"fingerprint":"35ce46dbb21086041b54e15a6c53a9e8_0","old_fingerprint":"35ce46dbb21086041b54e15a6c53a9e8_8","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":52,"end":79}},"sink":{"start":57,"end":57,"column":{"start":52,"end":79},"content":""},"parent_line_number":57,"fingerprint":"d3a89b702ace0b87571482c75728507c_0","old_fingerprint":"d3a89b702ace0b87571482c75728507c_79","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02265.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02265.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":61,"column":{"start":21,"end":65}},"sink":{"start":58,"end":61,"column":{"start":21,"end":65},"content":""},"parent_line_number":58,"fingerprint":"7f881448d8b42fd8a320e22cc0396c92_0","old_fingerprint":"7f881448d8b42fd8a320e22cc0396c92_98","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02266.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02266.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":62,"column":{"start":21,"end":72}},"sink":{"start":58,"end":62,"column":{"start":21,"end":72},"content":""},"parent_line_number":58,"fingerprint":"02b7d05f1d040687d2afd9203dbf12ed_0","old_fingerprint":"02b7d05f1d040687d2afd9203dbf12ed_99","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02267.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02267.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":52,"end":84}},"sink":{"start":57,"end":57,"column":{"start":52,"end":84},"content":""},"parent_line_number":57,"fingerprint":"f77fbcee5f70d812a94ee5215d6acacf_0","old_fingerprint":"f77fbcee5f70d812a94ee5215d6acacf_77","code_extract":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02268.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02268.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":62,"column":{"start":21,"end":72}},"sink":{"start":58,"end":62,"column":{"start":21,"end":72},"content":""},"parent_line_number":58,"fingerprint":"c94127189beae30153cb2a01bbe3b7f3_0","old_fingerprint":"c94127189beae30153cb2a01bbe3b7f3_115","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":62,"column":{"start":21,"end":72}},"sink":{"start":58,"end":62,"column":{"start":21,"end":72},"content":""},"parent_line_number":58,"fingerprint":"28f6957ee4093fd2b1131c42a7c69f72_0","old_fingerprint":"28f6957ee4093fd2b1131c42a7c69f72_116","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":62,"column":{"start":21,"end":72}},"sink":{"start":58,"end":62,"column":{"start":21,"end":72},"content":""},"parent_line_number":58,"fingerprint":"ae5191b624b7f6ce85d0835da3249c5c_0","old_fingerprint":"ae5191b624b7f6ce85d0835da3249c5c_92","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02271.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02271.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":21,"end":71}},"sink":{"start":58,"end":58,"column":{"start":21,"end":71},"content":""},"parent_line_number":58,"fingerprint":"ef86ac3c1cad72c9b675a1cc6f090db0_0","old_fingerprint":"ef86ac3c1cad72c9b675a1cc6f090db0_100","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02283.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02283.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":13,"end":53}},"sink":{"start":57,"end":57,"column":{"start":13,"end":53},"content":""},"parent_line_number":57,"fingerprint":"6bea4dc5b04876f67c331b1d527ecba8_0","old_fingerprint":"6bea4dc5b04876f67c331b1d527ecba8_83","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":13,"end":74}},"sink":{"start":57,"end":57,"column":{"start":13,"end":74},"content":""},"parent_line_number":57,"fingerprint":"8df663c73f90716dc3740411f4708910_0","old_fingerprint":"8df663c73f90716dc3740411f4708910_82","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02285.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02285.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":13,"end":74}},"sink":{"start":57,"end":57,"column":{"start":13,"end":74},"content":""},"parent_line_number":57,"fingerprint":"69cf0a984e829511e4e4cfe106d75987_0","old_fingerprint":"69cf0a984e829511e4e4cfe106d75987_81","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":53}},"sink":{"start":57,"end":57,"column":{"start":25,"end":53},"content":""},"parent_line_number":57,"fingerprint":"a3f00259da8713febd0ab5a2b98c9eee_0","old_fingerprint":"a3f00259da8713febd0ab5a2b98c9eee_80","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":92}},"sink":{"start":57,"end":57,"column":{"start":25,"end":92},"content":""},"parent_line_number":57,"fingerprint":"63125e3e1aac819c81642d44a6ab05dd_0","old_fingerprint":"63125e3e1aac819c81642d44a6ab05dd_73","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":25,"end":92}},"sink":{"start":57,"end":57,"column":{"start":25,"end":92},"content":""},"parent_line_number":57,"fingerprint":"6e8c7f3444c69c1e066f9339e4cafa56_0","old_fingerprint":"6e8c7f3444c69c1e066f9339e4cafa56_78","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02353.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02353.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":21,"end":95}},"sink":{"start":68,"end":68,"column":{"start":21,"end":95},"content":""},"parent_line_number":68,"fingerprint":"ade037cbef5a9c555926a016d228a35f_0","old_fingerprint":"ade037cbef5a9c555926a016d228a35f_177","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":21,"end":71}},"sink":{"start":68,"end":68,"column":{"start":21,"end":71},"content":""},"parent_line_number":68,"fingerprint":"67916c9bb1c08cde2635b950a5f832a3_0","old_fingerprint":"67916c9bb1c08cde2635b950a5f832a3_176","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":21,"end":90}},"sink":{"start":68,"end":68,"column":{"start":21,"end":90},"content":""},"parent_line_number":68,"fingerprint":"abd2c5bfc7243d0c869dc314d73777e6_0","old_fingerprint":"abd2c5bfc7243d0c869dc314d73777e6_174","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":35}},"sink":{"start":67,"end":67,"column":{"start":13,"end":35},"content":""},"parent_line_number":67,"fingerprint":"519941e9c69046ddc43bd97366636075_0","old_fingerprint":"519941e9c69046ddc43bd97366636075_168","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02365.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02365.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":77}},"sink":{"start":67,"end":67,"column":{"start":13,"end":77},"content":""},"parent_line_number":67,"fingerprint":"488b4f21f3d2ebcd20c5750ddce700b0_0","old_fingerprint":"488b4f21f3d2ebcd20c5750ddce700b0_158","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02366.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02366.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":77}},"sink":{"start":67,"end":67,"column":{"start":13,"end":77},"content":""},"parent_line_number":67,"fingerprint":"0a716ae798fc1dd286f6697c41470234_0","old_fingerprint":"0a716ae798fc1dd286f6697c41470234_160","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02367.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02367.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":53}},"sink":{"start":67,"end":67,"column":{"start":13,"end":53},"content":""},"parent_line_number":67,"fingerprint":"08dce5e0550eb128f2cb35ac7c91b4b3_0","old_fingerprint":"08dce5e0550eb128f2cb35ac7c91b4b3_164","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02368.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02368.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":25,"end":95}},"sink":{"start":67,"end":67,"column":{"start":25,"end":95},"content":""},"parent_line_number":67,"fingerprint":"058992df0835ae761e7a7b4e6e11ae8c_0","old_fingerprint":"058992df0835ae761e7a7b4e6e11ae8c_165","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":25,"end":71}},"sink":{"start":67,"end":67,"column":{"start":25,"end":71},"content":""},"parent_line_number":67,"fingerprint":"605c3c5ec8cac294073b63486f15ea64_0","old_fingerprint":"605c3c5ec8cac294073b63486f15ea64_156","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02449.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02449.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"3ede68d5aee30da57bb072fa9a455989_0","old_fingerprint":"3ede68d5aee30da57bb072fa9a455989_72","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02450.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02450.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":21,"end":95}},"sink":{"start":56,"end":56,"column":{"start":21,"end":95},"content":""},"parent_line_number":56,"fingerprint":"f40e13b6d711a1f22496b5e0825ab7a4_0","old_fingerprint":"f40e13b6d711a1f22496b5e0825ab7a4_60","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02454.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02454.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":36}},"sink":{"start":55,"end":55,"column":{"start":13,"end":36},"content":""},"parent_line_number":55,"fingerprint":"88b4cb38993a6a5426d274872f2f75a0_0","old_fingerprint":"88b4cb38993a6a5426d274872f2f75a0_38","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02455.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02455.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":53}},"sink":{"start":55,"end":55,"column":{"start":25,"end":53},"content":""},"parent_line_number":55,"fingerprint":"b51640c66743ab32c61a15161d1fa36f_0","old_fingerprint":"b51640c66743ab32c61a15161d1fa36f_39","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02456.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02456.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":92}},"sink":{"start":55,"end":55,"column":{"start":25,"end":92},"content":""},"parent_line_number":55,"fingerprint":"49a5ad751a932dbc996189d2d67be2bc_0","old_fingerprint":"49a5ad751a932dbc996189d2d67be2bc_40","code_extract":"            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02528.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02528.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":52,"end":79}},"sink":{"start":55,"end":55,"column":{"start":52,"end":79},"content":""},"parent_line_number":55,"fingerprint":"8b18d68accf4f4a59256d330eb160e26_0","old_fingerprint":"8b18d68accf4f4a59256d330eb160e26_41","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02529.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02529.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":52,"end":79}},"sink":{"start":55,"end":55,"column":{"start":52,"end":79},"content":""},"parent_line_number":55,"fingerprint":"cdca497ca7d132d2e387b4730dc31834_0","old_fingerprint":"cdca497ca7d132d2e387b4730dc31834_42","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02530.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02530.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"903de663e96b6e726dc0cb76a2e9a491_0","old_fingerprint":"903de663e96b6e726dc0cb76a2e9a491_71","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02531.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02531.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":21,"end":95}},"sink":{"start":56,"end":56,"column":{"start":21,"end":95},"content":""},"parent_line_number":56,"fingerprint":"9238fa62655600abc01c62111f09de4f_0","old_fingerprint":"9238fa62655600abc01c62111f09de4f_67","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02532.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02532.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":59,"column":{"start":21,"end":65}},"sink":{"start":56,"end":59,"column":{"start":21,"end":65},"content":""},"parent_line_number":56,"fingerprint":"b4973d251eb3da6b08e31e1f087fd91e_0","old_fingerprint":"b4973d251eb3da6b08e31e1f087fd91e_66","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02533.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02533.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"2a7a818bd494aac0a98175e8f45ace2f_0","old_fingerprint":"2a7a818bd494aac0a98175e8f45ace2f_65","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02534.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02534.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"528a90a4ae3131251a43a8d84b2bb992_0","old_fingerprint":"528a90a4ae3131251a43a8d84b2bb992_64","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02535.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02535.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":60,"column":{"start":21,"end":72}},"sink":{"start":56,"end":60,"column":{"start":21,"end":72},"content":""},"parent_line_number":56,"fingerprint":"190339a7a97b85028f9badd2ef095c91_0","old_fingerprint":"190339a7a97b85028f9badd2ef095c91_63","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02541.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02541.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":36}},"sink":{"start":55,"end":55,"column":{"start":13,"end":36},"content":""},"parent_line_number":55,"fingerprint":"b998b8f5f45de0ebbc50b4db55d77fba_0","old_fingerprint":"b998b8f5f45de0ebbc50b4db55d77fba_50","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02542.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02542.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":35}},"sink":{"start":55,"end":55,"column":{"start":13,"end":35},"content":""},"parent_line_number":55,"fingerprint":"1bb29a5611858fe709e3a6091d7f58cd_0","old_fingerprint":"1bb29a5611858fe709e3a6091d7f58cd_33","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02543.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02543.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":77}},"sink":{"start":55,"end":55,"column":{"start":13,"end":77},"content":""},"parent_line_number":55,"fingerprint":"0ee7bb2ddbea0e85c9d6f410aa5459d7_0","old_fingerprint":"0ee7bb2ddbea0e85c9d6f410aa5459d7_51","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02544.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02544.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":53}},"sink":{"start":55,"end":55,"column":{"start":13,"end":53},"content":""},"parent_line_number":55,"fingerprint":"772ee99393f63e5705310e21cbbe108e_0","old_fingerprint":"772ee99393f63e5705310e21cbbe108e_52","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02545.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02545.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":53}},"sink":{"start":55,"end":55,"column":{"start":25,"end":53},"content":""},"parent_line_number":55,"fingerprint":"f2747443a4f6819baa7c2fcdc70c98fc_0","old_fingerprint":"f2747443a4f6819baa7c2fcdc70c98fc_53","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02546.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02546.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":25,"end":71}},"sink":{"start":55,"end":55,"column":{"start":25,"end":71},"content":""},"parent_line_number":55,"fingerprint":"cfff41c09e05d8549bfa894a2a822dc3_0","old_fingerprint":"cfff41c09e05d8549bfa894a2a822dc3_54","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":52,"end":79}},"sink":{"start":77,"end":77,"column":{"start":52,"end":79},"content":""},"parent_line_number":77,"fingerprint":"e9c9a8a11160a31a3b8b7a32665d6804_0","old_fingerprint":"e9c9a8a11160a31a3b8b7a32665d6804_222","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02626.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02626.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":52,"end":79}},"sink":{"start":77,"end":77,"column":{"start":52,"end":79},"content":""},"parent_line_number":77,"fingerprint":"a97899d069870405eac15a5fb3ed8df1_0","old_fingerprint":"a97899d069870405eac15a5fb3ed8df1_223","code_extract":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"b4f9c5c9a8c5aec6cb6f07d9ce546cbc_0","old_fingerprint":"b4f9c5c9a8c5aec6cb6f07d9ce546cbc_234","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"02654e9e2d6d7ad7665a47d5cd37a027_0","old_fingerprint":"02654e9e2d6d7ad7665a47d5cd37a027_241","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02629.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02629.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"bf1c74012c4238a51c3257d6625784e4_0","old_fingerprint":"bf1c74012c4238a51c3257d6625784e4_240","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":82,"column":{"start":21,"end":72}},"sink":{"start":78,"end":82,"column":{"start":21,"end":72},"content":""},"parent_line_number":78,"fingerprint":"e2244db646d1e33f2b13caea32c66b96_0","old_fingerprint":"e2244db646d1e33f2b13caea32c66b96_239","code_extract":"                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02631.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02631.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":52,"end":84}},"sink":{"start":77,"end":77,"column":{"start":52,"end":84},"content":""},"parent_line_number":77,"fingerprint":"307f4ceaacc38fe36791319d6cbddc62_0","old_fingerprint":"307f4ceaacc38fe36791319d6cbddc62_228","code_extract":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":52,"end":84}},"sink":{"start":77,"end":77,"column":{"start":52,"end":84},"content":""},"parent_line_number":77,"fingerprint":"4efdf5ae4d40ea658d63d65a9ca9f548_0","old_fingerprint":"4efdf5ae4d40ea658d63d65a9ca9f548_229","code_extract":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02633.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02633.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":21,"end":95}},"sink":{"start":78,"end":78,"column":{"start":21,"end":95},"content":""},"parent_line_number":78,"fingerprint":"2a5858d6c97d3a0c44c88154a90df099_0","old_fingerprint":"2a5858d6c97d3a0c44c88154a90df099_238","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02634.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02634.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":81,"column":{"start":21,"end":65}},"sink":{"start":78,"end":81,"column":{"start":21,"end":65},"content":""},"parent_line_number":78,"fingerprint":"7c0f663acac79d7679916b6fc8117ac4_0","old_fingerprint":"7c0f663acac79d7679916b6fc8117ac4_237","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":82,"column":{"start":21,"end":72}},"sink":{"start":78,"end":82,"column":{"start":21,"end":72},"content":""},"parent_line_number":78,"fingerprint":"78c5c1098f2ab58efd1a57fedb9598c6_0","old_fingerprint":"78c5c1098f2ab58efd1a57fedb9598c6_236","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02636.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02636.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":21,"end":90}},"sink":{"start":78,"end":78,"column":{"start":21,"end":90},"content":""},"parent_line_number":78,"fingerprint":"d2104203c330f45bf2e531a169d2ba92_0","old_fingerprint":"d2104203c330f45bf2e531a169d2ba92_235","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02637.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02637.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":21,"end":90}},"sink":{"start":78,"end":78,"column":{"start":21,"end":90},"content":""},"parent_line_number":78,"fingerprint":"5cb8d3518234a43be52204f719ef2224_0","old_fingerprint":"5cb8d3518234a43be52204f719ef2224_242","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":36}},"sink":{"start":77,"end":77,"column":{"start":13,"end":36},"content":""},"parent_line_number":77,"fingerprint":"f635aef6612c56cdfa3a2653b47774e3_0","old_fingerprint":"f635aef6612c56cdfa3a2653b47774e3_217","code_extract":"            statement.addBatch(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02648.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02648.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":77}},"sink":{"start":77,"end":77,"column":{"start":13,"end":77},"content":""},"parent_line_number":77,"fingerprint":"5fb17d387900d393fb98dfb5d56ffa1e_0","old_fingerprint":"5fb17d387900d393fb98dfb5d56ffa1e_232","code_extract":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":53}},"sink":{"start":77,"end":77,"column":{"start":13,"end":53},"content":""},"parent_line_number":77,"fingerprint":"6fd4db7fe8ef62b9c0de302076b872e4_0","old_fingerprint":"6fd4db7fe8ef62b9c0de302076b872e4_231","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":53}},"sink":{"start":77,"end":77,"column":{"start":13,"end":53},"content":""},"parent_line_number":77,"fingerprint":"4dd28cf8d2453dca2660dbee7006035d_0","old_fingerprint":"4dd28cf8d2453dca2660dbee7006035d_230","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":74}},"sink":{"start":77,"end":77,"column":{"start":13,"end":74},"content":""},"parent_line_number":77,"fingerprint":"80733315c882daac8508c21f32bc4444_0","old_fingerprint":"80733315c882daac8508c21f32bc4444_227","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02652.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02652.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":74}},"sink":{"start":77,"end":77,"column":{"start":13,"end":74},"content":""},"parent_line_number":77,"fingerprint":"0cb2aa5980658622639927f9bfb9adef_0","old_fingerprint":"0cb2aa5980658622639927f9bfb9adef_226","code_extract":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":64}},"sink":{"start":77,"end":77,"column":{"start":37,"end":64},"content":""},"parent_line_number":77,"fingerprint":"e651206affb8f432433bb5d3d8c19ed8_0","old_fingerprint":"e651206affb8f432433bb5d3d8c19ed8_225","code_extract":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":53}},"sink":{"start":77,"end":77,"column":{"start":25,"end":53},"content":""},"parent_line_number":77,"fingerprint":"4ef891b466938a939f354ed4f85ef135_0","old_fingerprint":"4ef891b466938a939f354ed4f85ef135_224","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":53}},"sink":{"start":77,"end":77,"column":{"start":25,"end":53},"content":""},"parent_line_number":77,"fingerprint":"fb172b26e956ad9a825ca8d72d8bf9af_0","old_fingerprint":"fb172b26e956ad9a825ca8d72d8bf9af_214","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":95}},"sink":{"start":77,"end":77,"column":{"start":25,"end":95},"content":""},"parent_line_number":77,"fingerprint":"be991e7d1cc6995346faaa6b758e2f68_0","old_fingerprint":"be991e7d1cc6995346faaa6b758e2f68_213","code_extract":"            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02657.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02657.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":25,"end":71}},"sink":{"start":77,"end":77,"column":{"start":25,"end":71},"content":""},"parent_line_number":77,"fingerprint":"d7e61e4e716c7d92c243f2020e723f2d_0","old_fingerprint":"d7e61e4e716c7d92c243f2020e723f2d_212","code_extract":"            int count = statement.executeUpdate(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02727.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02727.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":21,"end":95}},"sink":{"start":55,"end":55,"column":{"start":21,"end":95},"content":""},"parent_line_number":55,"fingerprint":"45dc52e1e5cde613b2091d9a094b7400_0","old_fingerprint":"45dc52e1e5cde613b2091d9a094b7400_55","code_extract":"                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02728.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02728.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":59,"column":{"start":21,"end":72}},"sink":{"start":55,"end":59,"column":{"start":21,"end":72},"content":""},"parent_line_number":55,"fingerprint":"d7ac4c95c1280f07c5812ef0fc04c029_0","old_fingerprint":"d7ac4c95c1280f07c5812ef0fc04c029_56","code_extract":"                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02729.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02729.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":21,"end":71}},"sink":{"start":55,"end":55,"column":{"start":21,"end":71},"content":""},"parent_line_number":55,"fingerprint":"8faf35569651761285518337e8a4a88a_0","old_fingerprint":"8faf35569651761285518337e8a4a88a_57","code_extract":"                    connection.prepareStatement(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02730.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02730.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":21,"end":90}},"sink":{"start":55,"end":55,"column":{"start":21,"end":90},"content":""},"parent_line_number":55,"fingerprint":"0075c6486b69c052a0dd6aeeb0ffb55e_0","old_fingerprint":"0075c6486b69c052a0dd6aeeb0ffb55e_58","code_extract":"                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02738.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02738.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":35}},"sink":{"start":54,"end":54,"column":{"start":13,"end":35},"content":""},"parent_line_number":54,"fingerprint":"a011a7432fc3acb635b7e9b91ba5fdf5_0","old_fingerprint":"a011a7432fc3acb635b7e9b91ba5fdf5_17","code_extract":"            statement.execute(sql);"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02739.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02739.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":53}},"sink":{"start":54,"end":54,"column":{"start":13,"end":53},"content":""},"parent_line_number":54,"fingerprint":"3610e48404398c8fe9bec762b2848858_0","old_fingerprint":"3610e48404398c8fe9bec762b2848858_19","code_extract":"            statement.execute(sql, new int[] {1, 2});"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02740.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02740.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":25,"end":53}},"sink":{"start":54,"end":54,"column":{"start":25,"end":53},"content":""},"parent_line_number":54,"fingerprint":"2b0b0fbaa5ac011135126ac9f4f4d0ad_0","old_fingerprint":"2b0b0fbaa5ac011135126ac9f4f4d0ad_25","code_extract":"            int count = statement.executeUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00032.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00032.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":13,"end":81}},"sink":{"start":54,"end":54,"column":{"start":13,"end":81},"content":""},"parent_line_number":54,"fingerprint":"38e101246732192ade834bc5bc756671_0","old_fingerprint":"38e101246732192ade834bc5bc756671_37","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00033.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00033.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":21,"end":96}},"sink":{"start":54,"end":54,"column":{"start":21,"end":96},"content":""},"parent_line_number":54,"fingerprint":"1db8399893877998f2e0a023dc43b5d5_0","old_fingerprint":"1db8399893877998f2e0a023dc43b5d5_36","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00038.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00038.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":79,"column":{"start":21,"end":31}},"sink":{"start":64,"end":79,"column":{"start":21,"end":31},"content":""},"parent_line_number":64,"fingerprint":"fc4a918ecf3f803b9d70d3c795137fa2_0","old_fingerprint":"fc4a918ecf3f803b9d70d3c795137fa2_80","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00039.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00039.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":93}},"sink":{"start":65,"end":65,"column":{"start":21,"end":93},"content":""},"parent_line_number":65,"fingerprint":"9729773f5cba1c017094258c9ba6ebe1_0","old_fingerprint":"9729773f5cba1c017094258c9ba6ebe1_87","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":93}},"sink":{"start":73,"end":73,"column":{"start":21,"end":93},"content":""},"parent_line_number":73,"fingerprint":"1e65f8a4cb791a3f4625db05738c3c47_0","old_fingerprint":"1e65f8a4cb791a3f4625db05738c3c47_111","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":77,"column":{"start":21,"end":64}},"sink":{"start":76,"end":77,"column":{"start":21,"end":64},"content":""},"parent_line_number":76,"fingerprint":"81b48bb376c9ab2482a775dd5810e297_0","old_fingerprint":"81b48bb376c9ab2482a775dd5810e297_129","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":85}},"sink":{"start":75,"end":75,"column":{"start":13,"end":85},"content":""},"parent_line_number":75,"fingerprint":"c49252fbb72cdd52efc0902b8234e700_0","old_fingerprint":"c49252fbb72cdd52efc0902b8234e700_128","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00194.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00194.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":13,"end":85}},"sink":{"start":63,"end":63,"column":{"start":13,"end":85},"content":""},"parent_line_number":63,"fingerprint":"d2ae40f951d60cf07035990e172f6f90_0","old_fingerprint":"d2ae40f951d60cf07035990e172f6f90_78","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00195.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00195.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":13,"end":81}},"sink":{"start":61,"end":61,"column":{"start":13,"end":81},"content":""},"parent_line_number":61,"fingerprint":"65a536dc11cfde17e6248ef45c3b8f1e_0","old_fingerprint":"65a536dc11cfde17e6248ef45c3b8f1e_77","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":61,"column":{"start":21,"end":48}},"sink":{"start":60,"end":61,"column":{"start":21,"end":48},"content":""},"parent_line_number":60,"fingerprint":"d0f065df76bc6901c9f3db04117668c1_0","old_fingerprint":"d0f065df76bc6901c9f3db04117668c1_76","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":66,"column":{"start":21,"end":45}},"sink":{"start":65,"end":66,"column":{"start":21,"end":45},"content":""},"parent_line_number":65,"fingerprint":"13190e7558a83dfe71d3858d46086c67_0","old_fingerprint":"13190e7558a83dfe71d3858d46086c67_91","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00338.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00338.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":65,"column":{"start":21,"end":64}},"sink":{"start":64,"end":65,"column":{"start":21,"end":64},"content":""},"parent_line_number":64,"fingerprint":"dea76078d8f69700ea44f69deaebd1fb_0","old_fingerprint":"dea76078d8f69700ea44f69deaebd1fb_81","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00339.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00339.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":21,"end":96}},"sink":{"start":63,"end":63,"column":{"start":21,"end":96},"content":""},"parent_line_number":63,"fingerprint":"aefc29508deaccda82cefb90e682a0ef_0","old_fingerprint":"aefc29508deaccda82cefb90e682a0ef_79","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00597.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00597.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":21,"end":94}},"sink":{"start":67,"end":67,"column":{"start":21,"end":94},"content":""},"parent_line_number":67,"fingerprint":"882509cf6da6eed8b13823ecfb374765_0","old_fingerprint":"882509cf6da6eed8b13823ecfb374765_98","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00598.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00598.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":93}},"sink":{"start":73,"end":73,"column":{"start":21,"end":93},"content":""},"parent_line_number":73,"fingerprint":"e3410cd605f8fb75b94c7bed8a0f0c67_0","old_fingerprint":"e3410cd605f8fb75b94c7bed8a0f0c67_110","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00840.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00840.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":13,"end":85}},"sink":{"start":80,"end":80,"column":{"start":13,"end":85},"content":""},"parent_line_number":80,"fingerprint":"3b43bf6428fbf95cca8d11f4e42d8522_0","old_fingerprint":"3b43bf6428fbf95cca8d11f4e42d8522_132","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00845.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00845.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":21,"end":96}},"sink":{"start":80,"end":80,"column":{"start":21,"end":96},"content":""},"parent_line_number":80,"fingerprint":"8ea797081297e45b1b1d1f77dfb8fd73_0","old_fingerprint":"8ea797081297e45b1b1d1f77dfb8fd73_133","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00846.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00846.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":85}},"sink":{"start":75,"end":75,"column":{"start":13,"end":85},"content":""},"parent_line_number":75,"fingerprint":"ebb3fad6a20b62a0727a4a1f6aa14c93_0","old_fingerprint":"ebb3fad6a20b62a0727a4a1f6aa14c93_115","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":13,"end":85}},"sink":{"start":70,"end":70,"column":{"start":13,"end":85},"content":""},"parent_line_number":70,"fingerprint":"14872f5a753388a413762aaa04f433b2_0","old_fingerprint":"14872f5a753388a413762aaa04f433b2_104","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":73,"column":{"start":21,"end":45}},"sink":{"start":72,"end":73,"column":{"start":21,"end":45},"content":""},"parent_line_number":72,"fingerprint":"f065bfac542f909d038b3488ea73007b_0","old_fingerprint":"f065bfac542f909d038b3488ea73007b_109","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":21,"end":93}},"sink":{"start":71,"end":71,"column":{"start":21,"end":93},"content":""},"parent_line_number":71,"fingerprint":"c611726081d480c8225f51b5fabefe70_0","old_fingerprint":"c611726081d480c8225f51b5fabefe70_108","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":21,"end":96}},"sink":{"start":70,"end":70,"column":{"start":21,"end":96},"content":""},"parent_line_number":70,"fingerprint":"d35da73bc6addc34d14eca86f9850715_0","old_fingerprint":"d35da73bc6addc34d14eca86f9850715_106","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":21,"end":96}},"sink":{"start":70,"end":70,"column":{"start":21,"end":96},"content":""},"parent_line_number":70,"fingerprint":"f6f18302936866817046bc47cb1b7e40_0","old_fingerprint":"f6f18302936866817046bc47cb1b7e40_100","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":13,"end":85}},"sink":{"start":70,"end":70,"column":{"start":13,"end":85},"content":""},"parent_line_number":70,"fingerprint":"99ff586d9cb11b1e30241bfd64513a9a_0","old_fingerprint":"99ff586d9cb11b1e30241bfd64513a9a_102","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01085.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01085.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":81}},"sink":{"start":56,"end":56,"column":{"start":13,"end":81},"content":""},"parent_line_number":56,"fingerprint":"d45124705d5c3255e3aa90449c13f77b_0","old_fingerprint":"d45124705d5c3255e3aa90449c13f77b_53","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01086.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01086.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":81}},"sink":{"start":56,"end":56,"column":{"start":13,"end":81},"content":""},"parent_line_number":56,"fingerprint":"0738e767ce6c391f97546fdd26d39bc0_0","old_fingerprint":"0738e767ce6c391f97546fdd26d39bc0_54","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":59,"column":{"start":21,"end":48}},"sink":{"start":58,"end":59,"column":{"start":21,"end":48},"content":""},"parent_line_number":58,"fingerprint":"028268fec94f788aa4a552176f6d2bff_0","old_fingerprint":"028268fec94f788aa4a552176f6d2bff_71","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":59,"column":{"start":21,"end":45}},"sink":{"start":58,"end":59,"column":{"start":21,"end":45},"content":""},"parent_line_number":58,"fingerprint":"2ac319f4cae7bcb5969ec13cd57fdc45_0","old_fingerprint":"2ac319f4cae7bcb5969ec13cd57fdc45_73","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01089.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01089.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":64}},"sink":{"start":57,"end":58,"column":{"start":21,"end":64},"content":""},"parent_line_number":57,"fingerprint":"621d6bfc3d92c2bb511505f67657e3d7_0","old_fingerprint":"621d6bfc3d92c2bb511505f67657e3d7_64","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01214.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01214.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":85}},"sink":{"start":58,"end":58,"column":{"start":13,"end":85},"content":""},"parent_line_number":58,"fingerprint":"00e46b5315f25aed4b5e6a0787eed359_0","old_fingerprint":"00e46b5315f25aed4b5e6a0787eed359_74","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":61,"column":{"start":21,"end":45}},"sink":{"start":60,"end":61,"column":{"start":21,"end":45},"content":""},"parent_line_number":60,"fingerprint":"cdd209b4043f5521a79fbe112dd86ea8_0","old_fingerprint":"cdd209b4043f5521a79fbe112dd86ea8_75","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01308.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01308.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":54,"column":{"start":21,"end":45}},"sink":{"start":53,"end":54,"column":{"start":21,"end":45},"content":""},"parent_line_number":53,"fingerprint":"896ec71fc8ad27c9c0ccd917c38835aa_0","old_fingerprint":"896ec71fc8ad27c9c0ccd917c38835aa_31","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01309.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01309.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":53,"column":{"start":21,"end":64}},"sink":{"start":52,"end":53,"column":{"start":21,"end":64},"content":""},"parent_line_number":52,"fingerprint":"9d80e4a09a68f17380158b0f0277db5c_0","old_fingerprint":"9d80e4a09a68f17380158b0f0277db5c_13","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":48}},"sink":{"start":57,"end":58,"column":{"start":21,"end":48},"content":""},"parent_line_number":57,"fingerprint":"086c9ce861de01b3fbacce2dfb5604db_0","old_fingerprint":"086c9ce861de01b3fbacce2dfb5604db_57","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":48}},"sink":{"start":57,"end":58,"column":{"start":21,"end":48},"content":""},"parent_line_number":57,"fingerprint":"923612838c4a4c4ab1ef3166e44138ed_0","old_fingerprint":"923612838c4a4c4ab1ef3166e44138ed_65","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":48}},"sink":{"start":57,"end":58,"column":{"start":21,"end":48},"content":""},"parent_line_number":57,"fingerprint":"1c737e9ddf60411d7ff104e133ce156a_0","old_fingerprint":"1c737e9ddf60411d7ff104e133ce156a_66","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01389.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01389.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":21,"end":94}},"sink":{"start":55,"end":55,"column":{"start":21,"end":94},"content":""},"parent_line_number":55,"fingerprint":"3a1912419fee44951a7fb5dd5027c536_0","old_fingerprint":"3a1912419fee44951a7fb5dd5027c536_43","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":45}},"sink":{"start":57,"end":58,"column":{"start":21,"end":45},"content":""},"parent_line_number":57,"fingerprint":"038630b95dc9bb25ce1afd62891d7cf0_0","old_fingerprint":"038630b95dc9bb25ce1afd62891d7cf0_67","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01465.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01465.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":81}},"sink":{"start":65,"end":65,"column":{"start":13,"end":81},"content":""},"parent_line_number":65,"fingerprint":"a282333d4cf4d87a162517f9e5a3ac18_0","old_fingerprint":"a282333d4cf4d87a162517f9e5a3ac18_86","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01466.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01466.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":80,"column":{"start":21,"end":31}},"sink":{"start":65,"end":80,"column":{"start":21,"end":31},"content":""},"parent_line_number":65,"fingerprint":"85dc48c13383b786ddf2ec53f4c65780_0","old_fingerprint":"85dc48c13383b786ddf2ec53f4c65780_88","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01467.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01467.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":94}},"sink":{"start":65,"end":65,"column":{"start":21,"end":94},"content":""},"parent_line_number":65,"fingerprint":"ed5b875f5931aae82f85509f81357ae0_0","old_fingerprint":"ed5b875f5931aae82f85509f81357ae0_84","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01468.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01468.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":94}},"sink":{"start":65,"end":65,"column":{"start":21,"end":94},"content":""},"parent_line_number":65,"fingerprint":"b06ca473797d33888bce5820a65c020e_0","old_fingerprint":"b06ca473797d33888bce5820a65c020e_92","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01469.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01469.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":94}},"sink":{"start":65,"end":65,"column":{"start":21,"end":94},"content":""},"parent_line_number":65,"fingerprint":"9fb7d78e3188f07b0305c194aaaea5ba_0","old_fingerprint":"9fb7d78e3188f07b0305c194aaaea5ba_93","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01470.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01470.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":21,"end":93}},"sink":{"start":66,"end":66,"column":{"start":21,"end":93},"content":""},"parent_line_number":66,"fingerprint":"ea964cb4e1dbee7a4ca7a61baf5a0e7a_0","old_fingerprint":"ea964cb4e1dbee7a4ca7a61baf5a0e7a_95","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01471.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01471.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":85}},"sink":{"start":65,"end":65,"column":{"start":13,"end":85},"content":""},"parent_line_number":65,"fingerprint":"8d6ed7961a186e9eaa44f89b82e8d829_0","old_fingerprint":"8d6ed7961a186e9eaa44f89b82e8d829_94","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01553.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01553.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":81}},"sink":{"start":53,"end":53,"column":{"start":13,"end":81},"content":""},"parent_line_number":53,"fingerprint":"9c3882c3e28899766cdd6f1adec44e52_0","old_fingerprint":"9c3882c3e28899766cdd6f1adec44e52_25","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01554.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01554.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":21,"end":94}},"sink":{"start":53,"end":53,"column":{"start":21,"end":94},"content":""},"parent_line_number":53,"fingerprint":"5c42623fb3f5ae84d43859f2e2827332_0","old_fingerprint":"5c42623fb3f5ae84d43859f2e2827332_19","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01555.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01555.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":56,"column":{"start":21,"end":45}},"sink":{"start":55,"end":56,"column":{"start":21,"end":45},"content":""},"parent_line_number":55,"fingerprint":"3af9d3154f07adf8b408ad9c971e2305_0","old_fingerprint":"3af9d3154f07adf8b408ad9c971e2305_47","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01556.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01556.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":56,"column":{"start":21,"end":45}},"sink":{"start":55,"end":56,"column":{"start":21,"end":45},"content":""},"parent_line_number":55,"fingerprint":"5a120821d756f40de6f4e4a55661b96a_0","old_fingerprint":"5a120821d756f40de6f4e4a55661b96a_48","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01624.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01624.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":85}},"sink":{"start":53,"end":53,"column":{"start":13,"end":85},"content":""},"parent_line_number":53,"fingerprint":"8048fe4f744f6564dd592ba074c325c9_0","old_fingerprint":"8048fe4f744f6564dd592ba074c325c9_24","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01625.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01625.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":56,"column":{"start":21,"end":45}},"sink":{"start":55,"end":56,"column":{"start":21,"end":45},"content":""},"parent_line_number":55,"fingerprint":"817579c1b1b52c4b8d385d8ab44e41d1_0","old_fingerprint":"817579c1b1b52c4b8d385d8ab44e41d1_50","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01720.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01720.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":81}},"sink":{"start":75,"end":75,"column":{"start":13,"end":81},"content":""},"parent_line_number":75,"fingerprint":"f05bf77dfa637dbbd24aedbc07d33746_0","old_fingerprint":"f05bf77dfa637dbbd24aedbc07d33746_114","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01721.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01721.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":90,"column":{"start":21,"end":31}},"sink":{"start":75,"end":90,"column":{"start":21,"end":31},"content":""},"parent_line_number":75,"fingerprint":"dde4ddd97074e7d2bf832181c92f1f2d_0","old_fingerprint":"dde4ddd97074e7d2bf832181c92f1f2d_117","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01722.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01722.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":90,"column":{"start":21,"end":31}},"sink":{"start":75,"end":90,"column":{"start":21,"end":31},"content":""},"parent_line_number":75,"fingerprint":"c1acc0c1cbb82bca85b32e3309822f59_0","old_fingerprint":"c1acc0c1cbb82bca85b32e3309822f59_112","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":78,"column":{"start":21,"end":48}},"sink":{"start":77,"end":78,"column":{"start":21,"end":48},"content":""},"parent_line_number":77,"fingerprint":"6a275d36de4571c27fe19991c454abab_0","old_fingerprint":"6a275d36de4571c27fe19991c454abab_131","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01724.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01724.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":94}},"sink":{"start":75,"end":75,"column":{"start":21,"end":94},"content":""},"parent_line_number":75,"fingerprint":"e84998688832d8fd84f79aa892780b26_0","old_fingerprint":"e84998688832d8fd84f79aa892780b26_127","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01725.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01725.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":77,"column":{"start":21,"end":64}},"sink":{"start":76,"end":77,"column":{"start":21,"end":64},"content":""},"parent_line_number":76,"fingerprint":"8eded75aa86b342a841ec4c5d42a6d2b_0","old_fingerprint":"8eded75aa86b342a841ec4c5d42a6d2b_130","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01726.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01726.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":96}},"sink":{"start":75,"end":75,"column":{"start":21,"end":96},"content":""},"parent_line_number":75,"fingerprint":"af1d0dd5a73bb1bc347ffe0b8b4f1666_0","old_fingerprint":"af1d0dd5a73bb1bc347ffe0b8b4f1666_116","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01727.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01727.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":85}},"sink":{"start":75,"end":75,"column":{"start":13,"end":85},"content":""},"parent_line_number":75,"fingerprint":"0ea7b1dfed7c0bb3bb6ad02c0fb726a8_0","old_fingerprint":"0ea7b1dfed7c0bb3bb6ad02c0fb726a8_123","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01806.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01806.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":13,"end":85}},"sink":{"start":52,"end":52,"column":{"start":13,"end":85},"content":""},"parent_line_number":52,"fingerprint":"f6aeeccabef1fd7fd174f8bd12055a63_0","old_fingerprint":"f6aeeccabef1fd7fd174f8bd12055a63_15","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01807.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01807.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":13,"end":85}},"sink":{"start":52,"end":52,"column":{"start":13,"end":85},"content":""},"parent_line_number":52,"fingerprint":"c9e70b9092646d16f3dc95cb4c7cf25c_0","old_fingerprint":"c9e70b9092646d16f3dc95cb4c7cf25c_12","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01808.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01808.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":55,"column":{"start":21,"end":48}},"sink":{"start":54,"end":55,"column":{"start":21,"end":48},"content":""},"parent_line_number":54,"fingerprint":"b3524525ecceed3c2f48c30b4fcc9167_0","old_fingerprint":"b3524525ecceed3c2f48c30b4fcc9167_39","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01809.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01809.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":21,"end":94}},"sink":{"start":52,"end":52,"column":{"start":21,"end":94},"content":""},"parent_line_number":52,"fingerprint":"eef39aaa9c165ea9caca696d1f96b719_0","old_fingerprint":"eef39aaa9c165ea9caca696d1f96b719_10","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01810.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01810.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":21,"end":93}},"sink":{"start":53,"end":53,"column":{"start":21,"end":93},"content":""},"parent_line_number":53,"fingerprint":"2267a8d0728434127db5b02ffecfa072_0","old_fingerprint":"2267a8d0728434127db5b02ffecfa072_21","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01811.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01811.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":21,"end":93}},"sink":{"start":53,"end":53,"column":{"start":21,"end":93},"content":""},"parent_line_number":53,"fingerprint":"fbd51c350c63e095cab8eb85d5dee9ab_0","old_fingerprint":"fbd51c350c63e095cab8eb85d5dee9ab_22","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01812.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01812.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":54,"column":{"start":21,"end":64}},"sink":{"start":53,"end":54,"column":{"start":21,"end":64},"content":""},"parent_line_number":53,"fingerprint":"de461842b90939c7e91aeceb23ec7d93_0","old_fingerprint":"de461842b90939c7e91aeceb23ec7d93_23","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01813.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01813.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":54,"column":{"start":21,"end":64}},"sink":{"start":53,"end":54,"column":{"start":21,"end":64},"content":""},"parent_line_number":53,"fingerprint":"6616893f8695f77a6de62a2718c20787_0","old_fingerprint":"6616893f8695f77a6de62a2718c20787_26","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01814.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01814.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":21,"end":96}},"sink":{"start":52,"end":52,"column":{"start":21,"end":96},"content":""},"parent_line_number":52,"fingerprint":"4df7fc6cf58025f04d7858b0dd01dbd2_0","old_fingerprint":"4df7fc6cf58025f04d7858b0dd01dbd2_6","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":13,"end":85}},"sink":{"start":70,"end":70,"column":{"start":13,"end":85},"content":""},"parent_line_number":70,"fingerprint":"1ee47e883a028499a2ed03243ee92f83_0","old_fingerprint":"1ee47e883a028499a2ed03243ee92f83_101","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":85,"column":{"start":21,"end":31}},"sink":{"start":70,"end":85,"column":{"start":21,"end":31},"content":""},"parent_line_number":70,"fingerprint":"9b9f85e1fb6bd7f91a41a02b5c00f67a_0","old_fingerprint":"9b9f85e1fb6bd7f91a41a02b5c00f67a_105","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":21,"end":96}},"sink":{"start":70,"end":70,"column":{"start":21,"end":96},"content":""},"parent_line_number":70,"fingerprint":"11a7cb173676403b59b397315b1d5f7f_0","old_fingerprint":"11a7cb173676403b59b397315b1d5f7f_103","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":13,"end":85}},"sink":{"start":70,"end":70,"column":{"start":13,"end":85},"content":""},"parent_line_number":70,"fingerprint":"170142caf91fb1158b8d55ad4472efe2_0","old_fingerprint":"170142caf91fb1158b8d55ad4472efe2_107","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01963.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01963.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":85}},"sink":{"start":56,"end":56,"column":{"start":13,"end":85},"content":""},"parent_line_number":56,"fingerprint":"44e58849ed75ebb457ce18dbb030fa16_0","old_fingerprint":"44e58849ed75ebb457ce18dbb030fa16_55","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01964.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01964.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":71,"column":{"start":21,"end":31}},"sink":{"start":56,"end":71,"column":{"start":21,"end":31},"content":""},"parent_line_number":56,"fingerprint":"35044ccaa18eefbadfcb70196c757fbc_0","old_fingerprint":"35044ccaa18eefbadfcb70196c757fbc_56","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":59,"column":{"start":21,"end":45}},"sink":{"start":58,"end":59,"column":{"start":21,"end":45},"content":""},"parent_line_number":58,"fingerprint":"511d403295e63697f30ac491cff8a220_0","old_fingerprint":"511d403295e63697f30ac491cff8a220_70","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01966.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01966.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":64}},"sink":{"start":57,"end":58,"column":{"start":21,"end":64},"content":""},"parent_line_number":57,"fingerprint":"792d2d6311a7c26ce0d12bd1befacd2b_0","old_fingerprint":"792d2d6311a7c26ce0d12bd1befacd2b_58","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01967.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01967.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":64}},"sink":{"start":57,"end":58,"column":{"start":21,"end":64},"content":""},"parent_line_number":57,"fingerprint":"fcd099c4920d94f7f2992c5dcd7b0daa_0","old_fingerprint":"fcd099c4920d94f7f2992c5dcd7b0daa_68","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01968.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01968.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":85}},"sink":{"start":56,"end":56,"column":{"start":13,"end":85},"content":""},"parent_line_number":56,"fingerprint":"f2e56785338fae1fe33f3b98630a96cf_0","old_fingerprint":"f2e56785338fae1fe33f3b98630a96cf_51","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02090.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02090.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":13,"end":81}},"sink":{"start":58,"end":58,"column":{"start":13,"end":81},"content":""},"parent_line_number":58,"fingerprint":"27ee74826351ab4648af77e47fa1f470_0","old_fingerprint":"27ee74826351ab4648af77e47fa1f470_69","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02091.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02091.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":73,"column":{"start":21,"end":31}},"sink":{"start":58,"end":73,"column":{"start":21,"end":31},"content":""},"parent_line_number":58,"fingerprint":"c631acfa65c08d5120cb3095cbd0ff08_0","old_fingerprint":"c631acfa65c08d5120cb3095cbd0ff08_72","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02174.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02174.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":13,"end":85}},"sink":{"start":51,"end":51,"column":{"start":13,"end":85},"content":""},"parent_line_number":51,"fingerprint":"e389d00eee047b01370e428f8174bcf2_0","old_fingerprint":"e389d00eee047b01370e428f8174bcf2_5","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02175.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02175.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":13,"end":81}},"sink":{"start":51,"end":51,"column":{"start":13,"end":81},"content":""},"parent_line_number":51,"fingerprint":"918a7b194f5d5ed867fb15cc4c806314_0","old_fingerprint":"918a7b194f5d5ed867fb15cc4c806314_0","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02176.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02176.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":13,"end":81}},"sink":{"start":51,"end":51,"column":{"start":13,"end":81},"content":""},"parent_line_number":51,"fingerprint":"288bf93f32999c6312a6bb37e821c36d_0","old_fingerprint":"288bf93f32999c6312a6bb37e821c36d_3","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02177.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02177.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":66,"column":{"start":21,"end":31}},"sink":{"start":51,"end":66,"column":{"start":21,"end":31},"content":""},"parent_line_number":51,"fingerprint":"d5dfad40f6b7d9a08878ad1c6c694172_0","old_fingerprint":"d5dfad40f6b7d9a08878ad1c6c694172_2","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02178.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02178.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":21,"end":94}},"sink":{"start":51,"end":51,"column":{"start":21,"end":94},"content":""},"parent_line_number":51,"fingerprint":"fb46f801ad02fe40ac57096515a207a5_0","old_fingerprint":"fb46f801ad02fe40ac57096515a207a5_1","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02179.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02179.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":54,"column":{"start":21,"end":45}},"sink":{"start":53,"end":54,"column":{"start":21,"end":45},"content":""},"parent_line_number":53,"fingerprint":"cdd1b8d55d385250ee36e617a379b3ca_0","old_fingerprint":"cdd1b8d55d385250ee36e617a379b3ca_30","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02180.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02180.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":54,"column":{"start":21,"end":45}},"sink":{"start":53,"end":54,"column":{"start":21,"end":45},"content":""},"parent_line_number":53,"fingerprint":"272d99fc44276fe67efbbcf99533c122_0","old_fingerprint":"272d99fc44276fe67efbbcf99533c122_29","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02181.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02181.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":21,"end":93}},"sink":{"start":52,"end":52,"column":{"start":21,"end":93},"content":""},"parent_line_number":52,"fingerprint":"4c3c4071d7f84abbe340c4c6ca16a060_0","old_fingerprint":"4c3c4071d7f84abbe340c4c6ca16a060_14","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02182.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02182.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":21,"end":93}},"sink":{"start":52,"end":52,"column":{"start":21,"end":93},"content":""},"parent_line_number":52,"fingerprint":"bba1a10fceae3e4b0ef334c8e1da8c01_0","old_fingerprint":"bba1a10fceae3e4b0ef334c8e1da8c01_16","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02183.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02183.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":53,"column":{"start":21,"end":64}},"sink":{"start":52,"end":53,"column":{"start":21,"end":64},"content":""},"parent_line_number":52,"fingerprint":"14051e1d347b33ec3dcaa47fe831396d_0","old_fingerprint":"14051e1d347b33ec3dcaa47fe831396d_17","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02184.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02184.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":21,"end":96}},"sink":{"start":51,"end":51,"column":{"start":21,"end":96},"content":""},"parent_line_number":51,"fingerprint":"9a017c30c550a12abe84f2d72007e619_0","old_fingerprint":"9a017c30c550a12abe84f2d72007e619_4","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02272.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02272.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":85}},"sink":{"start":55,"end":55,"column":{"start":13,"end":85},"content":""},"parent_line_number":55,"fingerprint":"288729f10b12593574d7d35771e24e57_0","old_fingerprint":"288729f10b12593574d7d35771e24e57_42","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02273.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02273.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":85}},"sink":{"start":55,"end":55,"column":{"start":13,"end":85},"content":""},"parent_line_number":55,"fingerprint":"c13b4b33ee041d95d2e1a7ce5e39f11f_0","old_fingerprint":"c13b4b33ee041d95d2e1a7ce5e39f11f_49","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02274.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02274.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":70,"column":{"start":21,"end":31}},"sink":{"start":55,"end":70,"column":{"start":21,"end":31},"content":""},"parent_line_number":55,"fingerprint":"8c19dc912c4dc837f0a8ddecc919986c_0","old_fingerprint":"8c19dc912c4dc837f0a8ddecc919986c_45","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":48}},"sink":{"start":57,"end":58,"column":{"start":21,"end":48},"content":""},"parent_line_number":57,"fingerprint":"78b598edd5a69a631001e447cb0662d4_0","old_fingerprint":"78b598edd5a69a631001e447cb0662d4_63","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":48}},"sink":{"start":57,"end":58,"column":{"start":21,"end":48},"content":""},"parent_line_number":57,"fingerprint":"fe2d1fdf80d45348fa676bb3f899bc78_0","old_fingerprint":"fe2d1fdf80d45348fa676bb3f899bc78_62","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02277.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02277.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":21,"end":94}},"sink":{"start":55,"end":55,"column":{"start":21,"end":94},"content":""},"parent_line_number":55,"fingerprint":"add9626c8165ad71c15e637b520882e8_0","old_fingerprint":"add9626c8165ad71c15e637b520882e8_46","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":45}},"sink":{"start":57,"end":58,"column":{"start":21,"end":45},"content":""},"parent_line_number":57,"fingerprint":"d7b5a939fa7dfe9441c845dc5f92b612_0","old_fingerprint":"d7b5a939fa7dfe9441c845dc5f92b612_61","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":45}},"sink":{"start":57,"end":58,"column":{"start":21,"end":45},"content":""},"parent_line_number":57,"fingerprint":"b96bd9e903d3c54cffe1a25052a1cb1f_0","old_fingerprint":"b96bd9e903d3c54cffe1a25052a1cb1f_60","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":58,"column":{"start":21,"end":45}},"sink":{"start":57,"end":58,"column":{"start":21,"end":45},"content":""},"parent_line_number":57,"fingerprint":"2c709b250b6d33b945e31a2fd1495570_0","old_fingerprint":"2c709b250b6d33b945e31a2fd1495570_59","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02281.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02281.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":21,"end":93}},"sink":{"start":56,"end":56,"column":{"start":21,"end":93},"content":""},"parent_line_number":56,"fingerprint":"4e4a81a9908fd1b5e6a76c80abd43f86_0","old_fingerprint":"4e4a81a9908fd1b5e6a76c80abd43f86_52","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02282.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02282.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":85}},"sink":{"start":55,"end":55,"column":{"start":13,"end":85},"content":""},"parent_line_number":55,"fingerprint":"b8ddc3a5772d2157fde3856d8a4e2eaf_0","old_fingerprint":"b8ddc3a5772d2157fde3856d8a4e2eaf_44","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02356.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02356.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":81}},"sink":{"start":65,"end":65,"column":{"start":13,"end":81},"content":""},"parent_line_number":65,"fingerprint":"3e571b46d655124cb5cf5eaeb6b758a6_0","old_fingerprint":"3e571b46d655124cb5cf5eaeb6b758a6_90","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02357.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02357.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":80,"column":{"start":21,"end":31}},"sink":{"start":65,"end":80,"column":{"start":21,"end":31},"content":""},"parent_line_number":65,"fingerprint":"9ff7194fbce580cec3402e2061d0d630_0","old_fingerprint":"9ff7194fbce580cec3402e2061d0d630_82","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02358.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02358.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":94}},"sink":{"start":65,"end":65,"column":{"start":21,"end":94},"content":""},"parent_line_number":65,"fingerprint":"9d51b7c704f1687b1d89353ebdd003b7_0","old_fingerprint":"9d51b7c704f1687b1d89353ebdd003b7_83","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":68,"column":{"start":21,"end":45}},"sink":{"start":67,"end":68,"column":{"start":21,"end":45},"content":""},"parent_line_number":67,"fingerprint":"1437e33d79b4cce10d09e061914ffcb1_0","old_fingerprint":"1437e33d79b4cce10d09e061914ffcb1_97","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":68,"column":{"start":21,"end":45}},"sink":{"start":67,"end":68,"column":{"start":21,"end":45},"content":""},"parent_line_number":67,"fingerprint":"58a46bc3822359dc8f95ee0dcab7c0a7_0","old_fingerprint":"58a46bc3822359dc8f95ee0dcab7c0a7_99","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02361.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02361.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":67,"column":{"start":21,"end":64}},"sink":{"start":66,"end":67,"column":{"start":21,"end":64},"content":""},"parent_line_number":66,"fingerprint":"cd587e8f0aaacd6e598170383815786a_0","old_fingerprint":"cd587e8f0aaacd6e598170383815786a_96","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02362.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02362.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":96}},"sink":{"start":65,"end":65,"column":{"start":21,"end":96},"content":""},"parent_line_number":65,"fingerprint":"d8968f12cbabb14e8b78b9560b469328_0","old_fingerprint":"d8968f12cbabb14e8b78b9560b469328_89","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02363.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02363.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":85}},"sink":{"start":65,"end":65,"column":{"start":13,"end":85},"content":""},"parent_line_number":65,"fingerprint":"2e4f3119ae68ae7731f9904b98cb0d53_0","old_fingerprint":"2e4f3119ae68ae7731f9904b98cb0d53_85","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02451.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02451.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":81}},"sink":{"start":53,"end":53,"column":{"start":13,"end":81},"content":""},"parent_line_number":53,"fingerprint":"d0f12e1380b235d69c65a5b9dc86643e_0","old_fingerprint":"d0f12e1380b235d69c65a5b9dc86643e_27","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02452.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02452.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":21,"end":94}},"sink":{"start":53,"end":53,"column":{"start":21,"end":94},"content":""},"parent_line_number":53,"fingerprint":"3668631f08c15262264c69f3c200971a_0","old_fingerprint":"3668631f08c15262264c69f3c200971a_18","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02453.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02453.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":21,"end":93}},"sink":{"start":54,"end":54,"column":{"start":21,"end":93},"content":""},"parent_line_number":54,"fingerprint":"c2f8ee966c051a0610004526f125efce_0","old_fingerprint":"c2f8ee966c051a0610004526f125efce_38","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02536.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02536.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":85}},"sink":{"start":53,"end":53,"column":{"start":13,"end":85},"content":""},"parent_line_number":53,"fingerprint":"9ebdd5b4d2e3d5b06581d1ced63c301c_0","old_fingerprint":"9ebdd5b4d2e3d5b06581d1ced63c301c_32","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02537.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02537.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":85}},"sink":{"start":53,"end":53,"column":{"start":13,"end":85},"content":""},"parent_line_number":53,"fingerprint":"0269ffaec94f3b6ac9f92cd35acb8c3c_0","old_fingerprint":"0269ffaec94f3b6ac9f92cd35acb8c3c_34","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02538.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02538.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":55,"column":{"start":21,"end":64}},"sink":{"start":54,"end":55,"column":{"start":21,"end":64},"content":""},"parent_line_number":54,"fingerprint":"5bee59695e465716fe7a2ba3e73c3cef_0","old_fingerprint":"5bee59695e465716fe7a2ba3e73c3cef_40","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02539.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02539.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":21,"end":96}},"sink":{"start":53,"end":53,"column":{"start":21,"end":96},"content":""},"parent_line_number":53,"fingerprint":"c4ebace972e7a11259a8cb76be592e18_0","old_fingerprint":"c4ebace972e7a11259a8cb76be592e18_33","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02540.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02540.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":13,"end":85}},"sink":{"start":53,"end":53,"column":{"start":13,"end":85},"content":""},"parent_line_number":53,"fingerprint":"d580c2120baf3f4f5cfd64b3baa746e5_0","old_fingerprint":"d580c2120baf3f4f5cfd64b3baa746e5_28","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02638.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02638.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":85}},"sink":{"start":75,"end":75,"column":{"start":13,"end":85},"content":""},"parent_line_number":75,"fingerprint":"1d591b0532a2ba970f14cb9f49255b7b_0","old_fingerprint":"1d591b0532a2ba970f14cb9f49255b7b_118","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02639.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02639.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":81}},"sink":{"start":75,"end":75,"column":{"start":13,"end":81},"content":""},"parent_line_number":75,"fingerprint":"38d6c0162b3d07d34fc7fa516f38ece3_0","old_fingerprint":"38d6c0162b3d07d34fc7fa516f38ece3_119","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02640.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02640.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":81}},"sink":{"start":75,"end":75,"column":{"start":13,"end":81},"content":""},"parent_line_number":75,"fingerprint":"c5b865c05e066416fec94ccf7e2d71f9_0","old_fingerprint":"c5b865c05e066416fec94ccf7e2d71f9_120","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02641.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02641.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":90,"column":{"start":21,"end":31}},"sink":{"start":75,"end":90,"column":{"start":21,"end":31},"content":""},"parent_line_number":75,"fingerprint":"b2895bfc30cd28506e2bda442cc5813b_0","old_fingerprint":"b2895bfc30cd28506e2bda442cc5813b_121","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02642.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02642.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":94}},"sink":{"start":75,"end":75,"column":{"start":21,"end":94},"content":""},"parent_line_number":75,"fingerprint":"b30147feae24094bf86405706b5c9817_0","old_fingerprint":"b30147feae24094bf86405706b5c9817_122","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02643.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02643.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":94}},"sink":{"start":75,"end":75,"column":{"start":21,"end":94},"content":""},"parent_line_number":75,"fingerprint":"fd9f0e5e7f0c62634585dd297b921240_0","old_fingerprint":"fd9f0e5e7f0c62634585dd297b921240_113","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02644.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02644.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":96}},"sink":{"start":75,"end":75,"column":{"start":21,"end":96},"content":""},"parent_line_number":75,"fingerprint":"78ec0a0df73a0a64c825501ca484732a_0","old_fingerprint":"78ec0a0df73a0a64c825501ca484732a_124","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02645.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02645.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":96}},"sink":{"start":75,"end":75,"column":{"start":21,"end":96},"content":""},"parent_line_number":75,"fingerprint":"6a20636c1b67de06e701f443463649ff_0","old_fingerprint":"6a20636c1b67de06e701f443463649ff_125","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02646.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02646.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":85}},"sink":{"start":75,"end":75,"column":{"start":13,"end":85},"content":""},"parent_line_number":75,"fingerprint":"9beacb9aba8c81b8685bbe1f02cb9b4e_0","old_fingerprint":"9beacb9aba8c81b8685bbe1f02cb9b4e_126","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02731.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02731.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":13,"end":85}},"sink":{"start":52,"end":52,"column":{"start":13,"end":85},"content":""},"parent_line_number":52,"fingerprint":"cb2259ad013416cd021689b62823d2b6_0","old_fingerprint":"cb2259ad013416cd021689b62823d2b6_8","code_extract":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02732.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02732.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":67,"column":{"start":21,"end":31}},"sink":{"start":52,"end":67,"column":{"start":21,"end":31},"content":""},"parent_line_number":52,"fingerprint":"e56e1fba931bd337dc68a8079528c523_0","old_fingerprint":"e56e1fba931bd337dc68a8079528c523_7","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper\u003cString\u003e() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02733.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02733.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":21,"end":94}},"sink":{"start":52,"end":52,"column":{"start":21,"end":94},"content":""},"parent_line_number":52,"fingerprint":"340bf49be23e4266600f141854425e5a_0","old_fingerprint":"340bf49be23e4266600f141854425e5a_9","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02734.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02734.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":55,"column":{"start":21,"end":45}},"sink":{"start":54,"end":55,"column":{"start":21,"end":45},"content":""},"parent_line_number":54,"fingerprint":"36af189726b889b5e8172519b0bb7c00_0","old_fingerprint":"36af189726b889b5e8172519b0bb7c00_41","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02735.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02735.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":55,"column":{"start":21,"end":45}},"sink":{"start":54,"end":55,"column":{"start":21,"end":45},"content":""},"parent_line_number":54,"fingerprint":"efdde6fb6371f146fa301182e6c51698_0","old_fingerprint":"efdde6fb6371f146fa301182e6c51698_35","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02736.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02736.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":21,"end":93}},"sink":{"start":53,"end":53,"column":{"start":21,"end":93},"content":""},"parent_line_number":53,"fingerprint":"b56be0951fe3eb3c0b3394c5854a538d_0","old_fingerprint":"b56be0951fe3eb3c0b3394c5854a538d_20","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},{"cwe_ids":["89"],"id":"java_spring_sqli","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** concatenate external input directly into SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n  ```\n- **Do** use `PreparedStatement` with parameterized SQL queries to safely include external input. This method ensures that input is treated as data, not executable code.\n  ```java\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n      String updateString = \"update user set name = ? where id = ?\";\n      return conn.prepareStatement(updateString);\n    }\n  }\n\n  new PreparedStatementSetter() {\n    public void setValues(PreparedStatement preparedStatement) throws SQLException {\n      preparedStatement.setString(1, uri.getQueryParameter(\"name\"));\n      preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"));\n    }\n  }\n  ```\n\n## References\n\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_spring_sqli","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02737.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02737.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":21,"end":96}},"sink":{"start":52,"end":52,"column":{"start":21,"end":96},"content":""},"parent_line_number":52,"fingerprint":"dfcc80844dc7aba71c2a6523944df44f_0","old_fingerprint":"dfcc80844dc7aba71c2a6523944df44f_11","code_extract":"                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"}],"high":[{"cwe_ids":["306"],"id":"java_lang_empty_database_password","title":"Missing database password detected","description":"## Description\n\nLeaving a database password empty exposes its data to unauthorized access and manipulation. It's crucial to implement strong authentication measures to safeguard database content.\n\n## Remediations\n\n- **Do not** configure database servers without setting a password. This leaves the database vulnerable to unauthorized access.\n- **Do** adopt secure password management practices. Utilize a Key Management Service (KMS) to handle database passwords securely, ensuring they are not exposed in application code or configuration files.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_empty_database_password","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java","filename":"src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":20,"end":62}},"sink":{"start":74,"end":74,"column":{"start":20,"end":62},"content":""},"parent_line_number":74,"fingerprint":"01471ad51fa30bd0b5810636e781c264_0","old_fingerprint":"01471ad51fa30bd0b5810636e781c264_0","code_extract":"            conn = DriverManager.getConnection(url, \"sa\", \"\");"},{"cwe_ids":["306"],"id":"java_lang_missing_database_authentication","title":"Missing authentication for database","description":"## Description\n\nYour database is at high risk if it lacks proper authentication mechanisms. This vulnerability makes it an easy target for unauthorized access and potential security breaches.\n\n## Remediations\n\n- **Do** configure your database server with recommended authentication configuration, including a strong password and username.\n- **Do** implement a key management system to securely manage and store your passwords.\n\n## References\n\n- [OWASP Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_database_authentication","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java","filename":"src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":20,"end":62}},"sink":{"start":74,"end":74,"column":{"start":20,"end":62},"content":""},"parent_line_number":74,"fingerprint":"81f122bc6ff566f2f8d147df97b56bdb_0","old_fingerprint":"81f122bc6ff566f2f8d147df97b56bdb_0","code_extract":"            conn = DriverManager.getConnection(url, \"sa\", \"\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"4bc12bc8f3b66073291979ce85e53114_0","old_fingerprint":"4bc12bc8f3b66073291979ce85e53114_12","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"c83f3b0800dca97f43da6c75e04fcbec_0","old_fingerprint":"c83f3b0800dca97f43da6c75e04fcbec_40","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"99912eae44c228f8b2b9f8a259be7fcd_0","old_fingerprint":"99912eae44c228f8b2b9f8a259be7fcd_19","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":37,"end":92}},"sink":{"start":69,"end":69,"column":{"start":37,"end":92},"content":""},"parent_line_number":69,"fingerprint":"ef08848b07f9068c79ce788b14b4543d_0","old_fingerprint":"ef08848b07f9068c79ce788b14b4543d_23","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"1e8d830af57b7da4611588937edd4c27_0","old_fingerprint":"1e8d830af57b7da4611588937edd4c27_17","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":92}},"sink":{"start":77,"end":77,"column":{"start":37,"end":92},"content":""},"parent_line_number":77,"fingerprint":"8509053f3502feeec3fd41946e329e4c_0","old_fingerprint":"8509053f3502feeec3fd41946e329e4c_32","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"166363959fe7d41e468dd8741ecacf3c_0","old_fingerprint":"166363959fe7d41e468dd8741ecacf3c_37","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":92}},"sink":{"start":68,"end":68,"column":{"start":37,"end":92},"content":""},"parent_line_number":68,"fingerprint":"d26930a9867906cc4a72b92709bdc67d_0","old_fingerprint":"d26930a9867906cc4a72b92709bdc67d_22","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":37,"end":92}},"sink":{"start":71,"end":71,"column":{"start":37,"end":92},"content":""},"parent_line_number":71,"fingerprint":"a6af239bb397ed3c7afa94ec4d09efd6_0","old_fingerprint":"a6af239bb397ed3c7afa94ec4d09efd6_25","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":37,"end":92}},"sink":{"start":67,"end":67,"column":{"start":37,"end":92},"content":""},"parent_line_number":67,"fingerprint":"d19cc1598577f6fab4564cde56939550_0","old_fingerprint":"d19cc1598577f6fab4564cde56939550_21","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":37,"end":92}},"sink":{"start":71,"end":71,"column":{"start":37,"end":92},"content":""},"parent_line_number":71,"fingerprint":"1ac7d0b053142c090a53b4d453e44550_0","old_fingerprint":"1ac7d0b053142c090a53b4d453e44550_24","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"eb524ee1f47b6a595ad8ab0b0e305c47_0","old_fingerprint":"eb524ee1f47b6a595ad8ab0b0e305c47_7","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"3ebbcb129a948094448a3a6000c9f92b_0","old_fingerprint":"3ebbcb129a948094448a3a6000c9f92b_18","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"67915a34bf6e309538207daa499c626c_0","old_fingerprint":"67915a34bf6e309538207daa499c626c_35","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":37,"end":92}},"sink":{"start":80,"end":80,"column":{"start":37,"end":92},"content":""},"parent_line_number":80,"fingerprint":"116e2f14d4f30978f2397c7627bc9a0a_0","old_fingerprint":"116e2f14d4f30978f2397c7627bc9a0a_34","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":37,"end":92}},"sink":{"start":79,"end":79,"column":{"start":37,"end":92},"content":""},"parent_line_number":79,"fingerprint":"cde86efc00a03fd47593ffa293d42af7_0","old_fingerprint":"cde86efc00a03fd47593ffa293d42af7_33","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"d1b787b5b620265f12d25d8358e833ed_0","old_fingerprint":"d1b787b5b620265f12d25d8358e833ed_16","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":92}},"sink":{"start":74,"end":74,"column":{"start":37,"end":92},"content":""},"parent_line_number":74,"fingerprint":"1dd8f7d340f26f6c8f0dea213f231b0e_0","old_fingerprint":"1dd8f7d340f26f6c8f0dea213f231b0e_29","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":92}},"sink":{"start":74,"end":74,"column":{"start":37,"end":92},"content":""},"parent_line_number":74,"fingerprint":"f61cd6747e1e93a0e7e9ccb4cbaabdc4_0","old_fingerprint":"f61cd6747e1e93a0e7e9ccb4cbaabdc4_30","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":37,"end":92}},"sink":{"start":66,"end":66,"column":{"start":37,"end":92},"content":""},"parent_line_number":66,"fingerprint":"14b0a3600d6d8174ef8cb334bb96e968_0","old_fingerprint":"14b0a3600d6d8174ef8cb334bb96e968_20","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":37,"end":92}},"sink":{"start":59,"end":59,"column":{"start":37,"end":92},"content":""},"parent_line_number":59,"fingerprint":"272892f1b89b8742a328e273c9b23019_0","old_fingerprint":"272892f1b89b8742a328e273c9b23019_1","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":37,"end":92}},"sink":{"start":59,"end":59,"column":{"start":37,"end":92},"content":""},"parent_line_number":59,"fingerprint":"13c3cf3cee40f4d4393b23501dabc94e_0","old_fingerprint":"13c3cf3cee40f4d4393b23501dabc94e_0","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"80aef20476b5fc9cfc11e57f0a9158b9_0","old_fingerprint":"80aef20476b5fc9cfc11e57f0a9158b9_11","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"d40b59b1b65afa0d790ba9bcbc8ebb61_0","old_fingerprint":"d40b59b1b65afa0d790ba9bcbc8ebb61_10","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"48779674668f71e63bd235ba2d21b44f_0","old_fingerprint":"48779674668f71e63bd235ba2d21b44f_8","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"d2df95c0c6a73388bd227a006366b04e_0","old_fingerprint":"d2df95c0c6a73388bd227a006366b04e_4","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"9bf9da3022aee8c0aaf0ade5b24d125a_0","old_fingerprint":"9bf9da3022aee8c0aaf0ade5b24d125a_39","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"856586d5bfdc2628cb25727fc1d63dd3_0","old_fingerprint":"856586d5bfdc2628cb25727fc1d63dd3_36","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"f278bf48bd805e1d94f907feaa5c6372_0","old_fingerprint":"f278bf48bd805e1d94f907feaa5c6372_14","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"0c9d587546be8338dd3466ab8ba58f37_0","old_fingerprint":"0c9d587546be8338dd3466ab8ba58f37_15","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":92}},"sink":{"start":74,"end":74,"column":{"start":37,"end":92},"content":""},"parent_line_number":74,"fingerprint":"8e94af9a537cd8a2b9a470af2f60e58a_0","old_fingerprint":"8e94af9a537cd8a2b9a470af2f60e58a_31","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"c51571bf425dcb97f37da94e1157114a_0","old_fingerprint":"c51571bf425dcb97f37da94e1157114a_9","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"c111fd8e120562b1482c54362d97e177_0","old_fingerprint":"c111fd8e120562b1482c54362d97e177_13","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":92}},"sink":{"start":73,"end":73,"column":{"start":37,"end":92},"content":""},"parent_line_number":73,"fingerprint":"659f9942d3a4fc46a4391fa0198dafdb_0","old_fingerprint":"659f9942d3a4fc46a4391fa0198dafdb_26","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":92}},"sink":{"start":73,"end":73,"column":{"start":37,"end":92},"content":""},"parent_line_number":73,"fingerprint":"014028306d6693c393837e8476538d44_0","old_fingerprint":"014028306d6693c393837e8476538d44_28","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":92}},"sink":{"start":73,"end":73,"column":{"start":37,"end":92},"content":""},"parent_line_number":73,"fingerprint":"d104166a50314c66c32640eefa5dc106_0","old_fingerprint":"d104166a50314c66c32640eefa5dc106_27","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"8c24f3b53e2a99d7129a6f5811cba0f5_0","old_fingerprint":"8c24f3b53e2a99d7129a6f5811cba0f5_6","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"09c7a1699082890ee75638729171cbab_0","old_fingerprint":"09c7a1699082890ee75638729171cbab_5","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"0e75b8ff10094a475910646db77ba00c_0","old_fingerprint":"0e75b8ff10094a475910646db77ba00c_38","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":92}},"sink":{"start":60,"end":60,"column":{"start":37,"end":92},"content":""},"parent_line_number":60,"fingerprint":"e3c48b59fb7b3904ef4cd65dc4725ea5_0","old_fingerprint":"e3c48b59fb7b3904ef4cd65dc4725ea5_2","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["327"],"id":"java_lang_padding_oracle_encryption_vulnerability","title":"Usage of CBC (Cipher Block Chaining) mode with padding","description":"## Description\n\nUsing a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.\n\n## Remediations\n\n- **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // unsafe\n  ```\n- **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":92}},"sink":{"start":60,"end":60,"column":{"start":37,"end":92},"content":""},"parent_line_number":60,"fingerprint":"476547a067eff59ad0d6abb9df186e93_0","old_fingerprint":"476547a067eff59ad0d6abb9df186e93_3","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00065.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00065.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":39,"end":72}},"sink":{"start":78,"end":78,"column":{"start":39,"end":72},"content":""},"parent_line_number":78,"fingerprint":"e5adbd0e413397fbf16540892ba9145c_0","old_fingerprint":"e5adbd0e413397fbf16540892ba9145c_11","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00957.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00957.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":39,"end":72}},"sink":{"start":71,"end":71,"column":{"start":39,"end":72},"content":""},"parent_line_number":71,"fingerprint":"34e5f2eea41d4502b8eccfcab8d38ebb_0","old_fingerprint":"34e5f2eea41d4502b8eccfcab8d38ebb_8","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00958.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00958.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":39,"end":72}},"sink":{"start":71,"end":71,"column":{"start":39,"end":72},"content":""},"parent_line_number":71,"fingerprint":"9751b37406cf4c476b031ca9b10867db_0","old_fingerprint":"9751b37406cf4c476b031ca9b10867db_9","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01036.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01036.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":39,"end":72}},"sink":{"start":57,"end":57,"column":{"start":39,"end":72},"content":""},"parent_line_number":57,"fingerprint":"73e51ac5b5a526d6d3d5f29711b0f4ca_0","old_fingerprint":"73e51ac5b5a526d6d3d5f29711b0f4ca_2","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01118.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01118.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":39,"end":72}},"sink":{"start":67,"end":67,"column":{"start":39,"end":72},"content":""},"parent_line_number":67,"fingerprint":"984c51c5a05e5ef734772143d1b5626f_0","old_fingerprint":"984c51c5a05e5ef734772143d1b5626f_6","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01409.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01409.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":39,"end":72}},"sink":{"start":66,"end":66,"column":{"start":39,"end":72},"content":""},"parent_line_number":66,"fingerprint":"8bdbba20a5b03da1383630fb423f0792_0","old_fingerprint":"8bdbba20a5b03da1383630fb423f0792_5","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01908.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01908.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":39,"end":72}},"sink":{"start":57,"end":57,"column":{"start":39,"end":72},"content":""},"parent_line_number":57,"fingerprint":"40e704ad3d45b7eb432b7c8de5668ab0_0","old_fingerprint":"40e704ad3d45b7eb432b7c8de5668ab0_3","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01991.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01991.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":39,"end":72}},"sink":{"start":67,"end":67,"column":{"start":39,"end":72},"content":""},"parent_line_number":67,"fingerprint":"c50471ae5c1341e1aed722833afde3c9_0","old_fingerprint":"c50471ae5c1341e1aed722833afde3c9_7","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02035.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02035.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":39,"end":72}},"sink":{"start":59,"end":59,"column":{"start":39,"end":72},"content":""},"parent_line_number":59,"fingerprint":"059b24f69d80c2bc16de73d95dc92927_0","old_fingerprint":"059b24f69d80c2bc16de73d95dc92927_4","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02206.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02206.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":39,"end":72}},"sink":{"start":56,"end":56,"column":{"start":39,"end":72},"content":""},"parent_line_number":56,"fingerprint":"a1b6ac02dd7aecdad07d4ab25f598aa7_0","old_fingerprint":"a1b6ac02dd7aecdad07d4ab25f598aa7_0","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02207.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02207.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":39,"end":72}},"sink":{"start":56,"end":56,"column":{"start":39,"end":72},"content":""},"parent_line_number":56,"fingerprint":"d1852704403b819497550ffad5cb8413_0","old_fingerprint":"d1852704403b819497550ffad5cb8413_1","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** construct file paths directly with user input. This practice can inadvertently allow attackers to manipulate paths to access unauthorized files.\n- **Do** use path normalization utilities to safely handle user input in file paths. These utilities help eliminate dangerous path sequences.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n\n          // normalize path\n          Path imagePath = Paths.get(\"user/profile/\" + FilenameUtils.getName(image)).normalize();\n          File file = new File(imagePath.toString());\n      }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_traversal","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02570.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02570.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":39,"end":72}},"sink":{"start":76,"end":76,"column":{"start":39,"end":72},"content":""},"parent_line_number":76,"fingerprint":"14498abe6a55cefd1bb45d863ea1fd65_0","old_fingerprint":"14498abe6a55cefd1bb45d863ea1fd65_10","code_extract":"            java.nio.file.Path path = java.nio.file.Paths.get(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":19,"end":74}},"sink":{"start":71,"end":71,"column":{"start":19,"end":74},"content":""},"parent_line_number":71,"fingerprint":"04dce905f0101e07c96b1e754423eeea_0","old_fingerprint":"04dce905f0101e07c96b1e754423eeea_76","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":19,"end":64}},"sink":{"start":72,"end":72,"column":{"start":19,"end":64},"content":""},"parent_line_number":72,"fingerprint":"5f1d0d099a1aad042cd5b70224e8d303_0","old_fingerprint":"5f1d0d099a1aad042cd5b70224e8d303_82","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00011.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00011.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":35,"end":71}},"sink":{"start":54,"end":54,"column":{"start":35,"end":71},"content":""},"parent_line_number":54,"fingerprint":"87a7b768e37e579a99a25d49b48a672a_0","old_fingerprint":"87a7b768e37e579a99a25d49b48a672a_7","code_extract":"        java.io.File fileTarget = new java.io.File(param, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00028.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00028.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":19,"end":64}},"sink":{"start":57,"end":57,"column":{"start":19,"end":64},"content":""},"parent_line_number":57,"fingerprint":"07ca40865722537b4b175bf2146c9b01_0","old_fingerprint":"07ca40865722537b4b175bf2146c9b01_15","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":76,"column":{"start":17,"end":96}},"sink":{"start":75,"end":76,"column":{"start":17,"end":96},"content":""},"parent_line_number":75,"fingerprint":"84b5f694e7fdb44c54bbddb9c78ca6e5_0","old_fingerprint":"84b5f694e7fdb44c54bbddb9c78ca6e5_97","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":35,"end":69}},"sink":{"start":74,"end":74,"column":{"start":35,"end":69},"content":""},"parent_line_number":74,"fingerprint":"3e72d22a5d01f05ac580a315d761597c_0","old_fingerprint":"3e72d22a5d01f05ac580a315d761597c_95","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":19,"end":74}},"sink":{"start":77,"end":77,"column":{"start":19,"end":74},"content":""},"parent_line_number":77,"fingerprint":"c7be0bd39ea3e51194b196d0d29c9851_0","old_fingerprint":"c7be0bd39ea3e51194b196d0d29c9851_103","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":57}},"sink":{"start":78,"end":78,"column":{"start":19,"end":57},"content":""},"parent_line_number":78,"fingerprint":"082ef625eab0d051832607ed0143857f_0","old_fingerprint":"082ef625eab0d051832607ed0143857f_112","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00133.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00133.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":19,"end":56}},"sink":{"start":63,"end":63,"column":{"start":19,"end":56},"content":""},"parent_line_number":63,"fingerprint":"129f73dd67de2f28b4ef46f95d3b16d5_0","old_fingerprint":"129f73dd67de2f28b4ef46f95d3b16d5_45","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00215.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00215.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":65,"column":{"start":17,"end":96}},"sink":{"start":64,"end":65,"column":{"start":17,"end":96},"content":""},"parent_line_number":64,"fingerprint":"a99c2aa578c4fb9a1ca858b96462e1e4_0","old_fingerprint":"a99c2aa578c4fb9a1ca858b96462e1e4_50","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00219.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00219.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":19,"end":74}},"sink":{"start":73,"end":73,"column":{"start":19,"end":74},"content":""},"parent_line_number":73,"fingerprint":"acfd4c9f20c422747771cedaa975e3fe_0","old_fingerprint":"acfd4c9f20c422747771cedaa975e3fe_89","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00221.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00221.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":19,"end":64}},"sink":{"start":74,"end":74,"column":{"start":19,"end":64},"content":""},"parent_line_number":74,"fingerprint":"b855124f46a6dfd13e35706f469fc6cc_0","old_fingerprint":"b855124f46a6dfd13e35706f469fc6cc_94","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00452.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00452.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":61,"column":{"start":17,"end":96}},"sink":{"start":60,"end":61,"column":{"start":17,"end":96},"content":""},"parent_line_number":60,"fingerprint":"05e9ce8c572b8d7d8fa25b359a8e4dfe_0","old_fingerprint":"05e9ce8c572b8d7d8fa25b359a8e4dfe_33","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00453.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00453.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":39,"end":64}},"sink":{"start":79,"end":79,"column":{"start":39,"end":64},"content":""},"parent_line_number":79,"fingerprint":"bb0c3d77c797c4b850b821f5804322af_0","old_fingerprint":"bb0c3d77c797c4b850b821f5804322af_117","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00454.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00454.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":19,"end":74}},"sink":{"start":62,"end":62,"column":{"start":19,"end":74},"content":""},"parent_line_number":62,"fingerprint":"77f9e0984bfda02ea32d5113040796ca_0","old_fingerprint":"77f9e0984bfda02ea32d5113040796ca_37","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00455.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00455.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":19,"end":56}},"sink":{"start":64,"end":64,"column":{"start":19,"end":56},"content":""},"parent_line_number":64,"fingerprint":"6309f5bdd5a9f7bc4dd8b630bd932ff5_0","old_fingerprint":"6309f5bdd5a9f7bc4dd8b630bd932ff5_52","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00459.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00459.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":19,"end":57}},"sink":{"start":65,"end":65,"column":{"start":19,"end":57},"content":""},"parent_line_number":65,"fingerprint":"f8ea117f644a7cbf2574b3645a2c2e7b_0","old_fingerprint":"f8ea117f644a7cbf2574b3645a2c2e7b_53","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00526.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00526.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":35,"end":69}},"sink":{"start":62,"end":62,"column":{"start":35,"end":69},"content":""},"parent_line_number":62,"fingerprint":"07e2040e98cb792360d63f649833092f_0","old_fingerprint":"07e2040e98cb792360d63f649833092f_40","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00527.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00527.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":35,"end":69}},"sink":{"start":64,"end":64,"column":{"start":35,"end":69},"content":""},"parent_line_number":64,"fingerprint":"51daea53e615493146a82c572f014423_0","old_fingerprint":"51daea53e615493146a82c572f014423_47","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00529.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00529.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":19,"end":56}},"sink":{"start":67,"end":67,"column":{"start":19,"end":56},"content":""},"parent_line_number":67,"fingerprint":"832da12726e5776f809d86e60a8934a4_0","old_fingerprint":"832da12726e5776f809d86e60a8934a4_60","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00787.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00787.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":19,"end":57}},"sink":{"start":85,"end":85,"column":{"start":19,"end":57},"content":""},"parent_line_number":85,"fingerprint":"5c390428e83fdecb6985408ff326f889_0","old_fingerprint":"5c390428e83fdecb6985408ff326f889_128","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00788.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00788.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":19,"end":57}},"sink":{"start":80,"end":80,"column":{"start":19,"end":57},"content":""},"parent_line_number":80,"fingerprint":"9c00505a5ed6988ded35dd1330d9636c_0","old_fingerprint":"9c00505a5ed6988ded35dd1330d9636c_120","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":17,"end":87}},"sink":{"start":68,"end":68,"column":{"start":17,"end":87},"content":""},"parent_line_number":68,"fingerprint":"3d65711f861067327bbfd12c7f741889_0","old_fingerprint":"3d65711f861067327bbfd12c7f741889_62","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":35,"end":69}},"sink":{"start":67,"end":67,"column":{"start":35,"end":69},"content":""},"parent_line_number":67,"fingerprint":"b8b29cf549dd39301662c7c11d8bc06f_0","old_fingerprint":"b8b29cf549dd39301662c7c11d8bc06f_59","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":39,"end":64}},"sink":{"start":84,"end":84,"column":{"start":39,"end":64},"content":""},"parent_line_number":84,"fingerprint":"a7acc9e0679edac52abfefd0fec35cdb_0","old_fingerprint":"a7acc9e0679edac52abfefd0fec35cdb_125","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":39,"end":64}},"sink":{"start":87,"end":87,"column":{"start":39,"end":64},"content":""},"parent_line_number":87,"fingerprint":"94a23900eb0f5645f4ded9dc5a4be7b9_0","old_fingerprint":"94a23900eb0f5645f4ded9dc5a4be7b9_129","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":46,"end":83}},"sink":{"start":79,"end":79,"column":{"start":46,"end":83},"content":""},"parent_line_number":79,"fingerprint":"507bd0f4dfa915c4ed12b2c5967bb2a9_0","old_fingerprint":"507bd0f4dfa915c4ed12b2c5967bb2a9_114","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":46,"end":83}},"sink":{"start":79,"end":79,"column":{"start":46,"end":83},"content":""},"parent_line_number":79,"fingerprint":"fccb6d36fb0e15cbf19d3a5dde343e20_0","old_fingerprint":"fccb6d36fb0e15cbf19d3a5dde343e20_119","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":46,"end":83}},"sink":{"start":79,"end":79,"column":{"start":46,"end":83},"content":""},"parent_line_number":79,"fingerprint":"cce53c49fa0ba43d7f7c828d3f04dc36_0","old_fingerprint":"cce53c49fa0ba43d7f7c828d3f04dc36_115","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":46,"end":83}},"sink":{"start":79,"end":79,"column":{"start":46,"end":83},"content":""},"parent_line_number":79,"fingerprint":"954ccc7d7b8028b0dbdb3f9f693cc30e_0","old_fingerprint":"954ccc7d7b8028b0dbdb3f9f693cc30e_118","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01025.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01025.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":17,"end":87}},"sink":{"start":54,"end":54,"column":{"start":17,"end":87},"content":""},"parent_line_number":54,"fingerprint":"bdfd0d62a846ba7e125f8feb881b8a32_0","old_fingerprint":"bdfd0d62a846ba7e125f8feb881b8a32_8","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01026.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01026.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":35,"end":56}},"sink":{"start":53,"end":53,"column":{"start":35,"end":56},"content":""},"parent_line_number":53,"fingerprint":"d75f0b8503c5b055d9ea8c9fbb9e9152_0","old_fingerprint":"d75f0b8503c5b055d9ea8c9fbb9e9152_2","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01027.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01027.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":35,"end":56}},"sink":{"start":53,"end":53,"column":{"start":35,"end":56},"content":""},"parent_line_number":53,"fingerprint":"c15d9d6916abf7e16857a421f949601d_0","old_fingerprint":"c15d9d6916abf7e16857a421f949601d_6","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01028.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01028.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":39,"end":64}},"sink":{"start":70,"end":70,"column":{"start":39,"end":64},"content":""},"parent_line_number":70,"fingerprint":"482c2c35b3d7fd00d5f3633fd0789894_0","old_fingerprint":"482c2c35b3d7fd00d5f3633fd0789894_75","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01029.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01029.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":39,"end":64}},"sink":{"start":73,"end":73,"column":{"start":39,"end":64},"content":""},"parent_line_number":73,"fingerprint":"83975190e17d872fb286ca06f863440b_0","old_fingerprint":"83975190e17d872fb286ca06f863440b_86","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01030.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01030.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":39,"end":64}},"sink":{"start":73,"end":73,"column":{"start":39,"end":64},"content":""},"parent_line_number":73,"fingerprint":"f483b45cb23d2e76bf90f64ce5340abd_0","old_fingerprint":"f483b45cb23d2e76bf90f64ce5340abd_90","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01031.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01031.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":56}},"sink":{"start":58,"end":58,"column":{"start":19,"end":56},"content":""},"parent_line_number":58,"fingerprint":"aa020f32233e931efcd2ec65e183d3fa_0","old_fingerprint":"aa020f32233e931efcd2ec65e183d3fa_17","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01032.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01032.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":19,"end":82}},"sink":{"start":59,"end":59,"column":{"start":19,"end":82},"content":""},"parent_line_number":59,"fingerprint":"6b230b6d3a19d13bc1c5f4d9cb676ea4_0","old_fingerprint":"6b230b6d3a19d13bc1c5f4d9cb676ea4_24","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01033.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01033.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":19,"end":75}},"sink":{"start":59,"end":59,"column":{"start":19,"end":75},"content":""},"parent_line_number":59,"fingerprint":"a8e697894a746863bd46aa62604c5d3e_0","old_fingerprint":"a8e697894a746863bd46aa62604c5d3e_23","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01034.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01034.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":19,"end":57}},"sink":{"start":59,"end":59,"column":{"start":19,"end":57},"content":""},"parent_line_number":59,"fingerprint":"c357b18e5976c63d64ccdd8ce8d6b663_0","old_fingerprint":"c357b18e5976c63d64ccdd8ce8d6b663_28","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01035.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01035.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":19,"end":57}},"sink":{"start":59,"end":59,"column":{"start":19,"end":57},"content":""},"parent_line_number":59,"fingerprint":"0895562e48dfc3dbff98fb6736794c16_0","old_fingerprint":"0895562e48dfc3dbff98fb6736794c16_25","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01109.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01109.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":35,"end":69}},"sink":{"start":63,"end":63,"column":{"start":35,"end":69},"content":""},"parent_line_number":63,"fingerprint":"b408be16c61e836ead5052aa0d2a367f_0","old_fingerprint":"b408be16c61e836ead5052aa0d2a367f_43","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01110.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01110.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":39,"end":64}},"sink":{"start":80,"end":80,"column":{"start":39,"end":64},"content":""},"parent_line_number":80,"fingerprint":"600cd863e028dd19b15b1d5118806ad4_0","old_fingerprint":"600cd863e028dd19b15b1d5118806ad4_121","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01111.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01111.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":19,"end":56}},"sink":{"start":68,"end":68,"column":{"start":19,"end":56},"content":""},"parent_line_number":68,"fingerprint":"f7ffc7b7c8565112685c5b62c18b443a_0","old_fingerprint":"f7ffc7b7c8565112685c5b62c18b443a_61","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01112.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01112.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":19,"end":56}},"sink":{"start":68,"end":68,"column":{"start":19,"end":56},"content":""},"parent_line_number":68,"fingerprint":"ec96849191b803e9067aa28824456c7b_0","old_fingerprint":"ec96849191b803e9067aa28824456c7b_63","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01113.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01113.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":19,"end":82}},"sink":{"start":69,"end":69,"column":{"start":19,"end":82},"content":""},"parent_line_number":69,"fingerprint":"f4febbfe7aeb3bc35feb00c0d161f7a8_0","old_fingerprint":"f4febbfe7aeb3bc35feb00c0d161f7a8_70","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01114.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01114.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":19,"end":82}},"sink":{"start":69,"end":69,"column":{"start":19,"end":82},"content":""},"parent_line_number":69,"fingerprint":"f8195e14852fe353cdcb523bc9b817f0_0","old_fingerprint":"f8195e14852fe353cdcb523bc9b817f0_74","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01115.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01115.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":19,"end":75}},"sink":{"start":69,"end":69,"column":{"start":19,"end":75},"content":""},"parent_line_number":69,"fingerprint":"82c82a0800ab514fe061b9885ca5e1ee_0","old_fingerprint":"82c82a0800ab514fe061b9885ca5e1ee_73","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01116.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01116.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":46,"end":83}},"sink":{"start":75,"end":75,"column":{"start":46,"end":83},"content":""},"parent_line_number":75,"fingerprint":"0127b183b18533c603e979f911825f1c_0","old_fingerprint":"0127b183b18533c603e979f911825f1c_99","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01117.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01117.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":46,"end":83}},"sink":{"start":75,"end":75,"column":{"start":46,"end":83},"content":""},"parent_line_number":75,"fingerprint":"2a521418a53091b940d658d25f5be802_0","old_fingerprint":"2a521418a53091b940d658d25f5be802_96","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01155.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01155.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":35,"end":56}},"sink":{"start":55,"end":55,"column":{"start":35,"end":56},"content":""},"parent_line_number":55,"fingerprint":"df49d8232d2092c81841ce2254660fb7_0","old_fingerprint":"df49d8232d2092c81841ce2254660fb7_9","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01156.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01156.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":39,"end":64}},"sink":{"start":72,"end":72,"column":{"start":39,"end":64},"content":""},"parent_line_number":72,"fingerprint":"721356af74b3465ca4bbb40223d97e7b_0","old_fingerprint":"721356af74b3465ca4bbb40223d97e7b_81","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01157.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01157.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":39,"end":64}},"sink":{"start":72,"end":72,"column":{"start":39,"end":64},"content":""},"parent_line_number":72,"fingerprint":"76b62a2f647eaf3253017c326141a85a_0","old_fingerprint":"76b62a2f647eaf3253017c326141a85a_83","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01158.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01158.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":19,"end":56}},"sink":{"start":60,"end":60,"column":{"start":19,"end":56},"content":""},"parent_line_number":60,"fingerprint":"44f05f1299605818c078ca88eed6ca00_0","old_fingerprint":"44f05f1299605818c078ca88eed6ca00_30","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01159.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01159.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":19,"end":56}},"sink":{"start":60,"end":60,"column":{"start":19,"end":56},"content":""},"parent_line_number":60,"fingerprint":"ddb0348cfcd0bd1d9b5295f53077afcf_0","old_fingerprint":"ddb0348cfcd0bd1d9b5295f53077afcf_29","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01160.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01160.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":19,"end":82}},"sink":{"start":61,"end":61,"column":{"start":19,"end":82},"content":""},"parent_line_number":61,"fingerprint":"dad7c13d8ffd29d99a4ca63e026595f2_0","old_fingerprint":"dad7c13d8ffd29d99a4ca63e026595f2_34","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01161.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01161.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":19,"end":64}},"sink":{"start":61,"end":61,"column":{"start":19,"end":64},"content":""},"parent_line_number":61,"fingerprint":"ff47bc022603a857bc8d747b34e82efd_0","old_fingerprint":"ff47bc022603a857bc8d747b34e82efd_35","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01328.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01328.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":39,"end":64}},"sink":{"start":69,"end":69,"column":{"start":39,"end":64},"content":""},"parent_line_number":69,"fingerprint":"7b8a0d396bd8d29d42a49cf3f380a4c7_0","old_fingerprint":"7b8a0d396bd8d29d42a49cf3f380a4c7_71","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01329.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01329.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":39,"end":64}},"sink":{"start":72,"end":72,"column":{"start":39,"end":64},"content":""},"parent_line_number":72,"fingerprint":"6ffe0c60f686f2df5354d5248e104a1b_0","old_fingerprint":"6ffe0c60f686f2df5354d5248e104a1b_77","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01330.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01330.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":75}},"sink":{"start":58,"end":58,"column":{"start":19,"end":75},"content":""},"parent_line_number":58,"fingerprint":"9a761764b5336f9c154ddbed1f5baf55_0","old_fingerprint":"9a761764b5336f9c154ddbed1f5baf55_21","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01331.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01331.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":57}},"sink":{"start":58,"end":58,"column":{"start":19,"end":57},"content":""},"parent_line_number":58,"fingerprint":"20c9fc7c7d408f0170561735f5171365_0","old_fingerprint":"20c9fc7c7d408f0170561735f5171365_16","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01403.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01403.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":64,"column":{"start":17,"end":96}},"sink":{"start":63,"end":64,"column":{"start":17,"end":96},"content":""},"parent_line_number":63,"fingerprint":"375c34eb2127776abc408a0b771f273f_0","old_fingerprint":"375c34eb2127776abc408a0b771f273f_46","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01404.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01404.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":35,"end":69}},"sink":{"start":62,"end":62,"column":{"start":35,"end":69},"content":""},"parent_line_number":62,"fingerprint":"38204d9921f643d43998754d44257864_0","old_fingerprint":"38204d9921f643d43998754d44257864_41","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01405.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01405.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":19,"end":74}},"sink":{"start":67,"end":67,"column":{"start":19,"end":74},"content":""},"parent_line_number":67,"fingerprint":"b9c29289d5c6eeb40e39c70b976e915a_0","old_fingerprint":"b9c29289d5c6eeb40e39c70b976e915a_54","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01406.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01406.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":19,"end":56}},"sink":{"start":67,"end":67,"column":{"start":19,"end":56},"content":""},"parent_line_number":67,"fingerprint":"9e2b30dd306b7ec0cb35bbb5ca3ffdd4_0","old_fingerprint":"9e2b30dd306b7ec0cb35bbb5ca3ffdd4_55","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01407.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01407.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":46,"end":83}},"sink":{"start":74,"end":74,"column":{"start":46,"end":83},"content":""},"parent_line_number":74,"fingerprint":"9556cf96a7100289b3ec447e4a942d02_0","old_fingerprint":"9556cf96a7100289b3ec447e4a942d02_93","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01408.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01408.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":19,"end":64}},"sink":{"start":68,"end":68,"column":{"start":19,"end":64},"content":""},"parent_line_number":68,"fingerprint":"c763ef1d45a3bd1fec472462a86dcb6e_0","old_fingerprint":"c763ef1d45a3bd1fec472462a86dcb6e_66","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01642.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01642.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":17,"end":87}},"sink":{"start":73,"end":73,"column":{"start":17,"end":87},"content":""},"parent_line_number":73,"fingerprint":"6e033dcb273d0400a44c8730d44c7a0f_0","old_fingerprint":"6e033dcb273d0400a44c8730d44c7a0f_87","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01643.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01643.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":39,"end":64}},"sink":{"start":89,"end":89,"column":{"start":39,"end":64},"content":""},"parent_line_number":89,"fingerprint":"23d51f30966d1db393d5eac448347c9e_0","old_fingerprint":"23d51f30966d1db393d5eac448347c9e_132","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01644.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01644.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":19,"end":74}},"sink":{"start":77,"end":77,"column":{"start":19,"end":74},"content":""},"parent_line_number":77,"fingerprint":"e4f553503949dd12124616645cba1656_0","old_fingerprint":"e4f553503949dd12124616645cba1656_105","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01645.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01645.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":19,"end":56}},"sink":{"start":77,"end":77,"column":{"start":19,"end":56},"content":""},"parent_line_number":77,"fingerprint":"7d2eeaeb0e5c527a48225b458912a36b_0","old_fingerprint":"7d2eeaeb0e5c527a48225b458912a36b_101","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01646.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01646.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":75}},"sink":{"start":78,"end":78,"column":{"start":19,"end":75},"content":""},"parent_line_number":78,"fingerprint":"6b820b86bdfc5827334e49858f04ebf9_0","old_fingerprint":"6b820b86bdfc5827334e49858f04ebf9_106","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01647.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01647.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":64}},"sink":{"start":78,"end":78,"column":{"start":19,"end":64},"content":""},"parent_line_number":78,"fingerprint":"4087ecc80ec8bb80bdefb21c2e0601d6_0","old_fingerprint":"4087ecc80ec8bb80bdefb21c2e0601d6_108","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":17,"end":87}},"sink":{"start":68,"end":68,"column":{"start":17,"end":87},"content":""},"parent_line_number":68,"fingerprint":"d582ae79f9e5abc36746d28e2f7fd28f_0","old_fingerprint":"d582ae79f9e5abc36746d28e2f7fd28f_67","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":17,"end":87}},"sink":{"start":68,"end":68,"column":{"start":17,"end":87},"content":""},"parent_line_number":68,"fingerprint":"46d957aa7858c9f267682cddfb6aba9b_0","old_fingerprint":"46d957aa7858c9f267682cddfb6aba9b_64","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":17,"end":87}},"sink":{"start":68,"end":68,"column":{"start":17,"end":87},"content":""},"parent_line_number":68,"fingerprint":"ba0e39923da1dd59ccefec52534aa32f_0","old_fingerprint":"ba0e39923da1dd59ccefec52534aa32f_65","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":39,"end":64}},"sink":{"start":84,"end":84,"column":{"start":39,"end":64},"content":""},"parent_line_number":84,"fingerprint":"4691fda4f64d6d5e58410cd15c058438_0","old_fingerprint":"4691fda4f64d6d5e58410cd15c058438_124","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":39,"end":64}},"sink":{"start":87,"end":87,"column":{"start":39,"end":64},"content":""},"parent_line_number":87,"fingerprint":"1349bfce8feded8a79dc1eb2c741ae6b_0","old_fingerprint":"1349bfce8feded8a79dc1eb2c741ae6b_130","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":19,"end":74}},"sink":{"start":72,"end":72,"column":{"start":19,"end":74},"content":""},"parent_line_number":72,"fingerprint":"dd173c6c8f16d627fb8b1ac27348a2b6_0","old_fingerprint":"dd173c6c8f16d627fb8b1ac27348a2b6_78","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":19,"end":82}},"sink":{"start":73,"end":73,"column":{"start":19,"end":82},"content":""},"parent_line_number":73,"fingerprint":"cea1cd72717bbe5776a593c40ce99bbf_0","old_fingerprint":"cea1cd72717bbe5776a593c40ce99bbf_88","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":19,"end":75}},"sink":{"start":73,"end":73,"column":{"start":19,"end":75},"content":""},"parent_line_number":73,"fingerprint":"5a489ccfee7c4b051ada5fab63a6b258_0","old_fingerprint":"5a489ccfee7c4b051ada5fab63a6b258_92","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":46,"end":83}},"sink":{"start":79,"end":79,"column":{"start":46,"end":83},"content":""},"parent_line_number":79,"fingerprint":"84d40d2d44d13ba0fab9b5e82bf1439a_0","old_fingerprint":"84d40d2d44d13ba0fab9b5e82bf1439a_116","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01904.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01904.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":35,"end":56}},"sink":{"start":53,"end":53,"column":{"start":35,"end":56},"content":""},"parent_line_number":53,"fingerprint":"1b5b7bd12fecfe258e05412713fd74e9_0","old_fingerprint":"1b5b7bd12fecfe258e05412713fd74e9_5","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01905.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01905.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":56}},"sink":{"start":58,"end":58,"column":{"start":19,"end":56},"content":""},"parent_line_number":58,"fingerprint":"010e51e27f4a00bf93ef84618a460961_0","old_fingerprint":"010e51e27f4a00bf93ef84618a460961_22","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01906.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01906.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":19,"end":75}},"sink":{"start":59,"end":59,"column":{"start":19,"end":75},"content":""},"parent_line_number":59,"fingerprint":"af3d8a025d1c81176abf173814c2b2a0_0","old_fingerprint":"af3d8a025d1c81176abf173814c2b2a0_27","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01907.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01907.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":19,"end":75}},"sink":{"start":59,"end":59,"column":{"start":19,"end":75},"content":""},"parent_line_number":59,"fingerprint":"ab6341306fccae60856a4db761fb9a0b_0","old_fingerprint":"ab6341306fccae60856a4db761fb9a0b_26","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01983.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01983.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":17,"end":87}},"sink":{"start":64,"end":64,"column":{"start":17,"end":87},"content":""},"parent_line_number":64,"fingerprint":"f5525b1480471709f57545993897e2c5_0","old_fingerprint":"f5525b1480471709f57545993897e2c5_48","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01984.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01984.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":17,"end":87}},"sink":{"start":64,"end":64,"column":{"start":17,"end":87},"content":""},"parent_line_number":64,"fingerprint":"00fca423c58eab6c0c07d2d7807710f9_0","old_fingerprint":"00fca423c58eab6c0c07d2d7807710f9_51","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01985.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01985.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":35,"end":69}},"sink":{"start":63,"end":63,"column":{"start":35,"end":69},"content":""},"parent_line_number":63,"fingerprint":"e4677e4f8853a11ce9adff7bcf382a21_0","old_fingerprint":"e4677e4f8853a11ce9adff7bcf382a21_44","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01986.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01986.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":39,"end":64}},"sink":{"start":83,"end":83,"column":{"start":39,"end":64},"content":""},"parent_line_number":83,"fingerprint":"b2f78318c67e912b74a6e5bb536e177f_0","old_fingerprint":"b2f78318c67e912b74a6e5bb536e177f_122","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01987.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01987.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":39,"end":64}},"sink":{"start":83,"end":83,"column":{"start":39,"end":64},"content":""},"parent_line_number":83,"fingerprint":"97b51f7325697a0d4a4579f45054d27e_0","old_fingerprint":"97b51f7325697a0d4a4579f45054d27e_123","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01988.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01988.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":19,"end":74}},"sink":{"start":68,"end":68,"column":{"start":19,"end":74},"content":""},"parent_line_number":68,"fingerprint":"658d145fbada31537c51ca712e8f066f_0","old_fingerprint":"658d145fbada31537c51ca712e8f066f_68","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01989.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01989.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":19,"end":64}},"sink":{"start":69,"end":69,"column":{"start":19,"end":64},"content":""},"parent_line_number":69,"fingerprint":"1bec0a426aa361804244ddaaf9331324_0","old_fingerprint":"1bec0a426aa361804244ddaaf9331324_72","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01990.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01990.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":19,"end":57}},"sink":{"start":69,"end":69,"column":{"start":19,"end":57},"content":""},"parent_line_number":69,"fingerprint":"6e1a29f0e3e9545db34effbaa5ed3dfd_0","old_fingerprint":"6e1a29f0e3e9545db34effbaa5ed3dfd_69","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02026.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02026.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":57,"column":{"start":17,"end":96}},"sink":{"start":56,"end":57,"column":{"start":17,"end":96},"content":""},"parent_line_number":56,"fingerprint":"d3b35f8e6158680b1e77dad63fdd7646_0","old_fingerprint":"d3b35f8e6158680b1e77dad63fdd7646_12","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02027.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02027.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":17,"end":87}},"sink":{"start":56,"end":56,"column":{"start":17,"end":87},"content":""},"parent_line_number":56,"fingerprint":"67e2af72f0674d66b22716422d9ba8cb_0","old_fingerprint":"67e2af72f0674d66b22716422d9ba8cb_13","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02028.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02028.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":17,"end":87}},"sink":{"start":56,"end":56,"column":{"start":17,"end":87},"content":""},"parent_line_number":56,"fingerprint":"edc6116966dd40ecf38f02342b8165a1_0","old_fingerprint":"edc6116966dd40ecf38f02342b8165a1_11","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02029.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02029.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":35,"end":56}},"sink":{"start":55,"end":55,"column":{"start":35,"end":56},"content":""},"parent_line_number":55,"fingerprint":"dde17078946c613951fa9f7ed7e9bc73_0","old_fingerprint":"dde17078946c613951fa9f7ed7e9bc73_10","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02030.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02030.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":39,"end":64}},"sink":{"start":75,"end":75,"column":{"start":39,"end":64},"content":""},"parent_line_number":75,"fingerprint":"be48b1a89b3a620d4dc09ca65c8affce_0","old_fingerprint":"be48b1a89b3a620d4dc09ca65c8affce_98","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02031.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02031.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":19,"end":74}},"sink":{"start":60,"end":60,"column":{"start":19,"end":74},"content":""},"parent_line_number":60,"fingerprint":"384705f0fb215cd2a8bcd8f34e9e14a3_0","old_fingerprint":"384705f0fb215cd2a8bcd8f34e9e14a3_32","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02032.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02032.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":19,"end":56}},"sink":{"start":60,"end":60,"column":{"start":19,"end":56},"content":""},"parent_line_number":60,"fingerprint":"f9ca086bd5409107dc3f510004514685_0","old_fingerprint":"f9ca086bd5409107dc3f510004514685_31","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02033.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02033.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":19,"end":82}},"sink":{"start":61,"end":61,"column":{"start":19,"end":82},"content":""},"parent_line_number":61,"fingerprint":"4d0b56d8b7845f01da4ab56f14fdb0b7_0","old_fingerprint":"4d0b56d8b7845f01da4ab56f14fdb0b7_36","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02034.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02034.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":46,"end":83}},"sink":{"start":67,"end":67,"column":{"start":46,"end":83},"content":""},"parent_line_number":67,"fingerprint":"960da8047679d568dcaebb30051e6211_0","old_fingerprint":"960da8047679d568dcaebb30051e6211_58","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02197.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02197.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":54,"column":{"start":17,"end":96}},"sink":{"start":53,"end":54,"column":{"start":17,"end":96},"content":""},"parent_line_number":53,"fingerprint":"7f729029d1dec79491021b0c174dd21d_0","old_fingerprint":"7f729029d1dec79491021b0c174dd21d_3","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02198.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02198.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":17,"end":87}},"sink":{"start":53,"end":53,"column":{"start":17,"end":87},"content":""},"parent_line_number":53,"fingerprint":"60d9f7f26ef075886681c57a9fb1385e_0","old_fingerprint":"60d9f7f26ef075886681c57a9fb1385e_4","code_extract":"                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02199.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02199.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":35,"end":56}},"sink":{"start":52,"end":52,"column":{"start":35,"end":56},"content":""},"parent_line_number":52,"fingerprint":"bcc982c6a59b18b34c0a6ffa5dce57f9_0","old_fingerprint":"bcc982c6a59b18b34c0a6ffa5dce57f9_0","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02200.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02200.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":35,"end":56}},"sink":{"start":52,"end":52,"column":{"start":35,"end":56},"content":""},"parent_line_number":52,"fingerprint":"44593eee85caf841ba4befe3607d148a_0","old_fingerprint":"44593eee85caf841ba4befe3607d148a_1","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02201.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02201.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":19,"end":74}},"sink":{"start":57,"end":57,"column":{"start":19,"end":74},"content":""},"parent_line_number":57,"fingerprint":"ef2afebc2343de2f5a5c2c2383c8661d_0","old_fingerprint":"ef2afebc2343de2f5a5c2c2383c8661d_14","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02202.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02202.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":82}},"sink":{"start":58,"end":58,"column":{"start":19,"end":82},"content":""},"parent_line_number":58,"fingerprint":"7148e4933666c93d6b520daa22716b63_0","old_fingerprint":"7148e4933666c93d6b520daa22716b63_18","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02203.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02203.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":75}},"sink":{"start":58,"end":58,"column":{"start":19,"end":75},"content":""},"parent_line_number":58,"fingerprint":"72cdcbe8a818bf08facbaadcf6b10010_0","old_fingerprint":"72cdcbe8a818bf08facbaadcf6b10010_19","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02204.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02204.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":46,"end":83}},"sink":{"start":64,"end":64,"column":{"start":46,"end":83},"content":""},"parent_line_number":64,"fingerprint":"60d7b321c97088d31fc36aa6fa3fb95f_0","old_fingerprint":"60d7b321c97088d31fc36aa6fa3fb95f_49","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02205.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02205.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":19,"end":57}},"sink":{"start":58,"end":58,"column":{"start":19,"end":57},"content":""},"parent_line_number":58,"fingerprint":"6a174e9e2f0a9e302a4c0b2fba686906_0","old_fingerprint":"6a174e9e2f0a9e302a4c0b2fba686906_20","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02300.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02300.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":64,"column":{"start":17,"end":96}},"sink":{"start":63,"end":64,"column":{"start":17,"end":96},"content":""},"parent_line_number":63,"fingerprint":"a80de90ac0911de5954c3f4e0ec42174_0","old_fingerprint":"a80de90ac0911de5954c3f4e0ec42174_42","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02301.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02301.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":35,"end":56}},"sink":{"start":62,"end":62,"column":{"start":35,"end":56},"content":""},"parent_line_number":62,"fingerprint":"fa00b8f65e84d14afaea3d7c13af89f6_0","old_fingerprint":"fa00b8f65e84d14afaea3d7c13af89f6_39","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02302.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02302.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":35,"end":69}},"sink":{"start":62,"end":62,"column":{"start":35,"end":69},"content":""},"parent_line_number":62,"fingerprint":"7087a144cb47cf1f4b08e9696ebeed2a_0","old_fingerprint":"7087a144cb47cf1f4b08e9696ebeed2a_38","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02303.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02303.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":19,"end":74}},"sink":{"start":67,"end":67,"column":{"start":19,"end":74},"content":""},"parent_line_number":67,"fingerprint":"82fc0721561751f7a10e2d859486d6ec_0","old_fingerprint":"82fc0721561751f7a10e2d859486d6ec_57","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02304.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02304.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":19,"end":56}},"sink":{"start":67,"end":67,"column":{"start":19,"end":56},"content":""},"parent_line_number":67,"fingerprint":"38dd64a4c76acb3685f3c2596bf34779_0","old_fingerprint":"38dd64a4c76acb3685f3c2596bf34779_56","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02554.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02554.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":74,"column":{"start":17,"end":96}},"sink":{"start":73,"end":74,"column":{"start":17,"end":96},"content":""},"parent_line_number":73,"fingerprint":"566954459ab49c4f8d06f8b6aa95ef36_0","old_fingerprint":"566954459ab49c4f8d06f8b6aa95ef36_91","code_extract":"                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02555.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02555.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":35,"end":56}},"sink":{"start":72,"end":72,"column":{"start":35,"end":56},"content":""},"parent_line_number":72,"fingerprint":"5f4a347045003302aa17ea74c1e83ab8_0","old_fingerprint":"5f4a347045003302aa17ea74c1e83ab8_84","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02556.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02556.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":35,"end":56}},"sink":{"start":72,"end":72,"column":{"start":35,"end":56},"content":""},"parent_line_number":72,"fingerprint":"556828b3321490d77328cec8e00ab8fe_0","old_fingerprint":"556828b3321490d77328cec8e00ab8fe_79","code_extract":"        java.io.File fileTarget = new java.io.File(bar);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02557.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02557.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":35,"end":69}},"sink":{"start":72,"end":72,"column":{"start":35,"end":69},"content":""},"parent_line_number":72,"fingerprint":"d56d66d21e70ba90fece260e4fd8945f_0","old_fingerprint":"d56d66d21e70ba90fece260e4fd8945f_80","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02558.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02558.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":35,"end":69}},"sink":{"start":72,"end":72,"column":{"start":35,"end":69},"content":""},"parent_line_number":72,"fingerprint":"66e5ac5a9f04ceacb9750624b88bedfc_0","old_fingerprint":"66e5ac5a9f04ceacb9750624b88bedfc_85","code_extract":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02559.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02559.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":39,"end":64}},"sink":{"start":89,"end":89,"column":{"start":39,"end":64},"content":""},"parent_line_number":89,"fingerprint":"54ef2e0109fc0c06a553af97dfc9bd3e_0","old_fingerprint":"54ef2e0109fc0c06a553af97dfc9bd3e_131","code_extract":"            java.io.File fileTarget = new java.io.File(fileURI);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02560.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02560.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":19,"end":74}},"sink":{"start":77,"end":77,"column":{"start":19,"end":74},"content":""},"parent_line_number":77,"fingerprint":"bfc50049c4a0d2f2b96206a216913b20_0","old_fingerprint":"bfc50049c4a0d2f2b96206a216913b20_102","code_extract":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02561.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02561.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":19,"end":56}},"sink":{"start":77,"end":77,"column":{"start":19,"end":56},"content":""},"parent_line_number":77,"fingerprint":"db5552fe253cda4990112696017e9c6c_0","old_fingerprint":"db5552fe253cda4990112696017e9c6c_100","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02562.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02562.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":19,"end":56}},"sink":{"start":77,"end":77,"column":{"start":19,"end":56},"content":""},"parent_line_number":77,"fingerprint":"aacb352dd64a609cf3775eba6b6bde8d_0","old_fingerprint":"aacb352dd64a609cf3775eba6b6bde8d_104","code_extract":"            fis = new java.io.FileInputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02563.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02563.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":82}},"sink":{"start":78,"end":78,"column":{"start":19,"end":82},"content":""},"parent_line_number":78,"fingerprint":"b071bdfc18c4bb807ad4e40a6cd661c2_0","old_fingerprint":"b071bdfc18c4bb807ad4e40a6cd661c2_109","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02564.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02564.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":82}},"sink":{"start":78,"end":78,"column":{"start":19,"end":82},"content":""},"parent_line_number":78,"fingerprint":"a9fdc96f1bcf29e1888ff2525e482477_0","old_fingerprint":"a9fdc96f1bcf29e1888ff2525e482477_113","code_extract":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02565.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02565.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":46,"end":83}},"sink":{"start":84,"end":84,"column":{"start":46,"end":83},"content":""},"parent_line_number":84,"fingerprint":"1c83f871734186b54c3691683780826a_0","old_fingerprint":"1c83f871734186b54c3691683780826a_126","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02566.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02566.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":46,"end":83}},"sink":{"start":84,"end":84,"column":{"start":46,"end":83},"content":""},"parent_line_number":84,"fingerprint":"dc87c483cc8f2d8272f4de738a4f978c_0","old_fingerprint":"dc87c483cc8f2d8272f4de738a4f978c_127","code_extract":"                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02567.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02567.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":64}},"sink":{"start":78,"end":78,"column":{"start":19,"end":64},"content":""},"parent_line_number":78,"fingerprint":"d3bbcaf697387e23be80095073c6759b_0","old_fingerprint":"d3bbcaf697387e23be80095073c6759b_107","code_extract":"            fos = new java.io.FileOutputStream(fileName, false);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02568.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02568.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":57}},"sink":{"start":78,"end":78,"column":{"start":19,"end":57},"content":""},"parent_line_number":78,"fingerprint":"a4c29458e32ef9f0156109b1117a9568_0","old_fingerprint":"a4c29458e32ef9f0156109b1117a9568_110","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["73"],"id":"java_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.\n\n## Remediations\n\n- **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** sanitize user input used in file path resolution. For example, use methods like `FilenameUtils.getName()` to safely extract only the intended file name from the user input, removing any path manipulation attempts.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_path_using_user_input","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02569.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02569.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":19,"end":57}},"sink":{"start":78,"end":78,"column":{"start":19,"end":57},"content":""},"parent_line_number":78,"fingerprint":"3d83d534c6124a0d1cdf2f50ed038eee_0","old_fingerprint":"3d83d534c6124a0d1cdf2f50ed038eee_111","code_extract":"            fos = new java.io.FileOutputStream(fileName);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"b14487410fa4429d25377c626834bfaa_0","old_fingerprint":"b14487410fa4429d25377c626834bfaa_45","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":29,"end":45}},"sink":{"start":72,"end":72,"column":{"start":29,"end":45},"content":""},"parent_line_number":72,"fingerprint":"90dd8bbbf096c725b7245f6f858eeae0_0","old_fingerprint":"90dd8bbbf096c725b7245f6f858eeae0_0","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":29,"end":45}},"sink":{"start":81,"end":81,"column":{"start":29,"end":45},"content":""},"parent_line_number":81,"fingerprint":"4f2638e6ddee8e6f95bcacdc5321696a_0","old_fingerprint":"4f2638e6ddee8e6f95bcacdc5321696a_20","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"eb5bda9ad5a07e389dcb94f7cb5d5b25_0","old_fingerprint":"eb5bda9ad5a07e389dcb94f7cb5d5b25_57","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":29,"end":45}},"sink":{"start":82,"end":82,"column":{"start":29,"end":45},"content":""},"parent_line_number":82,"fingerprint":"b4543aa115ab9389e2571e0a86bf4346_0","old_fingerprint":"b4543aa115ab9389e2571e0a86bf4346_23","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":29,"end":45}},"sink":{"start":108,"end":108,"column":{"start":29,"end":45},"content":""},"parent_line_number":108,"fingerprint":"50f491dfc983c53c367338e599d31920_0","old_fingerprint":"50f491dfc983c53c367338e599d31920_127","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":29,"end":45}},"sink":{"start":101,"end":101,"column":{"start":29,"end":45},"content":""},"parent_line_number":101,"fingerprint":"76f2e5869027ab9e6400d9ff0a5d294e_0","old_fingerprint":"76f2e5869027ab9e6400d9ff0a5d294e_108","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":29,"end":45}},"sink":{"start":111,"end":111,"column":{"start":29,"end":45},"content":""},"parent_line_number":111,"fingerprint":"cea5ac14ac63b617faa50ac1f488737c_0","old_fingerprint":"cea5ac14ac63b617faa50ac1f488737c_129","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"f0862f27628778052fd96cd675879b19_0","old_fingerprint":"f0862f27628778052fd96cd675879b19_116","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":29,"end":45}},"sink":{"start":109,"end":109,"column":{"start":29,"end":45},"content":""},"parent_line_number":109,"fingerprint":"60547e11a77694f12b9067467349ce18_0","old_fingerprint":"60547e11a77694f12b9067467349ce18_128","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":29,"end":45}},"sink":{"start":93,"end":93,"column":{"start":29,"end":45},"content":""},"parent_line_number":93,"fingerprint":"7c3b1530803eebbb115349e9309fafd2_0","old_fingerprint":"7c3b1530803eebbb115349e9309fafd2_86","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"e26889623de4bb394875fe4d29cf9ff4_0","old_fingerprint":"e26889623de4bb394875fe4d29cf9ff4_56","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":29,"end":45}},"sink":{"start":92,"end":92,"column":{"start":29,"end":45},"content":""},"parent_line_number":92,"fingerprint":"9bb541851c612d8ceb0d3e6d69899f41_0","old_fingerprint":"9bb541851c612d8ceb0d3e6d69899f41_81","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"563944cc25a3ecd541589737bc571aa2_0","old_fingerprint":"563944cc25a3ecd541589737bc571aa2_55","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":29,"end":45}},"sink":{"start":102,"end":102,"column":{"start":29,"end":45},"content":""},"parent_line_number":102,"fingerprint":"3706bb5dc7dbd0a11fc645e2546a90e3_0","old_fingerprint":"3706bb5dc7dbd0a11fc645e2546a90e3_109","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":100,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","category_groups":["PII","Personal Data"],"source":{"start":100,"end":100,"column":{"start":29,"end":45}},"sink":{"start":100,"end":100,"column":{"start":29,"end":45},"content":""},"parent_line_number":100,"fingerprint":"2ab245f4c244da52406ab6ffa36b40d6_0","old_fingerprint":"2ab245f4c244da52406ab6ffa36b40d6_106","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":29,"end":45}},"sink":{"start":98,"end":98,"column":{"start":29,"end":45},"content":""},"parent_line_number":98,"fingerprint":"e91ff1e5078b722600f7d8931b3ab282_0","old_fingerprint":"e91ff1e5078b722600f7d8931b3ab282_102","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":29,"end":45}},"sink":{"start":99,"end":99,"column":{"start":29,"end":45},"content":""},"parent_line_number":99,"fingerprint":"4687c71688cad85eefd38513b61d4e1f_0","old_fingerprint":"4687c71688cad85eefd38513b61d4e1f_105","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":29,"end":45}},"sink":{"start":90,"end":90,"column":{"start":29,"end":45},"content":""},"parent_line_number":90,"fingerprint":"c52f5741e19a1bf1e3207a786b820f13_0","old_fingerprint":"c52f5741e19a1bf1e3207a786b820f13_73","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"8af1ad4860d4a1fb390ff8361ae73315_0","old_fingerprint":"8af1ad4860d4a1fb390ff8361ae73315_71","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":29,"end":45}},"sink":{"start":81,"end":81,"column":{"start":29,"end":45},"content":""},"parent_line_number":81,"fingerprint":"e07322e613604eaee0a925ca974e77a4_0","old_fingerprint":"e07322e613604eaee0a925ca974e77a4_17","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":29,"end":45}},"sink":{"start":94,"end":94,"column":{"start":29,"end":45},"content":""},"parent_line_number":94,"fingerprint":"56e53864fa8b09d23ccdc8c73971cd12_0","old_fingerprint":"56e53864fa8b09d23ccdc8c73971cd12_90","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":45}},"sink":{"start":79,"end":79,"column":{"start":29,"end":45},"content":""},"parent_line_number":79,"fingerprint":"7056a6a47f8d0db90239af850ef9f41d_0","old_fingerprint":"7056a6a47f8d0db90239af850ef9f41d_12","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"fae2a9941cfb1a312c3e691ee3c588f5_0","old_fingerprint":"fae2a9941cfb1a312c3e691ee3c588f5_121","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":29,"end":45}},"sink":{"start":91,"end":91,"column":{"start":29,"end":45},"content":""},"parent_line_number":91,"fingerprint":"f463ad898f139c012fdff9c0818dce9f_0","old_fingerprint":"f463ad898f139c012fdff9c0818dce9f_79","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":29,"end":45}},"sink":{"start":83,"end":83,"column":{"start":29,"end":45},"content":""},"parent_line_number":83,"fingerprint":"db83ae8fc38f1d8adc0ecbaddd1959e9_0","old_fingerprint":"db83ae8fc38f1d8adc0ecbaddd1959e9_27","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":29,"end":45}},"sink":{"start":81,"end":81,"column":{"start":29,"end":45},"content":""},"parent_line_number":81,"fingerprint":"fbeb3da3818accf1692a7eb9e13ee9ad_0","old_fingerprint":"fbeb3da3818accf1692a7eb9e13ee9ad_19","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":29,"end":45}},"sink":{"start":103,"end":103,"column":{"start":29,"end":45},"content":""},"parent_line_number":103,"fingerprint":"63f6bc35b07f60b8cdd00069782562ba_0","old_fingerprint":"63f6bc35b07f60b8cdd00069782562ba_114","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":29,"end":45}},"sink":{"start":101,"end":101,"column":{"start":29,"end":45},"content":""},"parent_line_number":101,"fingerprint":"aa604928c9d3a4fa23ae692d9f9d635f_0","old_fingerprint":"aa604928c9d3a4fa23ae692d9f9d635f_107","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"ca4e246bf691f054c3457af206e0ab49_0","old_fingerprint":"ca4e246bf691f054c3457af206e0ab49_93","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":29,"end":45}},"sink":{"start":88,"end":88,"column":{"start":29,"end":45},"content":""},"parent_line_number":88,"fingerprint":"c39bbe526fcfd0e927f3d9abaa46e303_0","old_fingerprint":"c39bbe526fcfd0e927f3d9abaa46e303_60","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":29,"end":45}},"sink":{"start":107,"end":107,"column":{"start":29,"end":45},"content":""},"parent_line_number":107,"fingerprint":"e1ad08abcb76bf969d29177740bced50_0","old_fingerprint":"e1ad08abcb76bf969d29177740bced50_125","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":29,"end":45}},"sink":{"start":91,"end":91,"column":{"start":29,"end":45},"content":""},"parent_line_number":91,"fingerprint":"67991a41f4245fb3ee09d480fa865689_0","old_fingerprint":"67991a41f4245fb3ee09d480fa865689_77","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":29,"end":45}},"sink":{"start":94,"end":94,"column":{"start":29,"end":45},"content":""},"parent_line_number":94,"fingerprint":"4c0d9c73f4a8584b5ceb78dfdd4a9e87_0","old_fingerprint":"4c0d9c73f4a8584b5ceb78dfdd4a9e87_89","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":29,"end":45}},"sink":{"start":90,"end":90,"column":{"start":29,"end":45},"content":""},"parent_line_number":90,"fingerprint":"307bdf418bcc9920f18db28749961ce5_0","old_fingerprint":"307bdf418bcc9920f18db28749961ce5_74","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":29,"end":45}},"sink":{"start":76,"end":76,"column":{"start":29,"end":45},"content":""},"parent_line_number":76,"fingerprint":"92db0791a9fb3f036769b0d8974a1e7f_0","old_fingerprint":"92db0791a9fb3f036769b0d8974a1e7f_7","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":29,"end":45}},"sink":{"start":77,"end":77,"column":{"start":29,"end":45},"content":""},"parent_line_number":77,"fingerprint":"62cd4a892da3f3bab019679b6a92c8fc_0","old_fingerprint":"62cd4a892da3f3bab019679b6a92c8fc_10","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"41b6457810e9293e7e8caf36b54f8b61_0","old_fingerprint":"41b6457810e9293e7e8caf36b54f8b61_41","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":29,"end":45}},"sink":{"start":90,"end":90,"column":{"start":29,"end":45},"content":""},"parent_line_number":90,"fingerprint":"c720667e2d88f5a651f0425b6479200f_0","old_fingerprint":"c720667e2d88f5a651f0425b6479200f_72","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":29,"end":45}},"sink":{"start":91,"end":91,"column":{"start":29,"end":45},"content":""},"parent_line_number":91,"fingerprint":"4170fd4321a056ac0f1207f771560360_0","old_fingerprint":"4170fd4321a056ac0f1207f771560360_80","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":29,"end":45}},"sink":{"start":94,"end":94,"column":{"start":29,"end":45},"content":""},"parent_line_number":94,"fingerprint":"ac61b44b367bf0e31bda581e58161d1e_0","old_fingerprint":"ac61b44b367bf0e31bda581e58161d1e_88","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"b0b250ec5521e9acd6862b0f7a107e2d_0","old_fingerprint":"b0b250ec5521e9acd6862b0f7a107e2d_31","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"72aba8bbfcf5ad18c05609e6403513ee_0","old_fingerprint":"72aba8bbfcf5ad18c05609e6403513ee_53","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"5b1a9f5395fae629f006b5d9c1187b19_0","old_fingerprint":"5b1a9f5395fae629f006b5d9c1187b19_120","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"de488700d21e237d3e781acace1f744f_0","old_fingerprint":"de488700d21e237d3e781acace1f744f_124","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"0ad76a9cd82ab45f991b8e22104bdfa3_0","old_fingerprint":"0ad76a9cd82ab45f991b8e22104bdfa3_36","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":29,"end":45}},"sink":{"start":93,"end":93,"column":{"start":29,"end":45},"content":""},"parent_line_number":93,"fingerprint":"1c165772dc84b1dae921580a586b753f_0","old_fingerprint":"1c165772dc84b1dae921580a586b753f_84","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":29,"end":45}},"sink":{"start":103,"end":103,"column":{"start":29,"end":45},"content":""},"parent_line_number":103,"fingerprint":"0f75c56df70c7d70a3fe9c277804b860_0","old_fingerprint":"0f75c56df70c7d70a3fe9c277804b860_112","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":29,"end":45}},"sink":{"start":102,"end":102,"column":{"start":29,"end":45},"content":""},"parent_line_number":102,"fingerprint":"fef00acf3c5c42a5e20e8540196a4817_0","old_fingerprint":"fef00acf3c5c42a5e20e8540196a4817_110","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":29,"end":45}},"sink":{"start":80,"end":80,"column":{"start":29,"end":45},"content":""},"parent_line_number":80,"fingerprint":"a59c672320b23d912062e1f73fcfa6e3_0","old_fingerprint":"a59c672320b23d912062e1f73fcfa6e3_15","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":29,"end":45}},"sink":{"start":93,"end":93,"column":{"start":29,"end":45},"content":""},"parent_line_number":93,"fingerprint":"a516cef85cfbb57b322e11c5202e90f2_0","old_fingerprint":"a516cef85cfbb57b322e11c5202e90f2_85","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":29,"end":45}},"sink":{"start":93,"end":93,"column":{"start":29,"end":45},"content":""},"parent_line_number":93,"fingerprint":"c9a96a2610ae10634139317f2475e2e1_0","old_fingerprint":"c9a96a2610ae10634139317f2475e2e1_82","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"fe16f6f4a1dc3c9d6215176e2b0a14fe_0","old_fingerprint":"fe16f6f4a1dc3c9d6215176e2b0a14fe_70","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"bf6bcec7b359b2371b7186d0fca51b97_0","old_fingerprint":"bf6bcec7b359b2371b7186d0fca51b97_52","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"0c31d7bd7050cd717a942f5a3936731d_0","old_fingerprint":"0c31d7bd7050cd717a942f5a3936731d_48","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"475cab711cc263801de7940c8f99202e_0","old_fingerprint":"475cab711cc263801de7940c8f99202e_54","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":45}},"sink":{"start":79,"end":79,"column":{"start":29,"end":45},"content":""},"parent_line_number":79,"fingerprint":"3afca5b09ff4b054d80b94c2821200ae_0","old_fingerprint":"3afca5b09ff4b054d80b94c2821200ae_13","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":29,"end":45}},"sink":{"start":99,"end":99,"column":{"start":29,"end":45},"content":""},"parent_line_number":99,"fingerprint":"dd97333f05349bdcf6ba9de3c049e67b_0","old_fingerprint":"dd97333f05349bdcf6ba9de3c049e67b_104","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":29,"end":45}},"sink":{"start":97,"end":97,"column":{"start":29,"end":45},"content":""},"parent_line_number":97,"fingerprint":"fdf2de0a1201aad5309f7a0b63d6aca2_0","old_fingerprint":"fdf2de0a1201aad5309f7a0b63d6aca2_100","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":29,"end":45}},"sink":{"start":97,"end":97,"column":{"start":29,"end":45},"content":""},"parent_line_number":97,"fingerprint":"d3ea5fc8d50d2694b0f2a00a6d1a7f47_0","old_fingerprint":"d3ea5fc8d50d2694b0f2a00a6d1a7f47_99","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"1059c6eb7632c89fd0f19faeb71375a4_0","old_fingerprint":"1059c6eb7632c89fd0f19faeb71375a4_66","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"8b18e6e71d792725c7e15703a546a349_0","old_fingerprint":"8b18e6e71d792725c7e15703a546a349_64","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"4a6fd28b39cf219510468d79e572b011_0","old_fingerprint":"4a6fd28b39cf219510468d79e572b011_69","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"061b25ecd173ff22b5cff05992dceff9_0","old_fingerprint":"061b25ecd173ff22b5cff05992dceff9_63","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"1c21537c4c353ad468b1dccce288046e_0","old_fingerprint":"1c21537c4c353ad468b1dccce288046e_61","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"a1fa038535f8c0c8eb355578e1fab088_0","old_fingerprint":"a1fa038535f8c0c8eb355578e1fab088_65","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":29,"end":45}},"sink":{"start":82,"end":82,"column":{"start":29,"end":45},"content":""},"parent_line_number":82,"fingerprint":"8fecd8ff2231545c31b83445ddb9ceab_0","old_fingerprint":"8fecd8ff2231545c31b83445ddb9ceab_24","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":29,"end":45}},"sink":{"start":82,"end":82,"column":{"start":29,"end":45},"content":""},"parent_line_number":82,"fingerprint":"baf5d6f3e8dcf5a009932dab2f4f4e1d_0","old_fingerprint":"baf5d6f3e8dcf5a009932dab2f4f4e1d_21","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":29,"end":45}},"sink":{"start":74,"end":74,"column":{"start":29,"end":45},"content":""},"parent_line_number":74,"fingerprint":"c8d5b9d9ebc4fdfafc974abe45093dfd_0","old_fingerprint":"c8d5b9d9ebc4fdfafc974abe45093dfd_1","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":29,"end":45}},"sink":{"start":88,"end":88,"column":{"start":29,"end":45},"content":""},"parent_line_number":88,"fingerprint":"121fd514182414261ae448db20baa741_0","old_fingerprint":"121fd514182414261ae448db20baa741_59","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":29,"end":45}},"sink":{"start":88,"end":88,"column":{"start":29,"end":45},"content":""},"parent_line_number":88,"fingerprint":"1ea540b1ffca2ef07d549a28e0ad2750_0","old_fingerprint":"1ea540b1ffca2ef07d549a28e0ad2750_58","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"0edac192ecf32255adfb4bd647012d12_0","old_fingerprint":"0edac192ecf32255adfb4bd647012d12_39","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"3bc7aeb1ad4210d57bed95dcad4a5d5d_0","old_fingerprint":"3bc7aeb1ad4210d57bed95dcad4a5d5d_40","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"49f0e44bd9210cdb00dd23d9aa003c00_0","old_fingerprint":"49f0e44bd9210cdb00dd23d9aa003c00_42","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":29,"end":45}},"sink":{"start":78,"end":78,"column":{"start":29,"end":45},"content":""},"parent_line_number":78,"fingerprint":"78e969732e1e1b9dea76ddd5188d762f_0","old_fingerprint":"78e969732e1e1b9dea76ddd5188d762f_11","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"03ff69922465797a159937a58d7a7601_0","old_fingerprint":"03ff69922465797a159937a58d7a7601_94","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"641c1b3fbaff1234377206ee5a862a6c_0","old_fingerprint":"641c1b3fbaff1234377206ee5a862a6c_46","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"76511a6bd3988e11a3859d1695d49190_0","old_fingerprint":"76511a6bd3988e11a3859d1695d49190_32","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"8b463433f7929b92ce5a6e188e92799c_0","old_fingerprint":"8b463433f7929b92ce5a6e188e92799c_28","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"c66636ec6fb2f5b2e6fed842bd09aef7_0","old_fingerprint":"c66636ec6fb2f5b2e6fed842bd09aef7_29","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":29,"end":45}},"sink":{"start":76,"end":76,"column":{"start":29,"end":45},"content":""},"parent_line_number":76,"fingerprint":"be9fdf7e4425018b700b11365af33cd1_0","old_fingerprint":"be9fdf7e4425018b700b11365af33cd1_8","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"a334e52960ad69e4f28cd9a2949954ac_0","old_fingerprint":"a334e52960ad69e4f28cd9a2949954ac_30","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":29,"end":45}},"sink":{"start":76,"end":76,"column":{"start":29,"end":45},"content":""},"parent_line_number":76,"fingerprint":"6fda3b8d0b6d81d8eaa8b8f32d81a1ee_0","old_fingerprint":"6fda3b8d0b6d81d8eaa8b8f32d81a1ee_6","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":29,"end":45}},"sink":{"start":108,"end":108,"column":{"start":29,"end":45},"content":""},"parent_line_number":108,"fingerprint":"1885e8fabc7c21209a49bf1f87a17703_0","old_fingerprint":"1885e8fabc7c21209a49bf1f87a17703_126","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"d6d0b4164cbc3f1975ad7754ec5ad431_0","old_fingerprint":"d6d0b4164cbc3f1975ad7754ec5ad431_119","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"3587826ce904e3d1a7b56aa38bb9fb73_0","old_fingerprint":"3587826ce904e3d1a7b56aa38bb9fb73_117","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"8151ec4fc9394f344cd3bd8c316b0907_0","old_fingerprint":"8151ec4fc9394f344cd3bd8c316b0907_118","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":29,"end":45}},"sink":{"start":98,"end":98,"column":{"start":29,"end":45},"content":""},"parent_line_number":98,"fingerprint":"cecc857b4517ca94997d6f919f7aebeb_0","old_fingerprint":"cecc857b4517ca94997d6f919f7aebeb_103","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":29,"end":45}},"sink":{"start":75,"end":75,"column":{"start":29,"end":45},"content":""},"parent_line_number":75,"fingerprint":"db10b893bada56a90d55e34ed0989266_0","old_fingerprint":"db10b893bada56a90d55e34ed0989266_4","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":29,"end":45}},"sink":{"start":75,"end":75,"column":{"start":29,"end":45},"content":""},"parent_line_number":75,"fingerprint":"9b2ab37992022fdff9cf9682367e57e8_0","old_fingerprint":"9b2ab37992022fdff9cf9682367e57e8_2","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":29,"end":45}},"sink":{"start":75,"end":75,"column":{"start":29,"end":45},"content":""},"parent_line_number":75,"fingerprint":"69c8613a79ee8cad9b07b413dcf47913_0","old_fingerprint":"69c8613a79ee8cad9b07b413dcf47913_3","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":29,"end":45}},"sink":{"start":103,"end":103,"column":{"start":29,"end":45},"content":""},"parent_line_number":103,"fingerprint":"e534ccb5169119dee6bfa6f3741ea138_0","old_fingerprint":"e534ccb5169119dee6bfa6f3741ea138_113","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":29,"end":45}},"sink":{"start":103,"end":103,"column":{"start":29,"end":45},"content":""},"parent_line_number":103,"fingerprint":"2f72c076fe3f6a8f561bdd9564edc505_0","old_fingerprint":"2f72c076fe3f6a8f561bdd9564edc505_111","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":29,"end":45}},"sink":{"start":93,"end":93,"column":{"start":29,"end":45},"content":""},"parent_line_number":93,"fingerprint":"ccca7b638fad0b3f53d458af51be2729_0","old_fingerprint":"ccca7b638fad0b3f53d458af51be2729_83","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":29,"end":45}},"sink":{"start":93,"end":93,"column":{"start":29,"end":45},"content":""},"parent_line_number":93,"fingerprint":"a8bb80d49feca38a8588ea02fe8de3d8_0","old_fingerprint":"a8bb80d49feca38a8588ea02fe8de3d8_87","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"b652bd94eccfa3849b341a5788b26abb_0","old_fingerprint":"b652bd94eccfa3849b341a5788b26abb_51","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"645661ae78c3969d27b40b02260a35ad_0","old_fingerprint":"645661ae78c3969d27b40b02260a35ad_50","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":45}},"sink":{"start":87,"end":87,"column":{"start":29,"end":45},"content":""},"parent_line_number":87,"fingerprint":"e9b3e5a030bcfdeb9fc47fa8f0ecb245_0","old_fingerprint":"e9b3e5a030bcfdeb9fc47fa8f0ecb245_49","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":45}},"sink":{"start":79,"end":79,"column":{"start":29,"end":45},"content":""},"parent_line_number":79,"fingerprint":"95fbe2d9cb0470a58df2bd6a70acc88d_0","old_fingerprint":"95fbe2d9cb0470a58df2bd6a70acc88d_14","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":29,"end":45}},"sink":{"start":97,"end":97,"column":{"start":29,"end":45},"content":""},"parent_line_number":97,"fingerprint":"f8005ff4dc07dbdcc300591afca48f2c_0","old_fingerprint":"f8005ff4dc07dbdcc300591afca48f2c_101","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"13d3e9a9252f83c3410e4c553b8d924b_0","old_fingerprint":"13d3e9a9252f83c3410e4c553b8d924b_67","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"54990fb2a01a7340805c67d0745aae33_0","old_fingerprint":"54990fb2a01a7340805c67d0745aae33_62","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":29,"end":45}},"sink":{"start":91,"end":91,"column":{"start":29,"end":45},"content":""},"parent_line_number":91,"fingerprint":"f6dcc4054c0e6493d9792d0885203039_0","old_fingerprint":"f6dcc4054c0e6493d9792d0885203039_76","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":29,"end":45}},"sink":{"start":91,"end":91,"column":{"start":29,"end":45},"content":""},"parent_line_number":91,"fingerprint":"b4052fbbc781d7a246e7594f38d9acd1_0","old_fingerprint":"b4052fbbc781d7a246e7594f38d9acd1_75","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":29,"end":45}},"sink":{"start":91,"end":91,"column":{"start":29,"end":45},"content":""},"parent_line_number":91,"fingerprint":"8596e1d1eaaf28db0c182fdd301daca1_0","old_fingerprint":"8596e1d1eaaf28db0c182fdd301daca1_78","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":45}},"sink":{"start":89,"end":89,"column":{"start":29,"end":45},"content":""},"parent_line_number":89,"fingerprint":"4c2251c85d6286ae8d6391e5cd38b874_0","old_fingerprint":"4c2251c85d6286ae8d6391e5cd38b874_68","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":29,"end":45}},"sink":{"start":81,"end":81,"column":{"start":29,"end":45},"content":""},"parent_line_number":81,"fingerprint":"c36415efd03077617734a8c389367a58_0","old_fingerprint":"c36415efd03077617734a8c389367a58_18","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":29,"end":45}},"sink":{"start":81,"end":81,"column":{"start":29,"end":45},"content":""},"parent_line_number":81,"fingerprint":"7907ea2d13bdea3b66248889fb0dc480_0","old_fingerprint":"7907ea2d13bdea3b66248889fb0dc480_16","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":29,"end":45}},"sink":{"start":82,"end":82,"column":{"start":29,"end":45},"content":""},"parent_line_number":82,"fingerprint":"c10a978d52e2f872b40a91315479e732_0","old_fingerprint":"c10a978d52e2f872b40a91315479e732_22","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"f5e924288800bac57e4c722dfaa548a4_0","old_fingerprint":"f5e924288800bac57e4c722dfaa548a4_43","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"61ef8b4421e425ae0bdcce1832ebac90_0","old_fingerprint":"61ef8b4421e425ae0bdcce1832ebac90_44","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"d83aa42a9d9a16df4117ec515146c831_0","old_fingerprint":"d83aa42a9d9a16df4117ec515146c831_47","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"c23530f44b51c953ea5ad4f44733d636_0","old_fingerprint":"c23530f44b51c953ea5ad4f44733d636_37","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"11566554ba3690aa17b43f92e1f61070_0","old_fingerprint":"11566554ba3690aa17b43f92e1f61070_92","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"7401df6626d2b9f29df4e40436883126_0","old_fingerprint":"7401df6626d2b9f29df4e40436883126_91","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"a4afcb062171054fdc29439dfa735d28_0","old_fingerprint":"a4afcb062171054fdc29439dfa735d28_98","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"81584adcf53b086c9b8b796e86c951b5_0","old_fingerprint":"81584adcf53b086c9b8b796e86c951b5_97","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"f0742d7f38195efc51398fbc070dc9f7_0","old_fingerprint":"f0742d7f38195efc51398fbc070dc9f7_96","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":29,"end":45}},"sink":{"start":96,"end":96,"column":{"start":29,"end":45},"content":""},"parent_line_number":96,"fingerprint":"b20eb68204229097e13a76bcbbc03765_0","old_fingerprint":"b20eb68204229097e13a76bcbbc03765_95","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"2d65a92b52cfdc964941275816b1d43f_0","old_fingerprint":"2d65a92b52cfdc964941275816b1d43f_33","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":45}},"sink":{"start":84,"end":84,"column":{"start":29,"end":45},"content":""},"parent_line_number":84,"fingerprint":"1806d48f3088a51b9ef04a160a789acd_0","old_fingerprint":"1806d48f3088a51b9ef04a160a789acd_34","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":29,"end":45}},"sink":{"start":76,"end":76,"column":{"start":29,"end":45},"content":""},"parent_line_number":76,"fingerprint":"8a726ea97aa444a7ef348ce131cd7980_0","old_fingerprint":"8a726ea97aa444a7ef348ce131cd7980_9","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":29,"end":45}},"sink":{"start":86,"end":86,"column":{"start":29,"end":45},"content":""},"parent_line_number":86,"fingerprint":"78437b76cdf80656521bb09b1950eff5_0","old_fingerprint":"78437b76cdf80656521bb09b1950eff5_38","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"6673dcbd288575684572b76e73070020_0","old_fingerprint":"6673dcbd288575684572b76e73070020_122","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"decb4a0de014e1b0649f5b4143310e80_0","old_fingerprint":"decb4a0de014e1b0649f5b4143310e80_123","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":29,"end":45}},"sink":{"start":106,"end":106,"column":{"start":29,"end":45},"content":""},"parent_line_number":106,"fingerprint":"f9857628727520ab2108b16151088a6b_0","old_fingerprint":"f9857628727520ab2108b16151088a6b_115","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":29,"end":45}},"sink":{"start":85,"end":85,"column":{"start":29,"end":45},"content":""},"parent_line_number":85,"fingerprint":"ee1840a88dd26effae70d86eaf263825_0","old_fingerprint":"ee1840a88dd26effae70d86eaf263825_35","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":29,"end":45}},"sink":{"start":83,"end":83,"column":{"start":29,"end":45},"content":""},"parent_line_number":83,"fingerprint":"88289add361fdd18c9208cb13cbbec3c_0","old_fingerprint":"88289add361fdd18c9208cb13cbbec3c_25","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":29,"end":45}},"sink":{"start":83,"end":83,"column":{"start":29,"end":45},"content":""},"parent_line_number":83,"fingerprint":"0bc284da85335454ac6a0f2c6dc80e16_0","old_fingerprint":"0bc284da85335454ac6a0f2c6dc80e16_26","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_des","title":"Usage of weak encryption algorithm (DES)","description":"## Description\n\nYour code is at risk due to the use of DES (Data Encryption Standard), a weak encryption algorithm. This vulnerability can lead to data breaches and compromises your security measures.\n\n## Remediations\n\n- **Do not** use DES as it is outdated and vulnerable to attacks. Its use can significantly weaken your application's security.\n- **Do** use stronger encryption algorithms to enhance data security. AES (Advanced Encryption Standard) is a recommended choice.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":29,"end":45}},"sink":{"start":75,"end":75,"column":{"start":29,"end":45},"content":""},"parent_line_number":75,"fingerprint":"249d5ba6162e1953d19caf8cf36dff6f_0","old_fingerprint":"249d5ba6162e1953d19caf8cf36dff6f_5","code_extract":"            byte[] result = c.doFinal(input);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":37,"end":79}},"sink":{"start":51,"end":51,"column":{"start":37,"end":79},"content":""},"parent_line_number":51,"fingerprint":"c2937ac8671a9fc46c5c71bcac57cb62_0","old_fingerprint":"c2937ac8671a9fc46c5c71bcac57cb62_0","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":37,"end":79}},"sink":{"start":66,"end":66,"column":{"start":37,"end":79},"content":""},"parent_line_number":66,"fingerprint":"3cd1b87391fb1c570957f666b7af001a_0","old_fingerprint":"3cd1b87391fb1c570957f666b7af001a_25","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00059.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00059.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":79}},"sink":{"start":83,"end":83,"column":{"start":37,"end":79},"content":""},"parent_line_number":83,"fingerprint":"972df5df744c254f9772f37f5f7d1bd8_0","old_fingerprint":"972df5df744c254f9772f37f5f7d1bd8_54","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00127.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00127.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":37,"end":79}},"sink":{"start":78,"end":78,"column":{"start":37,"end":79},"content":""},"parent_line_number":78,"fingerprint":"6a4b267e8789d26bcc7d1ff437ae5077_0","old_fingerprint":"6a4b267e8789d26bcc7d1ff437ae5077_53","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00128.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00128.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":79}},"sink":{"start":73,"end":73,"column":{"start":37,"end":79},"content":""},"parent_line_number":73,"fingerprint":"27c509dabfe81aa2ec37a5ff7d156377_0","old_fingerprint":"27c509dabfe81aa2ec37a5ff7d156377_43","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00129.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00129.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"30d7f6ab5f6f79d15e1c4da8c02fd364_0","old_fingerprint":"30d7f6ab5f6f79d15e1c4da8c02fd364_31","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00130.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00130.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":37,"end":79}},"sink":{"start":87,"end":87,"column":{"start":37,"end":79},"content":""},"parent_line_number":87,"fingerprint":"3c7ba9a2da6d48c5a71d1c716a902cfb_0","old_fingerprint":"3c7ba9a2da6d48c5a71d1c716a902cfb_56","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00213.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00213.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":37,"end":79}},"sink":{"start":88,"end":88,"column":{"start":37,"end":79},"content":""},"parent_line_number":88,"fingerprint":"401fea6f55f3687848270d2e623bea68_0","old_fingerprint":"401fea6f55f3687848270d2e623bea68_58","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00214.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00214.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":37,"end":79}},"sink":{"start":78,"end":78,"column":{"start":37,"end":79},"content":""},"parent_line_number":78,"fingerprint":"56530aed646eaadc11712251c0bf712b_0","old_fingerprint":"56530aed646eaadc11712251c0bf712b_51","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":79}},"sink":{"start":60,"end":60,"column":{"start":37,"end":79},"content":""},"parent_line_number":60,"fingerprint":"0769a28097f165d126304f585a7bc336_0","old_fingerprint":"0769a28097f165d126304f585a7bc336_18","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":79}},"sink":{"start":73,"end":73,"column":{"start":37,"end":79},"content":""},"parent_line_number":73,"fingerprint":"ff1dc992ffdb32f256d33417005b03cb_0","old_fingerprint":"ff1dc992ffdb32f256d33417005b03cb_44","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":37,"end":79}},"sink":{"start":58,"end":58,"column":{"start":37,"end":79},"content":""},"parent_line_number":58,"fingerprint":"0182261e117a182160c0938a6d2e1622_0","old_fingerprint":"0182261e117a182160c0938a6d2e1622_13","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00357.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00357.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":79}},"sink":{"start":63,"end":63,"column":{"start":37,"end":79},"content":""},"parent_line_number":63,"fingerprint":"50b62eca65cb22fe9bab9c442a96093a_0","old_fingerprint":"50b62eca65cb22fe9bab9c442a96093a_21","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00358.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00358.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":79}},"sink":{"start":64,"end":64,"column":{"start":37,"end":79},"content":""},"parent_line_number":64,"fingerprint":"6f9db12a457329c36939c1a380eb074d_0","old_fingerprint":"6f9db12a457329c36939c1a380eb074d_23","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":37,"end":79}},"sink":{"start":62,"end":62,"column":{"start":37,"end":79},"content":""},"parent_line_number":62,"fingerprint":"41b244773f9145eb2a83bb7ad9341b71_0","old_fingerprint":"41b244773f9145eb2a83bb7ad9341b71_20","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":79}},"sink":{"start":60,"end":60,"column":{"start":37,"end":79},"content":""},"parent_line_number":60,"fingerprint":"92c1cb73c242eeadb04be3d85fa0c2fd_0","old_fingerprint":"92c1cb73c242eeadb04be3d85fa0c2fd_17","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00450.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00450.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":37,"end":79}},"sink":{"start":87,"end":87,"column":{"start":37,"end":79},"content":""},"parent_line_number":87,"fingerprint":"0c415cf5776f7a121e5b9ea315afc123_0","old_fingerprint":"0c415cf5776f7a121e5b9ea315afc123_55","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00451.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00451.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":37,"end":79}},"sink":{"start":72,"end":72,"column":{"start":37,"end":79},"content":""},"parent_line_number":72,"fingerprint":"15ee12716945c0263153bf97b3040ade_0","old_fingerprint":"15ee12716945c0263153bf97b3040ade_41","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00524.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00524.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":37,"end":79}},"sink":{"start":97,"end":97,"column":{"start":37,"end":79},"content":""},"parent_line_number":97,"fingerprint":"075039cf6be6043e447be24992bd796a_0","old_fingerprint":"075039cf6be6043e447be24992bd796a_59","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":37,"end":79}},"sink":{"start":55,"end":55,"column":{"start":37,"end":79},"content":""},"parent_line_number":55,"fingerprint":"cc78ca995652b80553d6993fe861c9b0_0","old_fingerprint":"cc78ca995652b80553d6993fe861c9b0_9","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":37,"end":79}},"sink":{"start":56,"end":56,"column":{"start":37,"end":79},"content":""},"parent_line_number":56,"fingerprint":"f255f0e4f9de5ac521434133ac9d269e_0","old_fingerprint":"f255f0e4f9de5ac521434133ac9d269e_10","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00618.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00618.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":37,"end":79}},"sink":{"start":70,"end":70,"column":{"start":37,"end":79},"content":""},"parent_line_number":70,"fingerprint":"67dfc1e6bdb917a7051374360458a360_0","old_fingerprint":"67dfc1e6bdb917a7051374360458a360_37","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":37,"end":79}},"sink":{"start":59,"end":59,"column":{"start":37,"end":79},"content":""},"parent_line_number":59,"fingerprint":"2aab100c880f0cb1daa1e356221b5912_0","old_fingerprint":"2aab100c880f0cb1daa1e356221b5912_15","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":37,"end":79}},"sink":{"start":72,"end":72,"column":{"start":37,"end":79},"content":""},"parent_line_number":72,"fingerprint":"d8c17c8cb779fb9a6fea49fc159974f5_0","old_fingerprint":"d8c17c8cb779fb9a6fea49fc159974f5_39","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":37,"end":79}},"sink":{"start":72,"end":72,"column":{"start":37,"end":79},"content":""},"parent_line_number":72,"fingerprint":"97d5ed5356176c93d3f8b5b43da6e3a6_0","old_fingerprint":"97d5ed5356176c93d3f8b5b43da6e3a6_40","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":37,"end":79}},"sink":{"start":58,"end":58,"column":{"start":37,"end":79},"content":""},"parent_line_number":58,"fingerprint":"4fb6e6fc09362c4f4fd5d6d955e371b9_0","old_fingerprint":"4fb6e6fc09362c4f4fd5d6d955e371b9_12","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01021.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01021.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"cd245ff463dff8a1dc45ad62cbdf6583_0","old_fingerprint":"cd245ff463dff8a1dc45ad62cbdf6583_30","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01022.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01022.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"23c145cbed2e576589d935372b699dba_0","old_fingerprint":"23c145cbed2e576589d935372b699dba_27","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"a259f7df9811830993ca3c0d4a5e914b_0","old_fingerprint":"a259f7df9811830993ca3c0d4a5e914b_28","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"e9e83e35a60e2e508b342834645d95f6_0","old_fingerprint":"e9e83e35a60e2e508b342834645d95f6_29","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"80968efd8943c0173fb1c1b5efefc559_0","old_fingerprint":"80968efd8943c0173fb1c1b5efefc559_26","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01108.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01108.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":37,"end":79}},"sink":{"start":78,"end":78,"column":{"start":37,"end":79},"content":""},"parent_line_number":78,"fingerprint":"95ee4c9a7d4ecb7eeafc2510e8d8ef2f_0","old_fingerprint":"95ee4c9a7d4ecb7eeafc2510e8d8ef2f_52","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01153.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01153.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":37,"end":79}},"sink":{"start":70,"end":70,"column":{"start":37,"end":79},"content":""},"parent_line_number":70,"fingerprint":"bec927f468d8b55ee4b40b5323c3b23e_0","old_fingerprint":"bec927f468d8b55ee4b40b5323c3b23e_36","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":37,"end":79}},"sink":{"start":53,"end":53,"column":{"start":37,"end":79},"content":""},"parent_line_number":53,"fingerprint":"6aba30efae405f451af585433e5abf8a_0","old_fingerprint":"6aba30efae405f451af585433e5abf8a_1","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":37,"end":79}},"sink":{"start":57,"end":57,"column":{"start":37,"end":79},"content":""},"parent_line_number":57,"fingerprint":"6aa0c4bf99ace14416c075e13ad1282f_0","old_fingerprint":"6aa0c4bf99ace14416c075e13ad1282f_11","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01401.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01401.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":79}},"sink":{"start":77,"end":77,"column":{"start":37,"end":79},"content":""},"parent_line_number":77,"fingerprint":"69120c1c443fce9a9a0529de2fadc8ee_0","old_fingerprint":"69120c1c443fce9a9a0529de2fadc8ee_47","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":37,"end":79}},"sink":{"start":55,"end":55,"column":{"start":37,"end":79},"content":""},"parent_line_number":55,"fingerprint":"06fbd5958f463b94e06ccae97f9a511e_0","old_fingerprint":"06fbd5958f463b94e06ccae97f9a511e_6","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":37,"end":79}},"sink":{"start":55,"end":55,"column":{"start":37,"end":79},"content":""},"parent_line_number":55,"fingerprint":"575c7d4a037cedbf6772a1fce317aa51_0","old_fingerprint":"575c7d4a037cedbf6772a1fce317aa51_8","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01567.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01567.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":37,"end":79}},"sink":{"start":65,"end":65,"column":{"start":37,"end":79},"content":""},"parent_line_number":65,"fingerprint":"b231d65bd7c0395ab5ea0c52c36e273e_0","old_fingerprint":"b231d65bd7c0395ab5ea0c52c36e273e_24","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":79}},"sink":{"start":77,"end":77,"column":{"start":37,"end":79},"content":""},"parent_line_number":77,"fingerprint":"5ec8f1c8fce400c712ed7e71d80ab583_0","old_fingerprint":"5ec8f1c8fce400c712ed7e71d80ab583_46","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":37,"end":79}},"sink":{"start":54,"end":54,"column":{"start":37,"end":79},"content":""},"parent_line_number":54,"fingerprint":"28cf570fe217a1801857e03a81b514a9_0","old_fingerprint":"28cf570fe217a1801857e03a81b514a9_4","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":37,"end":79}},"sink":{"start":54,"end":54,"column":{"start":37,"end":79},"content":""},"parent_line_number":54,"fingerprint":"ba1125f2f28f52e1fae73d644c58c1cd_0","old_fingerprint":"ba1125f2f28f52e1fae73d644c58c1cd_5","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":37,"end":79}},"sink":{"start":54,"end":54,"column":{"start":37,"end":79},"content":""},"parent_line_number":54,"fingerprint":"ea68a9666b00b43d267a6a6d12ad27cb_0","old_fingerprint":"ea68a9666b00b43d267a6a6d12ad27cb_2","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":37,"end":79}},"sink":{"start":72,"end":72,"column":{"start":37,"end":79},"content":""},"parent_line_number":72,"fingerprint":"4ca359cff96ec41945ba33a68529494a_0","old_fingerprint":"4ca359cff96ec41945ba33a68529494a_38","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":37,"end":79}},"sink":{"start":72,"end":72,"column":{"start":37,"end":79},"content":""},"parent_line_number":72,"fingerprint":"ad83d7847f660bc8c0ace6ee901d559d_0","old_fingerprint":"ad83d7847f660bc8c0ace6ee901d559d_42","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":37,"end":79}},"sink":{"start":58,"end":58,"column":{"start":37,"end":79},"content":""},"parent_line_number":58,"fingerprint":"71a7339025b0a1d2a9489f332ad2c7e6_0","old_fingerprint":"71a7339025b0a1d2a9489f332ad2c7e6_14","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01901.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01901.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"a372921867d3ed473f4bb208045019b8_0","old_fingerprint":"a372921867d3ed473f4bb208045019b8_34","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"d27e025118674c105cd4ae39bdd6cd35_0","old_fingerprint":"d27e025118674c105cd4ae39bdd6cd35_33","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":79}},"sink":{"start":68,"end":68,"column":{"start":37,"end":79},"content":""},"parent_line_number":68,"fingerprint":"4e0619d970f1a705d3be84d422dc89cb_0","old_fingerprint":"4e0619d970f1a705d3be84d422dc89cb_32","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01982.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01982.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":37,"end":79}},"sink":{"start":78,"end":78,"column":{"start":37,"end":79},"content":""},"parent_line_number":78,"fingerprint":"eb3424d78584742c7fcaf6e7be5f3205_0","old_fingerprint":"eb3424d78584742c7fcaf6e7be5f3205_50","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":79}},"sink":{"start":60,"end":60,"column":{"start":37,"end":79},"content":""},"parent_line_number":60,"fingerprint":"cf7552222449abe56090f66fc0dd05bf_0","old_fingerprint":"cf7552222449abe56090f66fc0dd05bf_16","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":79}},"sink":{"start":60,"end":60,"column":{"start":37,"end":79},"content":""},"parent_line_number":60,"fingerprint":"7250a361a5bcbf9eef4dc057490e0ecf_0","old_fingerprint":"7250a361a5bcbf9eef4dc057490e0ecf_19","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02024.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02024.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":37,"end":79}},"sink":{"start":70,"end":70,"column":{"start":37,"end":79},"content":""},"parent_line_number":70,"fingerprint":"120c211cc47fe2e05ffb126ba0254258_0","old_fingerprint":"120c211cc47fe2e05ffb126ba0254258_35","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02103.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02103.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":79}},"sink":{"start":63,"end":63,"column":{"start":37,"end":79},"content":""},"parent_line_number":63,"fingerprint":"13f4421565c9a9469e0800cebb52b374_0","old_fingerprint":"13f4421565c9a9469e0800cebb52b374_22","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02296.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02296.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":79}},"sink":{"start":77,"end":77,"column":{"start":37,"end":79},"content":""},"parent_line_number":77,"fingerprint":"1327620219e37bf84eb2c1dc27e40d0e_0","old_fingerprint":"1327620219e37bf84eb2c1dc27e40d0e_45","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02297.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02297.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":79}},"sink":{"start":77,"end":77,"column":{"start":37,"end":79},"content":""},"parent_line_number":77,"fingerprint":"0e3f86215a57632f2e1d0d76e66cae46_0","old_fingerprint":"0e3f86215a57632f2e1d0d76e66cae46_49","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02298.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02298.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":79}},"sink":{"start":77,"end":77,"column":{"start":37,"end":79},"content":""},"parent_line_number":77,"fingerprint":"954cedd5263f6d8067a0d51aa0d84e07_0","old_fingerprint":"954cedd5263f6d8067a0d51aa0d84e07_48","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":37,"end":79}},"sink":{"start":55,"end":55,"column":{"start":37,"end":79},"content":""},"parent_line_number":55,"fingerprint":"4301f0351d9e88fd1ba7325a36ccf087_0","old_fingerprint":"4301f0351d9e88fd1ba7325a36ccf087_7","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02552.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02552.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":37,"end":79}},"sink":{"start":87,"end":87,"column":{"start":37,"end":79},"content":""},"parent_line_number":87,"fingerprint":"29e305f0150059d4300100bf482d9652_0","old_fingerprint":"29e305f0150059d4300100bf482d9652_57","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["327"],"id":"java_lang_weak_encryption_ecb_mode","title":"Usage of ECB cipher mode","description":"## Description\n\nThe ECB (Electronic Codebook) cipher mode is recognized as insecure and is not recommended for use in cryptographic protocols. This mode does not provide adequate data protection because it encrypts identical plaintext blocks into identical ciphertext blocks, making it vulnerable to pattern analysis. For stronger security, it's essential to use encryption algorithms that have built-in message integrity and do not require a mode of operation to be configured, such as ChaCha20-Poly1305 or, for older applications that do not support this, AES-256-GCM.\n\n## Remediations\n\n- **Do** choose ChaCha20-Poly1305 or AES-256-GCM for encryption. These algorithms include built-in message integrity, offering a more secure alternative to ECB mode.\n  ```java\n  Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_encryption_ecb_mode","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":37,"end":79}},"sink":{"start":54,"end":54,"column":{"start":37,"end":79},"content":""},"parent_line_number":54,"fingerprint":"455e204b89ce63786335266985b9613f_0","old_fingerprint":"455e204b89ce63786335266985b9613f_3","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00013.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00013.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":69}},"sink":{"start":56,"end":56,"column":{"start":9,"end":69},"content":""},"parent_line_number":56,"fingerprint":"ab5eeac24ddb3a5807ebabe50bc45708_0","old_fingerprint":"ab5eeac24ddb3a5807ebabe50bc45708_68","code_extract":"        response.getWriter().format(java.util.Locale.US, param, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00014.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00014.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":48}},"sink":{"start":56,"end":56,"column":{"start":9,"end":48},"content":""},"parent_line_number":56,"fingerprint":"8218549d082189dd05de2829bf954a91_0","old_fingerprint":"8218549d082189dd05de2829bf954a91_67","code_extract":"        response.getWriter().format(param, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00030.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00030.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":48}},"sink":{"start":53,"end":53,"column":{"start":9,"end":48},"content":""},"parent_line_number":53,"fingerprint":"c61c271f2f67d0c35eafe04cf59d5bce_0","old_fingerprint":"c61c271f2f67d0c35eafe04cf59d5bce_2","code_extract":"        response.getWriter().printf(param, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00036.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00036.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":71}},"sink":{"start":65,"end":65,"column":{"start":13,"end":71},"content":""},"parent_line_number":65,"fingerprint":"501bbc76e9cea465472778aaef03f6ff_0","old_fingerprint":"501bbc76e9cea465472778aaef03f6ff_160","code_extract":"            response.getWriter().write(param.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00047.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00047.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":48}},"sink":{"start":73,"end":73,"column":{"start":9,"end":48},"content":""},"parent_line_number":73,"fingerprint":"e429b52490a94aca11a3a1d6e5f589f1_0","old_fingerprint":"e429b52490a94aca11a3a1d6e5f589f1_183","code_extract":"        response.getWriter().format(param, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00048.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00048.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":9,"end":56}},"sink":{"start":72,"end":72,"column":{"start":9,"end":56},"content":""},"parent_line_number":72,"fingerprint":"a4cb430e32a0b7f433db2c3a31214c3d_0","old_fingerprint":"a4cb430e32a0b7f433db2c3a31214c3d_179","code_extract":"        response.getWriter().print(param.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00049.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00049.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":9,"end":64}},"sink":{"start":72,"end":72,"column":{"start":9,"end":64},"content":""},"parent_line_number":72,"fingerprint":"0cb121aad3ab221d9b130d0ab8df9621_0","old_fingerprint":"0cb121aad3ab221d9b130d0ab8df9621_178","code_extract":"        response.getWriter().write(\"Parameter value: \" + param);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":88}},"sink":{"start":89,"end":89,"column":{"start":13,"end":88},"content":""},"parent_line_number":89,"fingerprint":"46939fd8859973e048ac110a9bfd3b12_0","old_fingerprint":"46939fd8859973e048ac110a9bfd3b12_238","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00146.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00146.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":9,"end":67}},"sink":{"start":59,"end":59,"column":{"start":9,"end":67},"content":""},"parent_line_number":59,"fingerprint":"4697d0e3b5561d0c7195b3e07ba63cae_0","old_fingerprint":"4697d0e3b5561d0c7195b3e07ba63cae_116","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00149.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00149.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":96}},"sink":{"start":56,"end":56,"column":{"start":9,"end":96},"content":""},"parent_line_number":56,"fingerprint":"dae816a58a69310bc0af930efe20679f_0","old_fingerprint":"dae816a58a69310bc0af930efe20679f_69","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00155.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00155.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":42}},"sink":{"start":56,"end":56,"column":{"start":9,"end":42},"content":""},"parent_line_number":56,"fingerprint":"97e9ab49a493e6a12a1f54c97a6537ac_0","old_fingerprint":"97e9ab49a493e6a12a1f54c97a6537ac_83","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00157.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00157.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":9,"end":40}},"sink":{"start":59,"end":59,"column":{"start":9,"end":40},"content":""},"parent_line_number":59,"fingerprint":"b41376f6ae67a984b402f0bd5746c1c0_0","old_fingerprint":"b41376f6ae67a984b402f0bd5746c1c0_103","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":13,"end":73}},"sink":{"start":62,"end":62,"column":{"start":13,"end":73},"content":""},"parent_line_number":62,"fingerprint":"a948eca6014f6d1f724a246ba912530e_0","old_fingerprint":"a948eca6014f6d1f724a246ba912530e_126","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":88}},"sink":{"start":77,"end":77,"column":{"start":13,"end":88},"content":""},"parent_line_number":77,"fingerprint":"3abbb5e74fcb2be58b8c70dcde6c9c6a_0","old_fingerprint":"3abbb5e74fcb2be58b8c70dcde6c9c6a_229","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00276.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00276.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":9,"end":40}},"sink":{"start":61,"end":61,"column":{"start":9,"end":40},"content":""},"parent_line_number":61,"fingerprint":"3dd0eddf00993205afbc7fe0d08deb9e_0","old_fingerprint":"3dd0eddf00993205afbc7fe0d08deb9e_123","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00278.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00278.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":40}},"sink":{"start":56,"end":56,"column":{"start":9,"end":40},"content":""},"parent_line_number":56,"fingerprint":"53af7eae1d3d04c48e02048754879462_0","old_fingerprint":"53af7eae1d3d04c48e02048754879462_81","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00281.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00281.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":9,"end":67}},"sink":{"start":62,"end":62,"column":{"start":9,"end":67},"content":""},"parent_line_number":62,"fingerprint":"113af181c29b4cc7b531f5f0fde03a16_0","old_fingerprint":"113af181c29b4cc7b531f5f0fde03a16_127","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00284.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00284.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":42}},"sink":{"start":56,"end":56,"column":{"start":9,"end":42},"content":""},"parent_line_number":56,"fingerprint":"85be15d4f85c955f294bbf0e5b35b99d_0","old_fingerprint":"85be15d4f85c955f294bbf0e5b35b99d_82","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00286.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00286.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":54}},"sink":{"start":56,"end":56,"column":{"start":9,"end":54},"content":""},"parent_line_number":56,"fingerprint":"cea5c21913c801b59a50c52c0893bb37_0","old_fingerprint":"cea5c21913c801b59a50c52c0893bb37_84","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00287.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00287.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":69}},"sink":{"start":59,"end":59,"column":{"start":13,"end":69},"content":""},"parent_line_number":59,"fingerprint":"0ba874ffb8bd6b30725679899d9b9931_0","old_fingerprint":"0ba874ffb8bd6b30725679899d9b9931_114","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00290.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00290.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":40}},"sink":{"start":57,"end":57,"column":{"start":9,"end":40},"content":""},"parent_line_number":57,"fingerprint":"3120e496c1dd105cc42d4e20ca31731b_0","old_fingerprint":"3120e496c1dd105cc42d4e20ca31731b_89","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00291.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00291.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":9,"end":40}},"sink":{"start":59,"end":59,"column":{"start":9,"end":40},"content":""},"parent_line_number":59,"fingerprint":"876f0d3e413c8a61d61823d0093c8e69_0","old_fingerprint":"876f0d3e413c8a61d61823d0093c8e69_113","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00292.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00292.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":13,"end":55}},"sink":{"start":62,"end":62,"column":{"start":13,"end":55},"content":""},"parent_line_number":62,"fingerprint":"ae533d5385d4f2ee3a6b2ef43439e6d6_0","old_fingerprint":"ae533d5385d4f2ee3a6b2ef43439e6d6_125","code_extract":"            response.getWriter().write(bar, 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":89}},"sink":{"start":67,"end":67,"column":{"start":13,"end":89},"content":""},"parent_line_number":67,"fingerprint":"615ff43fe61b79d1cda10f6b46824b92_0","old_fingerprint":"615ff43fe61b79d1cda10f6b46824b92_168","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00469.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00469.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":9,"end":46}},"sink":{"start":59,"end":59,"column":{"start":9,"end":46},"content":""},"parent_line_number":59,"fingerprint":"e7bb65b546ff69a11c59b9ad2c96ab0e_0","old_fingerprint":"e7bb65b546ff69a11c59b9ad2c96ab0e_104","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00471.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00471.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":96}},"sink":{"start":54,"end":54,"column":{"start":9,"end":96},"content":""},"parent_line_number":54,"fingerprint":"3823fd968491d5bc0ba0a62ddfaff7eb_0","old_fingerprint":"3823fd968491d5bc0ba0a62ddfaff7eb_34","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00473.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00473.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":9,"end":46}},"sink":{"start":61,"end":61,"column":{"start":9,"end":46},"content":""},"parent_line_number":61,"fingerprint":"a40f927e5a0db3faa2ad5420020a2c2a_0","old_fingerprint":"a40f927e5a0db3faa2ad5420020a2c2a_124","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00474.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00474.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"0b6e1930487147e1bbabfd3710191c04_0","old_fingerprint":"0b6e1930487147e1bbabfd3710191c04_0","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00476.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00476.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":9,"end":42}},"sink":{"start":58,"end":58,"column":{"start":9,"end":42},"content":""},"parent_line_number":58,"fingerprint":"13fb515f6176152246db24f8d863aaba_0","old_fingerprint":"13fb515f6176152246db24f8d863aaba_102","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00477.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00477.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":42}},"sink":{"start":54,"end":54,"column":{"start":9,"end":42},"content":""},"parent_line_number":54,"fingerprint":"9a46495caf76531df2f23ae83edb8261_0","old_fingerprint":"9a46495caf76531df2f23ae83edb8261_23","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00478.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00478.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":9,"end":54}},"sink":{"start":60,"end":60,"column":{"start":9,"end":54},"content":""},"parent_line_number":60,"fingerprint":"5318ca9beb0b0f93cb50309afa3929e9_0","old_fingerprint":"5318ca9beb0b0f93cb50309afa3929e9_119","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00492.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00492.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":62}},"sink":{"start":55,"end":55,"column":{"start":9,"end":62},"content":""},"parent_line_number":55,"fingerprint":"d0c6edd4ab41f0068f9282c1f49ae516_0","old_fingerprint":"d0c6edd4ab41f0068f9282c1f49ae516_59","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":13,"end":88}},"sink":{"start":74,"end":74,"column":{"start":13,"end":88},"content":""},"parent_line_number":74,"fingerprint":"29e6b509cbaac07e64eacb362f349ef8_0","old_fingerprint":"29e6b509cbaac07e64eacb362f349ef8_209","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00541.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00541.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":9,"end":67}},"sink":{"start":71,"end":71,"column":{"start":9,"end":67},"content":""},"parent_line_number":71,"fingerprint":"876055c4530cb899ffa9216827ffdfd2_0","old_fingerprint":"876055c4530cb899ffa9216827ffdfd2_175","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00547.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00547.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":67}},"sink":{"start":65,"end":65,"column":{"start":9,"end":67},"content":""},"parent_line_number":65,"fingerprint":"376a1dc68203146047dbbade59ab9d1d_0","old_fingerprint":"376a1dc68203146047dbbade59ab9d1d_161","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00549.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00549.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":56}},"sink":{"start":68,"end":68,"column":{"start":9,"end":56},"content":""},"parent_line_number":68,"fingerprint":"30e72810fcb2e094740101aef258b4ea_0","old_fingerprint":"30e72810fcb2e094740101aef258b4ea_170","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00551.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00551.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":42}},"sink":{"start":63,"end":63,"column":{"start":9,"end":42},"content":""},"parent_line_number":63,"fingerprint":"d9fec5cdf6df1d0da27e60fe6d30bcca_0","old_fingerprint":"d9fec5cdf6df1d0da27e60fe6d30bcca_135","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00555.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00555.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":54}},"sink":{"start":68,"end":68,"column":{"start":9,"end":54},"content":""},"parent_line_number":68,"fingerprint":"3b167879de2dcead0fe552c836a81673_0","old_fingerprint":"3b167879de2dcead0fe552c836a81673_171","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00557.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00557.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":13,"end":55}},"sink":{"start":67,"end":67,"column":{"start":13,"end":55},"content":""},"parent_line_number":67,"fingerprint":"874be566f60d41675abb89ace1aad725_0","old_fingerprint":"874be566f60d41675abb89ace1aad725_169","code_extract":"            response.getWriter().write(bar, 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":13,"end":88}},"sink":{"start":81,"end":81,"column":{"start":13,"end":88},"content":""},"parent_line_number":81,"fingerprint":"d8c35a2b1d50371957381fc9dbe128ca_0","old_fingerprint":"d8c35a2b1d50371957381fc9dbe128ca_234","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00801.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00801.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":46}},"sink":{"start":74,"end":74,"column":{"start":9,"end":46},"content":""},"parent_line_number":74,"fingerprint":"2c745759a145728a732e1b192d9d939d_0","old_fingerprint":"2c745759a145728a732e1b192d9d939d_208","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00802.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00802.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":9,"end":54}},"sink":{"start":80,"end":80,"column":{"start":9,"end":54},"content":""},"parent_line_number":80,"fingerprint":"cd9c8eee70b6dfd01a8022f0742eac16_0","old_fingerprint":"cd9c8eee70b6dfd01a8022f0742eac16_232","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00803.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00803.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"c28b75edb2903ca418bf63922aba2ae1_0","old_fingerprint":"c28b75edb2903ca418bf63922aba2ae1_188","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00804.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00804.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":40}},"sink":{"start":74,"end":74,"column":{"start":9,"end":40},"content":""},"parent_line_number":74,"fingerprint":"2578601b1095bb50381036114eeb52cc_0","old_fingerprint":"2578601b1095bb50381036114eeb52cc_210","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00807.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00807.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":9,"end":67}},"sink":{"start":75,"end":75,"column":{"start":9,"end":67},"content":""},"parent_line_number":75,"fingerprint":"6ffa35331c8c4a703e412fee85bf4c03_0","old_fingerprint":"6ffa35331c8c4a703e412fee85bf4c03_225","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00810.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00810.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":56}},"sink":{"start":74,"end":74,"column":{"start":9,"end":56},"content":""},"parent_line_number":74,"fingerprint":"1487e1edd96beb49b2c0ad60cbc34bce_0","old_fingerprint":"1487e1edd96beb49b2c0ad60cbc34bce_218","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00812.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00812.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":9,"end":42}},"sink":{"start":78,"end":78,"column":{"start":9,"end":42},"content":""},"parent_line_number":78,"fingerprint":"43b8629e0047e0aaf2591bc7da61d50c_0","old_fingerprint":"43b8629e0047e0aaf2591bc7da61d50c_230","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00813.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00813.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":13,"end":55}},"sink":{"start":81,"end":81,"column":{"start":13,"end":55},"content":""},"parent_line_number":81,"fingerprint":"18d47b446b631b9c5be90d5e2300a3b2_0","old_fingerprint":"18d47b446b631b9c5be90d5e2300a3b2_233","code_extract":"            response.getWriter().write(bar, 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":13,"end":89}},"sink":{"start":74,"end":74,"column":{"start":13,"end":89},"content":""},"parent_line_number":74,"fingerprint":"035aebb73f764dd94ca3210e194e52e5_0","old_fingerprint":"035aebb73f764dd94ca3210e194e52e5_207","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":88}},"sink":{"start":84,"end":84,"column":{"start":13,"end":88},"content":""},"parent_line_number":84,"fingerprint":"d5d009c20ee7a63903d72190999933e0_0","old_fingerprint":"d5d009c20ee7a63903d72190999933e0_236","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01046.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01046.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":79}},"sink":{"start":57,"end":57,"column":{"start":9,"end":79},"content":""},"parent_line_number":57,"fingerprint":"789327f316b375d4d5b1e84b8f50a18a_0","old_fingerprint":"789327f316b375d4d5b1e84b8f50a18a_87","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01047.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01047.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":79}},"sink":{"start":57,"end":57,"column":{"start":9,"end":79},"content":""},"parent_line_number":57,"fingerprint":"e46c4405880cbd9e92639444d616e06a_0","old_fingerprint":"e46c4405880cbd9e92639444d616e06a_101","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01048.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01048.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":67}},"sink":{"start":55,"end":55,"column":{"start":9,"end":67},"content":""},"parent_line_number":55,"fingerprint":"72a70c1154e1dbebce9ce514a70aa354_0","old_fingerprint":"72a70c1154e1dbebce9ce514a70aa354_50","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01049.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01049.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":75}},"sink":{"start":55,"end":55,"column":{"start":9,"end":75},"content":""},"parent_line_number":55,"fingerprint":"61cae0ff71410bcacc7128ef4a0b1d71_0","old_fingerprint":"61cae0ff71410bcacc7128ef4a0b1d71_51","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01050.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01050.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":40}},"sink":{"start":54,"end":54,"column":{"start":9,"end":40},"content":""},"parent_line_number":54,"fingerprint":"2df618a17e14b0b40508cb13c4218937_0","old_fingerprint":"2df618a17e14b0b40508cb13c4218937_22","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01051.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01051.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":75}},"sink":{"start":55,"end":55,"column":{"start":9,"end":75},"content":""},"parent_line_number":55,"fingerprint":"5794806bd0a6258c5d4ddf380d116f7e_0","old_fingerprint":"5794806bd0a6258c5d4ddf380d116f7e_53","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01052.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01052.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":46}},"sink":{"start":55,"end":55,"column":{"start":9,"end":46},"content":""},"parent_line_number":55,"fingerprint":"25b03399abc37d73dd14475fe906ea80_0","old_fingerprint":"25b03399abc37d73dd14475fe906ea80_54","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01053.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01053.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":42}},"sink":{"start":54,"end":54,"column":{"start":9,"end":42},"content":""},"parent_line_number":54,"fingerprint":"39f27ef7fb95d8a1b439e45a30c69308_0","old_fingerprint":"39f27ef7fb95d8a1b439e45a30c69308_33","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01054.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01054.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":42}},"sink":{"start":54,"end":54,"column":{"start":9,"end":42},"content":""},"parent_line_number":54,"fingerprint":"85f00f61cfcf3fa0be884c45ec26121e_0","old_fingerprint":"85f00f61cfcf3fa0be884c45ec26121e_32","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01055.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01055.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":42}},"sink":{"start":54,"end":54,"column":{"start":9,"end":42},"content":""},"parent_line_number":54,"fingerprint":"c7c2c9c6ffce0611d21bfa32631f5092_0","old_fingerprint":"c7c2c9c6ffce0611d21bfa32631f5092_31","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01056.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01056.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":13,"end":69}},"sink":{"start":57,"end":57,"column":{"start":13,"end":69},"content":""},"parent_line_number":57,"fingerprint":"28018c87c6f1c411fc68fc1223d520aa_0","old_fingerprint":"28018c87c6f1c411fc68fc1223d520aa_90","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01057.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01057.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":40}},"sink":{"start":54,"end":54,"column":{"start":9,"end":40},"content":""},"parent_line_number":54,"fingerprint":"a6db171cd3fd80e38501d4804bc5deb8_0","old_fingerprint":"a6db171cd3fd80e38501d4804bc5deb8_29","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01063.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01063.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":62}},"sink":{"start":54,"end":54,"column":{"start":9,"end":62},"content":""},"parent_line_number":54,"fingerprint":"c8d57679621caec298e6a9eca36517e2_0","old_fingerprint":"c8d57679621caec298e6a9eca36517e2_28","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":73}},"sink":{"start":60,"end":60,"column":{"start":13,"end":73},"content":""},"parent_line_number":60,"fingerprint":"e83968f118519350ae83d43a1e1d301f_0","old_fingerprint":"e83968f118519350ae83d43a1e1d301f_122","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":89}},"sink":{"start":60,"end":60,"column":{"start":13,"end":89},"content":""},"parent_line_number":60,"fingerprint":"b739eb413a51a1a97dd8213ec532bb44_0","old_fingerprint":"b739eb413a51a1a97dd8213ec532bb44_120","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01171.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01171.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":67}},"sink":{"start":57,"end":57,"column":{"start":9,"end":67},"content":""},"parent_line_number":57,"fingerprint":"0ebab800226f19cbf36ca25b1b9e991b_0","old_fingerprint":"0ebab800226f19cbf36ca25b1b9e991b_98","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01172.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01172.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":75}},"sink":{"start":57,"end":57,"column":{"start":9,"end":75},"content":""},"parent_line_number":57,"fingerprint":"96cdff58af6c5bdd68516130286b65da_0","old_fingerprint":"96cdff58af6c5bdd68516130286b65da_96","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01173.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01173.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":40}},"sink":{"start":56,"end":56,"column":{"start":9,"end":40},"content":""},"parent_line_number":56,"fingerprint":"5a14ee2be4c635110687542222e8fd8c_0","old_fingerprint":"5a14ee2be4c635110687542222e8fd8c_65","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01174.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01174.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":40}},"sink":{"start":56,"end":56,"column":{"start":9,"end":40},"content":""},"parent_line_number":56,"fingerprint":"72acc4f72d3f61500125234839681fc9_0","old_fingerprint":"72acc4f72d3f61500125234839681fc9_66","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01175.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01175.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":96}},"sink":{"start":57,"end":57,"column":{"start":9,"end":96},"content":""},"parent_line_number":57,"fingerprint":"68914d9dc6cb649517625ebbca64c021_0","old_fingerprint":"68914d9dc6cb649517625ebbca64c021_93","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01176.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01176.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":96}},"sink":{"start":57,"end":57,"column":{"start":9,"end":96},"content":""},"parent_line_number":57,"fingerprint":"d764f88414016b2ccd648fbacf90612a_0","old_fingerprint":"d764f88414016b2ccd648fbacf90612a_86","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01177.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01177.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":96}},"sink":{"start":57,"end":57,"column":{"start":9,"end":96},"content":""},"parent_line_number":57,"fingerprint":"2370833ff99606dd89f67aa41c0995cb_0","old_fingerprint":"2370833ff99606dd89f67aa41c0995cb_97","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01178.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01178.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":56}},"sink":{"start":56,"end":56,"column":{"start":9,"end":56},"content":""},"parent_line_number":56,"fingerprint":"2ba9471ff733135829fe8240773f15be_0","old_fingerprint":"2ba9471ff733135829fe8240773f15be_70","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01179.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01179.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":42}},"sink":{"start":56,"end":56,"column":{"start":9,"end":42},"content":""},"parent_line_number":56,"fingerprint":"2ac0b4c3de1ed6e0a7f057b68888ec04_0","old_fingerprint":"2ac0b4c3de1ed6e0a7f057b68888ec04_71","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01180.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01180.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":42}},"sink":{"start":56,"end":56,"column":{"start":9,"end":42},"content":""},"parent_line_number":56,"fingerprint":"7db955121a4e4417f114b29a9e7996f3_0","old_fingerprint":"7db955121a4e4417f114b29a9e7996f3_72","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01181.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01181.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":54}},"sink":{"start":56,"end":56,"column":{"start":9,"end":54},"content":""},"parent_line_number":56,"fingerprint":"0eed51e01419b4a2e05e255b5aaa2fe8_0","old_fingerprint":"0eed51e01419b4a2e05e255b5aaa2fe8_73","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01188.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01188.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":62}},"sink":{"start":56,"end":56,"column":{"start":9,"end":62},"content":""},"parent_line_number":56,"fingerprint":"dbdf35668aa303625254f1fa26bc0f1f_0","old_fingerprint":"dbdf35668aa303625254f1fa26bc0f1f_63","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":13,"end":89}},"sink":{"start":62,"end":62,"column":{"start":13,"end":89},"content":""},"parent_line_number":62,"fingerprint":"03677cf73da3b2a04814220abe5ca35a_0","old_fingerprint":"03677cf73da3b2a04814220abe5ca35a_128","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":88}},"sink":{"start":72,"end":72,"column":{"start":13,"end":88},"content":""},"parent_line_number":72,"fingerprint":"75906414af91be0762cc58456478d9df_0","old_fingerprint":"75906414af91be0762cc58456478d9df_176","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":88}},"sink":{"start":72,"end":72,"column":{"start":13,"end":88},"content":""},"parent_line_number":72,"fingerprint":"6e57903dcd7b8b4960a6430e39e091bb_0","old_fingerprint":"6e57903dcd7b8b4960a6430e39e091bb_177","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01335.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01335.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":79}},"sink":{"start":56,"end":56,"column":{"start":9,"end":79},"content":""},"parent_line_number":56,"fingerprint":"4925e56172754010c112052bbee63ec1_0","old_fingerprint":"4925e56172754010c112052bbee63ec1_80","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01336.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01336.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":67}},"sink":{"start":54,"end":54,"column":{"start":9,"end":67},"content":""},"parent_line_number":54,"fingerprint":"a5020415d3957f1c9866672027b83f6e_0","old_fingerprint":"a5020415d3957f1c9866672027b83f6e_27","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01337.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01337.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":46}},"sink":{"start":54,"end":54,"column":{"start":9,"end":46},"content":""},"parent_line_number":54,"fingerprint":"a29ba4d222aeb1e8d7bdcbbe9cd96934_0","old_fingerprint":"a29ba4d222aeb1e8d7bdcbbe9cd96934_30","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01338.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01338.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":54}},"sink":{"start":53,"end":53,"column":{"start":9,"end":54},"content":""},"parent_line_number":53,"fingerprint":"19dbec441b418fb3779107dae6d21da1_0","old_fingerprint":"19dbec441b418fb3779107dae6d21da1_20","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01339.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01339.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":54}},"sink":{"start":53,"end":53,"column":{"start":9,"end":54},"content":""},"parent_line_number":53,"fingerprint":"d24496c99335adc1a055c762bdcd78c5_0","old_fingerprint":"d24496c99335adc1a055c762bdcd78c5_19","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01340.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01340.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":40}},"sink":{"start":53,"end":53,"column":{"start":9,"end":40},"content":""},"parent_line_number":53,"fingerprint":"63eced9e21a351d5dc0c335dc254803a_0","old_fingerprint":"63eced9e21a351d5dc0c335dc254803a_18","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01341.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01341.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":96}},"sink":{"start":54,"end":54,"column":{"start":9,"end":96},"content":""},"parent_line_number":54,"fingerprint":"24d618207c23be08d65b8f93e33766e1_0","old_fingerprint":"24d618207c23be08d65b8f93e33766e1_49","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01342.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01342.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":96}},"sink":{"start":54,"end":54,"column":{"start":9,"end":96},"content":""},"parent_line_number":54,"fingerprint":"1f04bd522cf3b6fce52e7b1257fa4729_0","old_fingerprint":"1f04bd522cf3b6fce52e7b1257fa4729_48","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01343.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01343.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":67}},"sink":{"start":54,"end":54,"column":{"start":9,"end":67},"content":""},"parent_line_number":54,"fingerprint":"64125128dfd09e9d1b354f5ae50ae04f_0","old_fingerprint":"64125128dfd09e9d1b354f5ae50ae04f_44","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01344.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01344.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":67}},"sink":{"start":54,"end":54,"column":{"start":9,"end":67},"content":""},"parent_line_number":54,"fingerprint":"13fe2fdba22aac33de04c3b53685917e_0","old_fingerprint":"13fe2fdba22aac33de04c3b53685917e_43","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01345.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01345.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"e8bfed63150990b067c80865688f3506_0","old_fingerprint":"e8bfed63150990b067c80865688f3506_17","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01346.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01346.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"983bad05edc6640f4c4f604fba60aece_0","old_fingerprint":"983bad05edc6640f4c4f604fba60aece_16","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01347.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01347.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"a1812266936ed2173c4264576dac4515_0","old_fingerprint":"a1812266936ed2173c4264576dac4515_15","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01348.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01348.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"b4ab54675047977605b8b4108a0dd277_0","old_fingerprint":"b4ab54675047977605b8b4108a0dd277_14","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01349.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01349.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"4c3555c609768834cf4e82678c290fc5_0","old_fingerprint":"4c3555c609768834cf4e82678c290fc5_13","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01350.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01350.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":69}},"sink":{"start":56,"end":56,"column":{"start":13,"end":69},"content":""},"parent_line_number":56,"fingerprint":"58e24b5edaa5cb3d6445a835684d7b3e_0","old_fingerprint":"58e24b5edaa5cb3d6445a835684d7b3e_77","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01351.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01351.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":13,"end":69}},"sink":{"start":56,"end":56,"column":{"start":13,"end":69},"content":""},"parent_line_number":56,"fingerprint":"ab0145389c834d784ae0681627f8f252_0","old_fingerprint":"ab0145389c834d784ae0681627f8f252_64","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01352.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01352.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":40}},"sink":{"start":53,"end":53,"column":{"start":9,"end":40},"content":""},"parent_line_number":53,"fingerprint":"dc81b1225cc32785774850d4b5e76d96_0","old_fingerprint":"dc81b1225cc32785774850d4b5e76d96_12","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":73}},"sink":{"start":59,"end":59,"column":{"start":13,"end":73},"content":""},"parent_line_number":59,"fingerprint":"7322228ff9186626a614f46341e9ca44_0","old_fingerprint":"7322228ff9186626a614f46341e9ca44_111","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":73}},"sink":{"start":59,"end":59,"column":{"start":13,"end":73},"content":""},"parent_line_number":59,"fingerprint":"9dffa7bd2ed87db3103e1409e3615760_0","old_fingerprint":"9dffa7bd2ed87db3103e1409e3615760_109","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":73}},"sink":{"start":59,"end":59,"column":{"start":13,"end":73},"content":""},"parent_line_number":59,"fingerprint":"52753a8616ec4ba0a819da4896dd46f8_0","old_fingerprint":"52753a8616ec4ba0a819da4896dd46f8_108","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":89}},"sink":{"start":59,"end":59,"column":{"start":13,"end":89},"content":""},"parent_line_number":59,"fingerprint":"89c8a65ed6e136b0d3b9ac369205a486_0","old_fingerprint":"89c8a65ed6e136b0d3b9ac369205a486_106","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":88}},"sink":{"start":69,"end":69,"column":{"start":13,"end":88},"content":""},"parent_line_number":69,"fingerprint":"b4a591f388998d6545133fea6c4cafac_0","old_fingerprint":"b4a591f388998d6545133fea6c4cafac_174","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01417.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01417.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":9,"end":79}},"sink":{"start":66,"end":66,"column":{"start":9,"end":79},"content":""},"parent_line_number":66,"fingerprint":"2d317ab831fa8b0940c2f0bb2abb7f19_0","old_fingerprint":"2d317ab831fa8b0940c2f0bb2abb7f19_164","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01418.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01418.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":67}},"sink":{"start":64,"end":64,"column":{"start":9,"end":67},"content":""},"parent_line_number":64,"fingerprint":"583cbb7f41a2a9154aea06892902cc9a_0","old_fingerprint":"583cbb7f41a2a9154aea06892902cc9a_152","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01419.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01419.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"2e2c0e4d07d6edbc23c1ddbe4db9fd0f_0","old_fingerprint":"2e2c0e4d07d6edbc23c1ddbe4db9fd0f_159","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01420.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01420.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":54}},"sink":{"start":63,"end":63,"column":{"start":9,"end":54},"content":""},"parent_line_number":63,"fingerprint":"7f5342234b0736d157e5862383ebdef2_0","old_fingerprint":"7f5342234b0736d157e5862383ebdef2_129","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01421.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01421.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":96}},"sink":{"start":64,"end":64,"column":{"start":9,"end":96},"content":""},"parent_line_number":64,"fingerprint":"ef314e6d3124a56fdf5f6361ada05b40_0","old_fingerprint":"ef314e6d3124a56fdf5f6361ada05b40_157","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01422.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01422.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":67}},"sink":{"start":64,"end":64,"column":{"start":9,"end":67},"content":""},"parent_line_number":64,"fingerprint":"00d9f8eff8331127de064098fd001c5b_0","old_fingerprint":"00d9f8eff8331127de064098fd001c5b_156","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01423.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01423.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"8efb2669adad3bc60d634c0f11d447f9_0","old_fingerprint":"8efb2669adad3bc60d634c0f11d447f9_155","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01424.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01424.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"91601ea9dc92c5395b1d029c80763360_0","old_fingerprint":"91601ea9dc92c5395b1d029c80763360_154","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01425.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01425.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":42}},"sink":{"start":63,"end":63,"column":{"start":9,"end":42},"content":""},"parent_line_number":63,"fingerprint":"cf10db02fbf0efb287e31b5ca426f100_0","old_fingerprint":"cf10db02fbf0efb287e31b5ca426f100_130","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01426.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01426.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":42}},"sink":{"start":63,"end":63,"column":{"start":9,"end":42},"content":""},"parent_line_number":63,"fingerprint":"7d0d8c82effdaae42204328ad523529d_0","old_fingerprint":"7d0d8c82effdaae42204328ad523529d_137","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01427.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01427.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":42}},"sink":{"start":63,"end":63,"column":{"start":9,"end":42},"content":""},"parent_line_number":63,"fingerprint":"62dfd2d6c0b34c6f86f39c04d5ea6a24_0","old_fingerprint":"62dfd2d6c0b34c6f86f39c04d5ea6a24_138","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01428.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01428.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":54}},"sink":{"start":63,"end":63,"column":{"start":9,"end":54},"content":""},"parent_line_number":63,"fingerprint":"e8e83109d05a32a0d72e6703f0bffbfd_0","old_fingerprint":"e8e83109d05a32a0d72e6703f0bffbfd_139","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01429.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01429.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":54}},"sink":{"start":63,"end":63,"column":{"start":9,"end":54},"content":""},"parent_line_number":63,"fingerprint":"088d38d12476160a171384b213e17051_0","old_fingerprint":"088d38d12476160a171384b213e17051_142","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01437.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01437.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":62}},"sink":{"start":63,"end":63,"column":{"start":9,"end":62},"content":""},"parent_line_number":63,"fingerprint":"786f766301f03e02ace0302cfd5959e6_0","old_fingerprint":"786f766301f03e02ace0302cfd5959e6_143","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01438.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01438.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":62}},"sink":{"start":63,"end":63,"column":{"start":9,"end":62},"content":""},"parent_line_number":63,"fingerprint":"abf866d75aba145f0a8680bb2b942c3b_0","old_fingerprint":"abf866d75aba145f0a8680bb2b942c3b_144","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01439.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01439.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":62}},"sink":{"start":63,"end":63,"column":{"start":9,"end":62},"content":""},"parent_line_number":63,"fingerprint":"9e114d587e7847fa7bd19adaf9686526_0","old_fingerprint":"9e114d587e7847fa7bd19adaf9686526_136","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01657.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01657.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":9,"end":79}},"sink":{"start":76,"end":76,"column":{"start":9,"end":79},"content":""},"parent_line_number":76,"fingerprint":"6f5c94372a61979f62dd9bd2c1a0dc9e_0","old_fingerprint":"6f5c94372a61979f62dd9bd2c1a0dc9e_226","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01658.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01658.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":75}},"sink":{"start":74,"end":74,"column":{"start":9,"end":75},"content":""},"parent_line_number":74,"fingerprint":"02c35205abc97f82417923ad7d792c02_0","old_fingerprint":"02c35205abc97f82417923ad7d792c02_217","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01659.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01659.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"c5d3d22c26049cb791106a79a1ee5b77_0","old_fingerprint":"c5d3d22c26049cb791106a79a1ee5b77_194","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01660.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01660.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"2499725f6f5c63412f349ed97a7bc33b_0","old_fingerprint":"2499725f6f5c63412f349ed97a7bc33b_195","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01661.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01661.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":96}},"sink":{"start":74,"end":74,"column":{"start":9,"end":96},"content":""},"parent_line_number":74,"fingerprint":"0925f2c1d083b243f0f7be81db5911c9_0","old_fingerprint":"0925f2c1d083b243f0f7be81db5911c9_205","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01662.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01662.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":75}},"sink":{"start":74,"end":74,"column":{"start":9,"end":75},"content":""},"parent_line_number":74,"fingerprint":"8da7a37b283fcfee1225b5846c3dd866_0","old_fingerprint":"8da7a37b283fcfee1225b5846c3dd866_220","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01663.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01663.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":46}},"sink":{"start":74,"end":74,"column":{"start":9,"end":46},"content":""},"parent_line_number":74,"fingerprint":"ca33503d2a98e94bea79fccaf01048f9_0","old_fingerprint":"ca33503d2a98e94bea79fccaf01048f9_219","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01664.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01664.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":56}},"sink":{"start":73,"end":73,"column":{"start":9,"end":56},"content":""},"parent_line_number":73,"fingerprint":"b3a30f58c1df148de3a8099eb42c78d1_0","old_fingerprint":"b3a30f58c1df148de3a8099eb42c78d1_199","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01665.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01665.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":56}},"sink":{"start":73,"end":73,"column":{"start":9,"end":56},"content":""},"parent_line_number":73,"fingerprint":"18df628a378c3ca655129bfff8bb76bc_0","old_fingerprint":"18df628a378c3ca655129bfff8bb76bc_180","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01666.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01666.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":56}},"sink":{"start":73,"end":73,"column":{"start":9,"end":56},"content":""},"parent_line_number":73,"fingerprint":"547a6a8c8c82b49001f4e6a15eff8ebc_0","old_fingerprint":"547a6a8c8c82b49001f4e6a15eff8ebc_184","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01667.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01667.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":42}},"sink":{"start":73,"end":73,"column":{"start":9,"end":42},"content":""},"parent_line_number":73,"fingerprint":"df998d1a43e77f75461e32b84cea63ea_0","old_fingerprint":"df998d1a43e77f75461e32b84cea63ea_185","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01668.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01668.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":42}},"sink":{"start":73,"end":73,"column":{"start":9,"end":42},"content":""},"parent_line_number":73,"fingerprint":"367f14495e56fe0f8a8f3d7bac4e7763_0","old_fingerprint":"367f14495e56fe0f8a8f3d7bac4e7763_202","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01669.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01669.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":42}},"sink":{"start":73,"end":73,"column":{"start":9,"end":42},"content":""},"parent_line_number":73,"fingerprint":"4d19c9633e4b4cbc06dcd56683580854_0","old_fingerprint":"4d19c9633e4b4cbc06dcd56683580854_189","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01670.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01670.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":54}},"sink":{"start":73,"end":73,"column":{"start":9,"end":54},"content":""},"parent_line_number":73,"fingerprint":"8f50d5e0da4468ed4716428ede60c0cd_0","old_fingerprint":"8f50d5e0da4468ed4716428ede60c0cd_203","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01671.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01671.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"ab88c9484fefbade67c6b8abe8f5fdda_0","old_fingerprint":"ab88c9484fefbade67c6b8abe8f5fdda_204","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":13,"end":73}},"sink":{"start":79,"end":79,"column":{"start":13,"end":73},"content":""},"parent_line_number":79,"fingerprint":"529db1d0b588835ecf0b3bd0f511df7d_0","old_fingerprint":"529db1d0b588835ecf0b3bd0f511df7d_231","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":88}},"sink":{"start":89,"end":89,"column":{"start":13,"end":88},"content":""},"parent_line_number":89,"fingerprint":"9291d72ff9e6ec0dafaf690a3f95509d_0","old_fingerprint":"9291d72ff9e6ec0dafaf690a3f95509d_237","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":88}},"sink":{"start":84,"end":84,"column":{"start":13,"end":88},"content":""},"parent_line_number":84,"fingerprint":"fe2ff5a53bf519a664118d02cd46b7a6_0","old_fingerprint":"fe2ff5a53bf519a664118d02cd46b7a6_235","code_extract":"            response.getWriter().println(\"Your query results are: \" + result + \"\u003cbr/\u003e\");"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01914.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01914.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":79}},"sink":{"start":57,"end":57,"column":{"start":9,"end":79},"content":""},"parent_line_number":57,"fingerprint":"8a16854f390e2ac3d767b6d5c8974bc8_0","old_fingerprint":"8a16854f390e2ac3d767b6d5c8974bc8_91","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01915.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01915.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":75}},"sink":{"start":55,"end":55,"column":{"start":9,"end":75},"content":""},"parent_line_number":55,"fingerprint":"92ddbb917ad6dfb78e14d9fb1c807c0a_0","old_fingerprint":"92ddbb917ad6dfb78e14d9fb1c807c0a_62","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01916.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01916.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":54}},"sink":{"start":54,"end":54,"column":{"start":9,"end":54},"content":""},"parent_line_number":54,"fingerprint":"a3403e609071417bf56658b056ded258_0","old_fingerprint":"a3403e609071417bf56658b056ded258_25","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01917.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01917.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":40}},"sink":{"start":54,"end":54,"column":{"start":9,"end":40},"content":""},"parent_line_number":54,"fingerprint":"d25d88ca3fa289b6b6214c69cab9a170_0","old_fingerprint":"d25d88ca3fa289b6b6214c69cab9a170_26","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01918.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01918.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":96}},"sink":{"start":55,"end":55,"column":{"start":9,"end":96},"content":""},"parent_line_number":55,"fingerprint":"53dea169afa5d21d6fedea35239a2b1b_0","old_fingerprint":"53dea169afa5d21d6fedea35239a2b1b_61","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01919.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01919.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":67}},"sink":{"start":55,"end":55,"column":{"start":9,"end":67},"content":""},"parent_line_number":55,"fingerprint":"7e5ec95930ce4dc13ac87ea1cc0b4f10_0","old_fingerprint":"7e5ec95930ce4dc13ac87ea1cc0b4f10_60","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01920.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01920.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":75}},"sink":{"start":55,"end":55,"column":{"start":9,"end":75},"content":""},"parent_line_number":55,"fingerprint":"277b776ef3402ffb83acd950d2eeff66_0","old_fingerprint":"277b776ef3402ffb83acd950d2eeff66_58","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01921.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01921.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":75}},"sink":{"start":55,"end":55,"column":{"start":9,"end":75},"content":""},"parent_line_number":55,"fingerprint":"fba78093751a7fd452d6880190fe3e05_0","old_fingerprint":"fba78093751a7fd452d6880190fe3e05_57","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01922.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01922.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":46}},"sink":{"start":55,"end":55,"column":{"start":9,"end":46},"content":""},"parent_line_number":55,"fingerprint":"deb69d9563461df13bbae7f496e933a5_0","old_fingerprint":"deb69d9563461df13bbae7f496e933a5_56","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01923.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01923.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":46}},"sink":{"start":55,"end":55,"column":{"start":9,"end":46},"content":""},"parent_line_number":55,"fingerprint":"735b89d2129559aa7c97e7d6f7a57186_0","old_fingerprint":"735b89d2129559aa7c97e7d6f7a57186_55","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01924.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01924.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":46}},"sink":{"start":55,"end":55,"column":{"start":9,"end":46},"content":""},"parent_line_number":55,"fingerprint":"655dfd0ff05ab7f10ea66c69cd3d435b_0","old_fingerprint":"655dfd0ff05ab7f10ea66c69cd3d435b_52","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01925.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01925.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":42}},"sink":{"start":54,"end":54,"column":{"start":9,"end":42},"content":""},"parent_line_number":54,"fingerprint":"ddb410ca5ca90d1cc731936342f73e09_0","old_fingerprint":"ddb410ca5ca90d1cc731936342f73e09_35","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01926.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01926.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":42}},"sink":{"start":54,"end":54,"column":{"start":9,"end":42},"content":""},"parent_line_number":54,"fingerprint":"285e2bdc2020c5d44923051ac59d69a3_0","old_fingerprint":"285e2bdc2020c5d44923051ac59d69a3_37","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01927.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01927.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":40}},"sink":{"start":54,"end":54,"column":{"start":9,"end":40},"content":""},"parent_line_number":54,"fingerprint":"d4d8dc5aed6e795e43389cd776b28406_0","old_fingerprint":"d4d8dc5aed6e795e43389cd776b28406_42","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":89}},"sink":{"start":60,"end":60,"column":{"start":13,"end":89},"content":""},"parent_line_number":60,"fingerprint":"de44bc7a884d49539e70bb8587b549b7_0","old_fingerprint":"de44bc7a884d49539e70bb8587b549b7_121","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02045.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02045.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":9,"end":79}},"sink":{"start":59,"end":59,"column":{"start":9,"end":79},"content":""},"parent_line_number":59,"fingerprint":"3479b77d3e7fe1ab21bfe70fe68655a9_0","old_fingerprint":"3479b77d3e7fe1ab21bfe70fe68655a9_112","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02046.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02046.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":54}},"sink":{"start":56,"end":56,"column":{"start":9,"end":54},"content":""},"parent_line_number":56,"fingerprint":"806979b4d0b0e8ccbe569b394182d9b3_0","old_fingerprint":"806979b4d0b0e8ccbe569b394182d9b3_74","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02047.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02047.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":54}},"sink":{"start":56,"end":56,"column":{"start":9,"end":54},"content":""},"parent_line_number":56,"fingerprint":"1b4c605afbfbbd86a6d64003491f6fa0_0","old_fingerprint":"1b4c605afbfbbd86a6d64003491f6fa0_75","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02048.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02048.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":96}},"sink":{"start":57,"end":57,"column":{"start":9,"end":96},"content":""},"parent_line_number":57,"fingerprint":"ea2ab018b7d96f4f6d447aa8c2d7c39b_0","old_fingerprint":"ea2ab018b7d96f4f6d447aa8c2d7c39b_99","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02049.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02049.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":96}},"sink":{"start":57,"end":57,"column":{"start":9,"end":96},"content":""},"parent_line_number":57,"fingerprint":"08f54b3b6c2431fbb1d777c88ad49675_0","old_fingerprint":"08f54b3b6c2431fbb1d777c88ad49675_100","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02050.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02050.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":96}},"sink":{"start":57,"end":57,"column":{"start":9,"end":96},"content":""},"parent_line_number":57,"fingerprint":"b5a98f9d453121f6f6e52774c7369cd6_0","old_fingerprint":"b5a98f9d453121f6f6e52774c7369cd6_85","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02051.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02051.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":75}},"sink":{"start":57,"end":57,"column":{"start":9,"end":75},"content":""},"parent_line_number":57,"fingerprint":"4a22156e1f3415c2f58bcebb76a31658_0","old_fingerprint":"4a22156e1f3415c2f58bcebb76a31658_88","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02052.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02052.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":75}},"sink":{"start":57,"end":57,"column":{"start":9,"end":75},"content":""},"parent_line_number":57,"fingerprint":"fdfe5481ff1edf0a9bee42a6f5ebcc70_0","old_fingerprint":"fdfe5481ff1edf0a9bee42a6f5ebcc70_95","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02053.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02053.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":75}},"sink":{"start":57,"end":57,"column":{"start":9,"end":75},"content":""},"parent_line_number":57,"fingerprint":"15d7fa7bb5ed1d5e75d09dfff451d90e_0","old_fingerprint":"15d7fa7bb5ed1d5e75d09dfff451d90e_92","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02054.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02054.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":46}},"sink":{"start":57,"end":57,"column":{"start":9,"end":46},"content":""},"parent_line_number":57,"fingerprint":"a2bc50248c886085e0f89c4d0716ea99_0","old_fingerprint":"a2bc50248c886085e0f89c4d0716ea99_94","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02055.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02055.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":56}},"sink":{"start":56,"end":56,"column":{"start":9,"end":56},"content":""},"parent_line_number":56,"fingerprint":"a06bc517a18cd0d2a9e78310fdc3b230_0","old_fingerprint":"a06bc517a18cd0d2a9e78310fdc3b230_76","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02056.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02056.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":42}},"sink":{"start":56,"end":56,"column":{"start":9,"end":42},"content":""},"parent_line_number":56,"fingerprint":"b31e858d74097115dbe19a3d4c91c32e_0","old_fingerprint":"b31e858d74097115dbe19a3d4c91c32e_78","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02057.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02057.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":55}},"sink":{"start":59,"end":59,"column":{"start":13,"end":55},"content":""},"parent_line_number":59,"fingerprint":"f662ed5bd4efa382394d9d3c34fba960_0","old_fingerprint":"f662ed5bd4efa382394d9d3c34fba960_105","code_extract":"            response.getWriter().write(bar, 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02221.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02221.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":79}},"sink":{"start":56,"end":56,"column":{"start":9,"end":79},"content":""},"parent_line_number":56,"fingerprint":"012499b06b99eec72bbdd9ae1ad22853_0","old_fingerprint":"012499b06b99eec72bbdd9ae1ad22853_79","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02222.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02222.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":67}},"sink":{"start":54,"end":54,"column":{"start":9,"end":67},"content":""},"parent_line_number":54,"fingerprint":"7a7cc4a6392024acace242db1224b41e_0","old_fingerprint":"7a7cc4a6392024acace242db1224b41e_24","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02223.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02223.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":75}},"sink":{"start":54,"end":54,"column":{"start":9,"end":75},"content":""},"parent_line_number":54,"fingerprint":"f6fd1da7f3ec233b4adb266d78f01411_0","old_fingerprint":"f6fd1da7f3ec233b4adb266d78f01411_47","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02224.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02224.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":75}},"sink":{"start":54,"end":54,"column":{"start":9,"end":75},"content":""},"parent_line_number":54,"fingerprint":"2b8424f5417035eed3a99b2a819e745e_0","old_fingerprint":"2b8424f5417035eed3a99b2a819e745e_46","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02225.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02225.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":46}},"sink":{"start":54,"end":54,"column":{"start":9,"end":46},"content":""},"parent_line_number":54,"fingerprint":"5df8ad320d129cf51d0b8c16b726db12_0","old_fingerprint":"5df8ad320d129cf51d0b8c16b726db12_45","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02226.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02226.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":54}},"sink":{"start":53,"end":53,"column":{"start":9,"end":54},"content":""},"parent_line_number":53,"fingerprint":"ec511028a96a6e9088953435a91acd0d_0","old_fingerprint":"ec511028a96a6e9088953435a91acd0d_11","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02227.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02227.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":54}},"sink":{"start":53,"end":53,"column":{"start":9,"end":54},"content":""},"parent_line_number":53,"fingerprint":"9cb3972d1ce8321dd4343903935a2d76_0","old_fingerprint":"9cb3972d1ce8321dd4343903935a2d76_10","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02228.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02228.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":40}},"sink":{"start":53,"end":53,"column":{"start":9,"end":40},"content":""},"parent_line_number":53,"fingerprint":"4c1ece3a18cd88ce4334759477a2ec8f_0","old_fingerprint":"4c1ece3a18cd88ce4334759477a2ec8f_9","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02229.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02229.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":96}},"sink":{"start":54,"end":54,"column":{"start":9,"end":96},"content":""},"parent_line_number":54,"fingerprint":"22ff0e41a95d8a2da0e856bd3a54d531_0","old_fingerprint":"22ff0e41a95d8a2da0e856bd3a54d531_41","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02230.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02230.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":96}},"sink":{"start":54,"end":54,"column":{"start":9,"end":96},"content":""},"parent_line_number":54,"fingerprint":"c20d3c9b14fbb6b61b1909dbd2bce59d_0","old_fingerprint":"c20d3c9b14fbb6b61b1909dbd2bce59d_40","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02231.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02231.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":75}},"sink":{"start":54,"end":54,"column":{"start":9,"end":75},"content":""},"parent_line_number":54,"fingerprint":"27ce5649e05e5f96692d262473a8d523_0","old_fingerprint":"27ce5649e05e5f96692d262473a8d523_39","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02232.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02232.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":46}},"sink":{"start":54,"end":54,"column":{"start":9,"end":46},"content":""},"parent_line_number":54,"fingerprint":"3d96cfd258c48d863e8efd16b147b48e_0","old_fingerprint":"3d96cfd258c48d863e8efd16b147b48e_38","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02233.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02233.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":46}},"sink":{"start":54,"end":54,"column":{"start":9,"end":46},"content":""},"parent_line_number":54,"fingerprint":"6ee183c86e325a50646e6325374b25c7_0","old_fingerprint":"6ee183c86e325a50646e6325374b25c7_21","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02234.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02234.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":46}},"sink":{"start":54,"end":54,"column":{"start":9,"end":46},"content":""},"parent_line_number":54,"fingerprint":"ab48c58686b23bb424df8ffbd961f8f7_0","old_fingerprint":"ab48c58686b23bb424df8ffbd961f8f7_36","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02235.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02235.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":56}},"sink":{"start":53,"end":53,"column":{"start":9,"end":56},"content":""},"parent_line_number":53,"fingerprint":"b8dfe10af9948ca54f952ee8f796923a_0","old_fingerprint":"b8dfe10af9948ca54f952ee8f796923a_8","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02236.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02236.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"10449e11fc812572d45d63ddbb36f9d9_0","old_fingerprint":"10449e11fc812572d45d63ddbb36f9d9_7","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02237.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02237.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"be733544dbad450c2aeb1353dc35d62b_0","old_fingerprint":"be733544dbad450c2aeb1353dc35d62b_6","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02238.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02238.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":42}},"sink":{"start":53,"end":53,"column":{"start":9,"end":42},"content":""},"parent_line_number":53,"fingerprint":"1c9a3ec51b354043109c65a5bad4ff51_0","old_fingerprint":"1c9a3ec51b354043109c65a5bad4ff51_5","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02239.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02239.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":54}},"sink":{"start":53,"end":53,"column":{"start":9,"end":54},"content":""},"parent_line_number":53,"fingerprint":"8c90e1778dfbffc30395f1dab6fbe913_0","old_fingerprint":"8c90e1778dfbffc30395f1dab6fbe913_4","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02240.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02240.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":40}},"sink":{"start":53,"end":53,"column":{"start":9,"end":40},"content":""},"parent_line_number":53,"fingerprint":"44d47f36575e22ab358ef3f376bb95e1_0","old_fingerprint":"44d47f36575e22ab358ef3f376bb95e1_3","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02241.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02241.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":40}},"sink":{"start":53,"end":53,"column":{"start":9,"end":40},"content":""},"parent_line_number":53,"fingerprint":"01ed4b786869358945f5a7561e87ee6c_0","old_fingerprint":"01ed4b786869358945f5a7561e87ee6c_1","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":73}},"sink":{"start":59,"end":59,"column":{"start":13,"end":73},"content":""},"parent_line_number":59,"fingerprint":"ac864f45614ea28cedf0beb8d51ca630_0","old_fingerprint":"ac864f45614ea28cedf0beb8d51ca630_118","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":73}},"sink":{"start":59,"end":59,"column":{"start":13,"end":73},"content":""},"parent_line_number":59,"fingerprint":"f2e358e55d6b65389f22fab64f8aeac9_0","old_fingerprint":"f2e358e55d6b65389f22fab64f8aeac9_110","code_extract":"            response.getWriter().println(\"Your results are: \" + results);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":89}},"sink":{"start":59,"end":59,"column":{"start":13,"end":89},"content":""},"parent_line_number":59,"fingerprint":"c617d68fb69f1421bb943834358e20c9_0","old_fingerprint":"c617d68fb69f1421bb943834358e20c9_117","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":89}},"sink":{"start":59,"end":59,"column":{"start":13,"end":89},"content":""},"parent_line_number":59,"fingerprint":"f44f1cc7635c167b67f16f330ae7c292_0","old_fingerprint":"f44f1cc7635c167b67f16f330ae7c292_115","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":13,"end":89}},"sink":{"start":59,"end":59,"column":{"start":13,"end":89},"content":""},"parent_line_number":59,"fingerprint":"5cba1017fd728fbd137c22e58cd67b98_0","old_fingerprint":"5cba1017fd728fbd137c22e58cd67b98_107","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02313.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02313.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":9,"end":79}},"sink":{"start":66,"end":66,"column":{"start":9,"end":79},"content":""},"parent_line_number":66,"fingerprint":"a5ef2be31896af8c237366e5ac766a58_0","old_fingerprint":"a5ef2be31896af8c237366e5ac766a58_163","code_extract":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02314.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02314.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":67}},"sink":{"start":64,"end":64,"column":{"start":9,"end":67},"content":""},"parent_line_number":64,"fingerprint":"4f47f67b6e1cc0691aaa548de10fa349_0","old_fingerprint":"4f47f67b6e1cc0691aaa548de10fa349_146","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02315.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02315.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"9e5d37dcc7f66d1070e4c3ef25a75038_0","old_fingerprint":"9e5d37dcc7f66d1070e4c3ef25a75038_147","code_extract":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02316.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02316.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":46}},"sink":{"start":64,"end":64,"column":{"start":9,"end":46},"content":""},"parent_line_number":64,"fingerprint":"16057dc18f2f704ad9b73936533837c5_0","old_fingerprint":"16057dc18f2f704ad9b73936533837c5_148","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02317.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02317.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":46}},"sink":{"start":64,"end":64,"column":{"start":9,"end":46},"content":""},"parent_line_number":64,"fingerprint":"eccba75242cbd62ee5bb7e358e0b1066_0","old_fingerprint":"eccba75242cbd62ee5bb7e358e0b1066_149","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02318.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02318.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":54}},"sink":{"start":63,"end":63,"column":{"start":9,"end":54},"content":""},"parent_line_number":63,"fingerprint":"3304104078fde1423ed42bb911905732_0","old_fingerprint":"3304104078fde1423ed42bb911905732_141","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02319.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02319.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":40}},"sink":{"start":63,"end":63,"column":{"start":9,"end":40},"content":""},"parent_line_number":63,"fingerprint":"f5dc2886cf26813cb6b66cce4e1cb2b1_0","old_fingerprint":"f5dc2886cf26813cb6b66cce4e1cb2b1_140","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02320.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02320.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":96}},"sink":{"start":64,"end":64,"column":{"start":9,"end":96},"content":""},"parent_line_number":64,"fingerprint":"297fe1e643ea9cfacbb6fe05ffa20b44_0","old_fingerprint":"297fe1e643ea9cfacbb6fe05ffa20b44_150","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02321.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02321.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"cb8520bf1b0ed6f855f301a99f559617_0","old_fingerprint":"cb8520bf1b0ed6f855f301a99f559617_151","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02322.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02322.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"b87cf61c143c08f3777d32af2e75d63a_0","old_fingerprint":"b87cf61c143c08f3777d32af2e75d63a_145","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02323.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02323.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"a0800cacef402b0840bec4bc7c78b3ca_0","old_fingerprint":"a0800cacef402b0840bec4bc7c78b3ca_153","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02324.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02324.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":75}},"sink":{"start":64,"end":64,"column":{"start":9,"end":75},"content":""},"parent_line_number":64,"fingerprint":"ff8e884d0a38e031582de398d76e0d30_0","old_fingerprint":"ff8e884d0a38e031582de398d76e0d30_158","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02325.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02325.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":42}},"sink":{"start":63,"end":63,"column":{"start":9,"end":42},"content":""},"parent_line_number":63,"fingerprint":"f25c6fc50a8c18c5bf59a8411588f2b1_0","old_fingerprint":"f25c6fc50a8c18c5bf59a8411588f2b1_134","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02326.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02326.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":54}},"sink":{"start":63,"end":63,"column":{"start":9,"end":54},"content":""},"parent_line_number":63,"fingerprint":"f8ba820ec34c74dfd927884b99c39d1b_0","old_fingerprint":"f8ba820ec34c74dfd927884b99c39d1b_133","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02327.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02327.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":69}},"sink":{"start":66,"end":66,"column":{"start":13,"end":69},"content":""},"parent_line_number":66,"fingerprint":"10d5f7b5fd47d740b78520fd88d74122_0","old_fingerprint":"10d5f7b5fd47d740b78520fd88d74122_165","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02328.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02328.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":69}},"sink":{"start":66,"end":66,"column":{"start":13,"end":69},"content":""},"parent_line_number":66,"fingerprint":"edcb4a1925adb4e98268f3484b3d0a9f_0","old_fingerprint":"edcb4a1925adb4e98268f3484b3d0a9f_166","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02329.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02329.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":69}},"sink":{"start":66,"end":66,"column":{"start":13,"end":69},"content":""},"parent_line_number":66,"fingerprint":"fced83cee611db738586c1161b07455c_0","old_fingerprint":"fced83cee611db738586c1161b07455c_162","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02330.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02330.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":69}},"sink":{"start":66,"end":66,"column":{"start":13,"end":69},"content":""},"parent_line_number":66,"fingerprint":"d1171817875ee6c187760af959a7911c_0","old_fingerprint":"d1171817875ee6c187760af959a7911c_167","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02331.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02331.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":40}},"sink":{"start":63,"end":63,"column":{"start":9,"end":40},"content":""},"parent_line_number":63,"fingerprint":"93063b4477857cebb3b088628b23f86c_0","old_fingerprint":"93063b4477857cebb3b088628b23f86c_132","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02332.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02332.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":40}},"sink":{"start":63,"end":63,"column":{"start":9,"end":40},"content":""},"parent_line_number":63,"fingerprint":"2ba0f14ad55f925be6bdf22778855921_0","old_fingerprint":"2ba0f14ad55f925be6bdf22778855921_131","code_extract":"        response.getWriter().write(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":89}},"sink":{"start":69,"end":69,"column":{"start":13,"end":89},"content":""},"parent_line_number":69,"fingerprint":"191ad4847ea38a0a372a6bb8037eeee5_0","old_fingerprint":"191ad4847ea38a0a372a6bb8037eeee5_172","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":89}},"sink":{"start":69,"end":69,"column":{"start":13,"end":89},"content":""},"parent_line_number":69,"fingerprint":"7011b9cb4c8645bc5c5fbc2435ae1393_0","old_fingerprint":"7011b9cb4c8645bc5c5fbc2435ae1393_173","code_extract":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02578.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02578.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":67}},"sink":{"start":74,"end":74,"column":{"start":9,"end":67},"content":""},"parent_line_number":74,"fingerprint":"9320e4f76a426ba4ddf88a16e52fc2e2_0","old_fingerprint":"9320e4f76a426ba4ddf88a16e52fc2e2_213","code_extract":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02579.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02579.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":46}},"sink":{"start":74,"end":74,"column":{"start":9,"end":46},"content":""},"parent_line_number":74,"fingerprint":"3e3567c4149b7ddc3d75cdd296be6c5d_0","old_fingerprint":"3e3567c4149b7ddc3d75cdd296be6c5d_223","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02580.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02580.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":46}},"sink":{"start":74,"end":74,"column":{"start":9,"end":46},"content":""},"parent_line_number":74,"fingerprint":"d612c4fc86c1b2196c50dc79992c891a_0","old_fingerprint":"d612c4fc86c1b2196c50dc79992c891a_215","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02581.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02581.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":46}},"sink":{"start":74,"end":74,"column":{"start":9,"end":46},"content":""},"parent_line_number":74,"fingerprint":"06d5086a84c38256b4feb532e874c373_0","old_fingerprint":"06d5086a84c38256b4feb532e874c373_216","code_extract":"        response.getWriter().format(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02582.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02582.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":54}},"sink":{"start":73,"end":73,"column":{"start":9,"end":54},"content":""},"parent_line_number":73,"fingerprint":"2283b6034f96fe624465a22fea6f7422_0","old_fingerprint":"2283b6034f96fe624465a22fea6f7422_201","code_extract":"        response.getWriter().print(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02583.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02583.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"8ab144b78d47d283a4b902d83869e775_0","old_fingerprint":"8ab144b78d47d283a4b902d83869e775_200","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02584.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02584.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"6c2dd1a85a2b62600eb7e6cb5ef4371e_0","old_fingerprint":"6c2dd1a85a2b62600eb7e6cb5ef4371e_198","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02585.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02585.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"524cf7938a472573ecd7201151f9915d_0","old_fingerprint":"524cf7938a472573ecd7201151f9915d_197","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02586.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02586.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":40}},"sink":{"start":73,"end":73,"column":{"start":9,"end":40},"content":""},"parent_line_number":73,"fingerprint":"accabb88d7a149229a2fb580696bdcbf_0","old_fingerprint":"accabb88d7a149229a2fb580696bdcbf_196","code_extract":"        response.getWriter().print(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02587.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02587.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":96}},"sink":{"start":74,"end":74,"column":{"start":9,"end":96},"content":""},"parent_line_number":74,"fingerprint":"ebded842ca53dcd3b4a943bdd2fe6995_0","old_fingerprint":"ebded842ca53dcd3b4a943bdd2fe6995_212","code_extract":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02588.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02588.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":67}},"sink":{"start":74,"end":74,"column":{"start":9,"end":67},"content":""},"parent_line_number":74,"fingerprint":"8a960bee817822853ee8509711b53507_0","old_fingerprint":"8a960bee817822853ee8509711b53507_214","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02589.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02589.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":67}},"sink":{"start":74,"end":74,"column":{"start":9,"end":67},"content":""},"parent_line_number":74,"fingerprint":"1d63329acb1d21b20c8d482e26b162b5_0","old_fingerprint":"1d63329acb1d21b20c8d482e26b162b5_224","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02590.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02590.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":67}},"sink":{"start":74,"end":74,"column":{"start":9,"end":67},"content":""},"parent_line_number":74,"fingerprint":"01b06a2d8aafc3c13eff8c51f908a594_0","old_fingerprint":"01b06a2d8aafc3c13eff8c51f908a594_211","code_extract":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02591.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02591.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":75}},"sink":{"start":74,"end":74,"column":{"start":9,"end":75},"content":""},"parent_line_number":74,"fingerprint":"731bf3da753058c3759ab99adc8929a0_0","old_fingerprint":"731bf3da753058c3759ab99adc8929a0_221","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02592.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02592.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":75}},"sink":{"start":74,"end":74,"column":{"start":9,"end":75},"content":""},"parent_line_number":74,"fingerprint":"19b13d98e9b2ccdab1a670215ae8ee20_0","old_fingerprint":"19b13d98e9b2ccdab1a670215ae8ee20_222","code_extract":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02593.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02593.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":46}},"sink":{"start":74,"end":74,"column":{"start":9,"end":46},"content":""},"parent_line_number":74,"fingerprint":"e552844afc41da236537ff3d2f3828f1_0","old_fingerprint":"e552844afc41da236537ff3d2f3828f1_206","code_extract":"        response.getWriter().printf(bar, obj);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02594.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02594.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":56}},"sink":{"start":73,"end":73,"column":{"start":9,"end":56},"content":""},"parent_line_number":73,"fingerprint":"e1789ffeb428cf0e691ac599b8ee9f5c_0","old_fingerprint":"e1789ffeb428cf0e691ac599b8ee9f5c_193","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02595.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02595.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":56}},"sink":{"start":73,"end":73,"column":{"start":9,"end":56},"content":""},"parent_line_number":73,"fingerprint":"f4210e82e4f8667f0e8925e372b45e0f_0","old_fingerprint":"f4210e82e4f8667f0e8925e372b45e0f_192","code_extract":"        response.getWriter().println(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02596.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02596.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":42}},"sink":{"start":73,"end":73,"column":{"start":9,"end":42},"content":""},"parent_line_number":73,"fingerprint":"f06c5ddc7c73e2ed0d4ddbd0b9ff6dd4_0","old_fingerprint":"f06c5ddc7c73e2ed0d4ddbd0b9ff6dd4_191","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02597.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02597.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":42}},"sink":{"start":73,"end":73,"column":{"start":9,"end":42},"content":""},"parent_line_number":73,"fingerprint":"639aa7023411b1c0630d06e3cca30341_0","old_fingerprint":"639aa7023411b1c0630d06e3cca30341_190","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02598.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02598.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":42}},"sink":{"start":73,"end":73,"column":{"start":9,"end":42},"content":""},"parent_line_number":73,"fingerprint":"3745c513b83048bbbca855e587fdc48c_0","old_fingerprint":"3745c513b83048bbbca855e587fdc48c_181","code_extract":"        response.getWriter().println(bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02599.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02599.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":54}},"sink":{"start":73,"end":73,"column":{"start":9,"end":54},"content":""},"parent_line_number":73,"fingerprint":"8c988eff6f3c46321e780df2cca5252d_0","old_fingerprint":"8c988eff6f3c46321e780df2cca5252d_187","code_extract":"        response.getWriter().write(bar.toCharArray());"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02600.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02600.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":13,"end":69}},"sink":{"start":76,"end":76,"column":{"start":13,"end":69},"content":""},"parent_line_number":76,"fingerprint":"2eff9bb8bade78236b8ebcfaa9683e03_0","old_fingerprint":"2eff9bb8bade78236b8ebcfaa9683e03_227","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02601.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02601.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":13,"end":69}},"sink":{"start":76,"end":76,"column":{"start":13,"end":69},"content":""},"parent_line_number":76,"fingerprint":"45e9825e72895ac62db1b320f27536e3_0","old_fingerprint":"45e9825e72895ac62db1b320f27536e3_228","code_extract":"            response.getWriter().write(bar.toCharArray(), 0, length);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02608.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02608.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":62}},"sink":{"start":73,"end":73,"column":{"start":9,"end":62},"content":""},"parent_line_number":73,"fingerprint":"b299b6a6ba5193a31555d5264644986b_0","old_fingerprint":"b299b6a6ba5193a31555d5264644986b_186","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"java_lang_xss_response_writer","title":"Unsanitized user input in output stream (XSS)","description":"## Description\n\nCross-site scripting (XSS) vulnerabilities occur when unsanitized user input is included in web page content. This flaw can lead to malicious scripts being executed in the context of the user's browser, compromising the security of user data and interactions with the application.\n\n## Remediations\n\n- **Do** use an encoder to handle user input before incorporating it into the output stream. This step helps minimize the risk of XSS attacks by converting potentially dangerous characters into a safe format.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput);\n  response.getWriter().write(encodedUserInput);\n  ```\n- **Do** sanitize user input to remove or neutralize unwanted scripts. Sanitization goes beyond encoding by actively removing harmful content from user input before it is used in the output.\n  ```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n  ```\n\n## References\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xss_response_writer","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02609.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02609.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":62}},"sink":{"start":73,"end":73,"column":{"start":9,"end":62},"content":""},"parent_line_number":73,"fingerprint":"0a34df9c48ea60901cb3a39a942f8955_0","old_fingerprint":"0a34df9c48ea60901cb3a39a942f8955_182","code_extract":"        response.getWriter().write(\"Parameter value: \" + bar);"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":151,"full_filename":"src/main/webapp/js/testsuiteutils.js","filename":"src/main/webapp/js/testsuiteutils.js","category_groups":["PII","Personal Data"],"source":{"start":151,"end":151,"column":{"start":5,"end":25}},"sink":{"start":151,"end":151,"column":{"start":5,"end":25},"content":""},"parent_line_number":151,"fingerprint":"548bf7600b8c5148f53aa9cf9a96abfe_0","old_fingerprint":"548bf7600b8c5148f53aa9cf9a96abfe_0","code_extract":"    txt.innerHTML = html;"}],"low":[{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/helpers/DataBaseServer.java","filename":"src/main/java/org/owasp/benchmark/helpers/DataBaseServer.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":17,"end":36}},"sink":{"start":70,"end":70,"column":{"start":17,"end":36},"content":""},"parent_line_number":70,"fingerprint":"0ad1af2d45533501f11ef2b72a64eb17_0","old_fingerprint":"0ad1af2d45533501f11ef2b72a64eb17_2","code_extract":"                e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":165,"full_filename":"src/main/java/org/owasp/benchmark/helpers/DatabaseHelper.java","filename":"src/main/java/org/owasp/benchmark/helpers/DatabaseHelper.java","category_groups":["PII","Personal Data"],"source":{"start":165,"end":165,"column":{"start":17,"end":36}},"sink":{"start":165,"end":165,"column":{"start":17,"end":36},"content":""},"parent_line_number":165,"fingerprint":"1288968cfc7311f9dcb96933940f9af9_0","old_fingerprint":"1288968cfc7311f9dcb96933940f9af9_8","code_extract":"                e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":130,"full_filename":"src/main/java/org/owasp/benchmark/helpers/LDAPManager.java","filename":"src/main/java/org/owasp/benchmark/helpers/LDAPManager.java","category_groups":["PII","Personal Data"],"source":{"start":130,"end":130,"column":{"start":13,"end":32}},"sink":{"start":130,"end":130,"column":{"start":13,"end":32},"content":""},"parent_line_number":130,"fingerprint":"c7e281eedc81f4be9e3efb086cb79a01_0","old_fingerprint":"c7e281eedc81f4be9e3efb086cb79a01_6","code_extract":"            e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/helpers/LDAPServer.java","filename":"src/main/java/org/owasp/benchmark/helpers/LDAPServer.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":13,"end":32}},"sink":{"start":104,"end":104,"column":{"start":13,"end":32},"content":""},"parent_line_number":104,"fingerprint":"c3fcae3b7cea0bbead416b188106563d_0","old_fingerprint":"c3fcae3b7cea0bbead416b188106563d_3","code_extract":"            e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":44,"full_filename":"src/main/java/org/owasp/benchmark/helpers/Startup.java","filename":"src/main/java/org/owasp/benchmark/helpers/Startup.java","category_groups":["PII","Personal Data"],"source":{"start":44,"end":44,"column":{"start":13,"end":32}},"sink":{"start":44,"end":44,"column":{"start":13,"end":32},"content":""},"parent_line_number":44,"fingerprint":"13537747237025dd3724e980d1c72893_0","old_fingerprint":"13537747237025dd3724e980d1c72893_0","code_extract":"            e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/helpers/ThingFactory.java","filename":"src/main/java/org/owasp/benchmark/helpers/ThingFactory.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":13,"end":32}},"sink":{"start":48,"end":48,"column":{"start":13,"end":32},"content":""},"parent_line_number":48,"fingerprint":"04861a508ac57cb188aa0e15083c10a0_0","old_fingerprint":"04861a508ac57cb188aa0e15083c10a0_1","code_extract":"            e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":119,"full_filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","category_groups":["PII","Personal Data"],"source":{"start":119,"end":119,"column":{"start":17,"end":36}},"sink":{"start":119,"end":119,"column":{"start":17,"end":36},"content":""},"parent_line_number":119,"fingerprint":"65f7da92e5c18f257772f345647acd25_0","old_fingerprint":"65f7da92e5c18f257772f345647acd25_4","code_extract":"                e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":127,"full_filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","category_groups":["PII","Personal Data"],"source":{"start":127,"end":127,"column":{"start":17,"end":36}},"sink":{"start":127,"end":127,"column":{"start":17,"end":36},"content":""},"parent_line_number":127,"fingerprint":"65f7da92e5c18f257772f345647acd25_1","old_fingerprint":"65f7da92e5c18f257772f345647acd25_5","code_extract":"                e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":135,"full_filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","category_groups":["PII","Personal Data"],"source":{"start":135,"end":135,"column":{"start":17,"end":36}},"sink":{"start":135,"end":135,"column":{"start":17,"end":36},"content":""},"parent_line_number":135,"fingerprint":"65f7da92e5c18f257772f345647acd25_2","old_fingerprint":"65f7da92e5c18f257772f345647acd25_7","code_extract":"                e.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```java\n  System.out.println(e); // unsafe\n  ```\n- **Do** limit error messages to only include the necessary information for understanding the issue without exposing sensitive data.\n  ```java\n  System.out.println(\"An error occurred. Please try again.\");\n  ```\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":333,"full_filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","filename":"src/main/java/org/owasp/benchmark/helpers/Utils.java","category_groups":["PII","Personal Data"],"source":{"start":333,"end":333,"column":{"start":13,"end":32}},"sink":{"start":333,"end":333,"column":{"start":13,"end":32},"content":""},"parent_line_number":333,"fingerprint":"65f7da92e5c18f257772f345647acd25_3","old_fingerprint":"65f7da92e5c18f257772f345647acd25_9","code_extract":"            e.printStackTrace();"},{"cwe_ids":["532"],"id":"javascript_lang_logger_leak","title":"Leakage of information in logger message","description":"## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_logger_leak","line_number":38,"full_filename":"src/main/webapp/js/testsuiteutils.js","filename":"src/main/webapp/js/testsuiteutils.js","category_groups":["PII","Personal Data"],"source":{"start":38,"end":38,"column":{"start":11,"end":91}},"sink":{"start":38,"end":38,"column":{"start":11,"end":91},"content":""},"parent_line_number":38,"fingerprint":"637d491f0879ab254a3e5865f01ae188_0","old_fingerprint":"637d491f0879ab254a3e5865f01ae188_0","code_extract":"          console.log(\"dispatchToSubmit() received unexpected method name: \" + methodName);"}],"medium":[{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"0baeea60447d0a92424ccf265c97c1d5_0","old_fingerprint":"0baeea60447d0a92424ccf265c97c1d5_0","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00001\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"66c7497ff4d15bff6684c225a184adfa_0","old_fingerprint":"66c7497ff4d15bff6684c225a184adfa_1","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00002\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00003.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00003.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"3fe2aa82240652b1452d537ebed34061_0","old_fingerprint":"3fe2aa82240652b1452d537ebed34061_2","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00003\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"0ea0c815d36c3e4df5a63749bbadbb24_0","old_fingerprint":"0ea0c815d36c3e4df5a63749bbadbb24_3","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00004\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"9cb94e10d468e3481e282de31049a6a3_0","old_fingerprint":"9cb94e10d468e3481e282de31049a6a3_4","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00053\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00054.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00054.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"61e6e5347981c2fccd02374611542122_0","old_fingerprint":"61e6e5347981c2fccd02374611542122_5","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00054\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"e4cfcf07ef3c4cdc9010df6bbb41e497_0","old_fingerprint":"e4cfcf07ef3c4cdc9010df6bbb41e497_6","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00055\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"21bbe17e11b1a05cc320550975bb4706_0","old_fingerprint":"21bbe17e11b1a05cc320550975bb4706_7","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00056\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"63c3b4d2bb484d98a7956956518debcd_0","old_fingerprint":"63c3b4d2bb484d98a7956956518debcd_8","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00057\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00058.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00058.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"fa6aee410dad1bdf9a03c8db7987499a_0","old_fingerprint":"fa6aee410dad1bdf9a03c8db7987499a_9","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00058\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00059.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00059.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"ddaeaf835fabecfb392e7cfe86995c9a_0","old_fingerprint":"ddaeaf835fabecfb392e7cfe86995c9a_10","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00059\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"769ef95a1509417644741cff624186c2_0","old_fingerprint":"769ef95a1509417644741cff624186c2_11","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00060\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"d73cb949758c74c610e4e010838252bd_0","old_fingerprint":"d73cb949758c74c610e4e010838252bd_12","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00061\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00062.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00062.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"2873c5416dbd0e124abc5d064b24a7ab_0","old_fingerprint":"2873c5416dbd0e124abc5d064b24a7ab_13","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00062\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"e31a64ab9129977d2c1dceb8baed3241_0","old_fingerprint":"e31a64ab9129977d2c1dceb8baed3241_14","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00063\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"e5ce037a4267c198e60a6d7a9fb5d64c_0","old_fingerprint":"e5ce037a4267c198e60a6d7a9fb5d64c_15","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00064\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00065.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00065.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"967b030b3b42e4a3677662e70c172baf_0","old_fingerprint":"967b030b3b42e4a3677662e70c172baf_16","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00065\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00069.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00069.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"b4aa4ae2e441edf6819d971534607bcd_0","old_fingerprint":"b4aa4ae2e441edf6819d971534607bcd_17","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00069\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"022b1af80c49e95f05e3215cdfe17ec6_0","old_fingerprint":"022b1af80c49e95f05e3215cdfe17ec6_18","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00070\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"537906a954b9b13ee3503c0f2c23a500_0","old_fingerprint":"537906a954b9b13ee3503c0f2c23a500_19","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00071\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00072.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00072.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"52e0266f59f9fbf65f6f45138d41b9ed_0","old_fingerprint":"52e0266f59f9fbf65f6f45138d41b9ed_20","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00072\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"8a2a7468c76ab3207e163ccb2771a727_0","old_fingerprint":"8a2a7468c76ab3207e163ccb2771a727_21","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00073\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00074.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00074.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"3600a095007beb0056d7e54c60bce863_0","old_fingerprint":"3600a095007beb0056d7e54c60bce863_22","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00074\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00075.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00075.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"fea92e28ac2f1a7d00c5c8c0aa68d642_0","old_fingerprint":"fea92e28ac2f1a7d00c5c8c0aa68d642_23","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00075\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00076.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00076.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"609ed69a28318bb7c4874f13e4025656_0","old_fingerprint":"609ed69a28318bb7c4874f13e4025656_24","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00076\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00077.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00077.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"91405747c4dbf46c312e967c1a0c8bb0_0","old_fingerprint":"91405747c4dbf46c312e967c1a0c8bb0_25","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00077\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":74}},"sink":{"start":37,"end":37,"column":{"start":17,"end":74},"content":""},"parent_line_number":37,"fingerprint":"19d926470dc1a1f9396ba2f325bd3996_0","old_fingerprint":"19d926470dc1a1f9396ba2f325bd3996_26","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00090\", \"ls\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":92}},"sink":{"start":37,"end":37,"column":{"start":17,"end":92},"content":""},"parent_line_number":37,"fingerprint":"47465c3ec85d5bcf767cf937f4bc5a53_0","old_fingerprint":"47465c3ec85d5bcf767cf937f4bc5a53_27","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00091\", \"FOO%3Decho+Injection\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00092.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00092.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":92}},"sink":{"start":37,"end":37,"column":{"start":17,"end":92},"content":""},"parent_line_number":37,"fingerprint":"4638fc92f91e747a819e95a86b18a628_0","old_fingerprint":"4638fc92f91e747a819e95a86b18a628_28","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00092\", \"FOO%3Decho+Injection\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00093.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00093.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":74}},"sink":{"start":37,"end":37,"column":{"start":17,"end":74},"content":""},"parent_line_number":37,"fingerprint":"3e65af5e14242687972e047af460160c_0","old_fingerprint":"3e65af5e14242687972e047af460160c_29","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00093\", \"ls\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00097.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00097.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"ca48b4bdfb56d810dbf1601d3fdf73f1_0","old_fingerprint":"ca48b4bdfb56d810dbf1601d3fdf73f1_30","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00097\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"262e726506aaa3e13411f4df184dab65_0","old_fingerprint":"262e726506aaa3e13411f4df184dab65_31","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00098\", \"my_user_id\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00099.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00099.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":81}},"sink":{"start":37,"end":37,"column":{"start":17,"end":81},"content":""},"parent_line_number":37,"fingerprint":"a8d0d5c73fb600296860b9c9c112c4c3_0","old_fingerprint":"a8d0d5c73fb600296860b9c9c112c4c3_32","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00099\", \"my_userid\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00100.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00100.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"fcb5da3482215e79465782a1ecf0bb89_0","old_fingerprint":"fcb5da3482215e79465782a1ecf0bb89_33","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00100\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00101.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00101.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"eb2c6dac40bd63f2658aa5c2fa7355d1_0","old_fingerprint":"eb2c6dac40bd63f2658aa5c2fa7355d1_34","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00101\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"34c3dd4e7d59e4735e1d21e3d0f5952a_0","old_fingerprint":"34c3dd4e7d59e4735e1d21e3d0f5952a_35","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00102\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"4cdbbcbea9bbaa25200fd295e8deeb37_0","old_fingerprint":"4cdbbcbea9bbaa25200fd295e8deeb37_36","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00103\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"0907ad421fe3b234c7e13d6dc2bef358_0","old_fingerprint":"0907ad421fe3b234c7e13d6dc2bef358_37","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00104\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"d3aac294934c179b1a677d1ece7432cc_0","old_fingerprint":"d3aac294934c179b1a677d1ece7432cc_38","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00105\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00106.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00106.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"746db644e5311b6aa1928b9028152d5c_0","old_fingerprint":"746db644e5311b6aa1928b9028152d5c_39","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00106\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00107.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00107.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"0a4f6c0d48876d36941cc6e07021fc24_0","old_fingerprint":"0a4f6c0d48876d36941cc6e07021fc24_40","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00107\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"b03b40a8e05b032063425e0729b63105_0","old_fingerprint":"b03b40a8e05b032063425e0729b63105_41","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00108\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"18d7381fc192d02e1db02c8dfeebf637_0","old_fingerprint":"18d7381fc192d02e1db02c8dfeebf637_42","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00109\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00110.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00110.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"d9f9c9025b1c1fc28d271cab915d4e35_0","old_fingerprint":"d9f9c9025b1c1fc28d271cab915d4e35_43","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00110\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00111.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00111.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"967115c6fe771dc4c407c92870597b9a_0","old_fingerprint":"967115c6fe771dc4c407c92870597b9a_44","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00111\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"c12c12d8204fc266e9e7982c9852c12d_0","old_fingerprint":"c12c12d8204fc266e9e7982c9852c12d_45","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00112\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00113.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00113.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"ef4080ec1d63552ecdbfdeb0add84f98_0","old_fingerprint":"ef4080ec1d63552ecdbfdeb0add84f98_46","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00113\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"a5155e75aee8d84633d84572ec1fc132_0","old_fingerprint":"a5155e75aee8d84633d84572ec1fc132_47","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00114\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00115.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00115.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"c398f7d09c6ce483029ef77ef1fad55e_0","old_fingerprint":"c398f7d09c6ce483029ef77ef1fad55e_48","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00115\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00116.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00116.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"5d5aaae1b885ed92bd29ad70e2e37f3d_0","old_fingerprint":"5d5aaae1b885ed92bd29ad70e2e37f3d_49","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00116\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"c7fe0539fac3b263d03b8993577458fb_0","old_fingerprint":"c7fe0539fac3b263d03b8993577458fb_50","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00117\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"309e3a2692f5cac505dd1409bbc40f35_0","old_fingerprint":"309e3a2692f5cac505dd1409bbc40f35_51","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00118\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00942.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00942.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"f4405f467ebda40cf442ee4ed7158a04_0","old_fingerprint":"f4405f467ebda40cf442ee4ed7158a04_52","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00942\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00943.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00943.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"3aeb09052a8d54bee4862daa626665bc_0","old_fingerprint":"3aeb09052a8d54bee4862daa626665bc_53","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00943\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00944.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00944.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"122ba27e42f2e4a6ddb91b54c8ad1aa7_0","old_fingerprint":"122ba27e42f2e4a6ddb91b54c8ad1aa7_54","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00944\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"5e90f4b07713dfab354674a7ecceea71_0","old_fingerprint":"5e90f4b07713dfab354674a7ecceea71_55","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00945\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"f8bf5c8583f1296061cc7649f613bbd4_0","old_fingerprint":"f8bf5c8583f1296061cc7649f613bbd4_56","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00946\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"62be80650c3293c73796e333beb461a9_0","old_fingerprint":"62be80650c3293c73796e333beb461a9_57","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00947\", \"Ms+Bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"1e15ac5b07e85a1c3671959a55c8ccc2_0","old_fingerprint":"1e15ac5b07e85a1c3671959a55c8ccc2_58","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00948\", \"Ms+Bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"af72fd962255511d618902512502e321_0","old_fingerprint":"af72fd962255511d618902512502e321_59","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00949\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"a477cc72639e7197fe3d2174309a28fd_0","old_fingerprint":"a477cc72639e7197fe3d2174309a28fd_60","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00950\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"f678c5b0e1de5932552d097957088e34_0","old_fingerprint":"f678c5b0e1de5932552d097957088e34_61","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00951\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"220ea56dada7b66de3fa676c2873efae_0","old_fingerprint":"220ea56dada7b66de3fa676c2873efae_62","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00952\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"31351f2d2cf562139ffe3dd70a6b7322_0","old_fingerprint":"31351f2d2cf562139ffe3dd70a6b7322_63","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00953\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"f669d68c9bfb5b6359df84360bf608c9_0","old_fingerprint":"f669d68c9bfb5b6359df84360bf608c9_64","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00954\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"6c97a42a51214b17e0103070bf5e50eb_0","old_fingerprint":"6c97a42a51214b17e0103070bf5e50eb_65","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00955\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"88c469c30e4bd521e762b9e039b6a1bf_0","old_fingerprint":"88c469c30e4bd521e762b9e039b6a1bf_66","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00956\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00957.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00957.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"2eb14ba337e84ae9ae444d9519a1cb83_0","old_fingerprint":"2eb14ba337e84ae9ae444d9519a1cb83_67","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00957\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00958.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00958.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"f76f68ed01e777ecd42dad47ffe3c364_0","old_fingerprint":"f76f68ed01e777ecd42dad47ffe3c364_68","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00958\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"7cd7739f70ed4a3e3114a8228696d2a0_0","old_fingerprint":"7cd7739f70ed4a3e3114a8228696d2a0_69","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00959\", \"Ms+Bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"62c70fcc3683346dcb3fc1f1321a23cf_0","old_fingerprint":"62c70fcc3683346dcb3fc1f1321a23cf_70","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00961\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00962.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00962.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"96a44a96a672db92e7e9e76eab476cf2_0","old_fingerprint":"96a44a96a672db92e7e9e76eab476cf2_71","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00962\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"1caaa98ab06d992d09f54245ed848ad3_0","old_fingerprint":"1caaa98ab06d992d09f54245ed848ad3_72","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00963\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00964.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00964.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"a256cdc8775aa145ea7bc5f24a1464d7_0","old_fingerprint":"a256cdc8775aa145ea7bc5f24a1464d7_73","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00964\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00965.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00965.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"83e7c5b25d2331594b5729d5a6284afb_0","old_fingerprint":"83e7c5b25d2331594b5729d5a6284afb_74","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00965\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00966.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00966.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"c48590da5c777627fced7030f90c3ad6_0","old_fingerprint":"c48590da5c777627fced7030f90c3ad6_75","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00966\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00967.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00967.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"b8e9bf282b3b3119e2f1d979cd7380ff_0","old_fingerprint":"b8e9bf282b3b3119e2f1d979cd7380ff_76","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00967\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00968.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00968.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"51fc326433ef7ba8b4f4df66b6dde47f_0","old_fingerprint":"51fc326433ef7ba8b4f4df66b6dde47f_77","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00968\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00969.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00969.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"603ca1a755d724ea313bbd8117c77d81_0","old_fingerprint":"603ca1a755d724ea313bbd8117c77d81_78","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00969\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00970.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00970.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"93b32315416c4075f3b1dc79749e8bf1_0","old_fingerprint":"93b32315416c4075f3b1dc79749e8bf1_79","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00970\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":81}},"sink":{"start":37,"end":37,"column":{"start":17,"end":81},"content":""},"parent_line_number":37,"fingerprint":"a9206a129b41dd0a7e00bc331e3b92c1_0","old_fingerprint":"a9206a129b41dd0a7e00bc331e3b92c1_80","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00978\", \"localhost\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":73}},"sink":{"start":37,"end":37,"column":{"start":17,"end":73},"content":""},"parent_line_number":37,"fingerprint":"168fe395b966ab0ca87e4104e8647ea7_0","old_fingerprint":"168fe395b966ab0ca87e4104e8647ea7_81","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00979\", \".\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":92}},"sink":{"start":37,"end":37,"column":{"start":17,"end":92},"content":""},"parent_line_number":37,"fingerprint":"ad68772566279253d76eae5ef656681b_0","old_fingerprint":"ad68772566279253d76eae5ef656681b_82","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00980\", \"FOO%3Decho+Injection\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":73}},"sink":{"start":37,"end":37,"column":{"start":17,"end":73},"content":""},"parent_line_number":37,"fingerprint":"6302da405d56287d46bd2020e10d860a_0","old_fingerprint":"6302da405d56287d46bd2020e10d860a_83","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00981\", \".\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":92}},"sink":{"start":37,"end":37,"column":{"start":17,"end":92},"content":""},"parent_line_number":37,"fingerprint":"8c31acafdf6f5af70c9f691ae26c7adc_0","old_fingerprint":"8c31acafdf6f5af70c9f691ae26c7adc_84","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00982\", \"FOO%3Decho+Injection\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":92}},"sink":{"start":37,"end":37,"column":{"start":17,"end":92},"content":""},"parent_line_number":37,"fingerprint":"60aca25a45bf5638e0caa591bf8c7d3c_0","old_fingerprint":"60aca25a45bf5638e0caa591bf8c7d3c_85","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00983\", \"FOO%3Decho+Injection\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"e587821b74370c62d7b811e49b2d34c1_0","old_fingerprint":"e587821b74370c62d7b811e49b2d34c1_86","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00991\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"3d5b582d5964ff9727b8fbf09c886d9f_0","old_fingerprint":"3d5b582d5964ff9727b8fbf09c886d9f_87","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00992\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"131f53b7a46834961e771ce889450ae9_0","old_fingerprint":"131f53b7a46834961e771ce889450ae9_88","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00993\", \"my_user_id\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"44bdbcb1ad6de0cddd6c78acd3e4abcc_0","old_fingerprint":"44bdbcb1ad6de0cddd6c78acd3e4abcc_89","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00994\", \"my_user_id\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"50003ec7812e30500cd0a40373822d0a_0","old_fingerprint":"50003ec7812e30500cd0a40373822d0a_90","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest00995\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":38,"column":{"start":17,"end":95}},"sink":{"start":37,"end":38,"column":{"start":17,"end":95},"content":""},"parent_line_number":37,"fingerprint":"84c9751c30e6f234c865d106ffad79aa_0","old_fingerprint":"84c9751c30e6f234c865d106ffad79aa_91","code_extract":"                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00996\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":38,"column":{"start":17,"end":95}},"sink":{"start":37,"end":38,"column":{"start":17,"end":95},"content":""},"parent_line_number":37,"fingerprint":"75585bbcaedfdc623d66a4d5b342bf11_0","old_fingerprint":"75585bbcaedfdc623d66a4d5b342bf11_92","code_extract":"                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00997\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":38,"column":{"start":17,"end":95}},"sink":{"start":37,"end":38,"column":{"start":17,"end":95},"content":""},"parent_line_number":37,"fingerprint":"6fd6b2ddab8abe9b317336d4182a732d_0","old_fingerprint":"6fd6b2ddab8abe9b317336d4182a732d_93","code_extract":"                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00998\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":38,"column":{"start":17,"end":95}},"sink":{"start":37,"end":38,"column":{"start":17,"end":95},"content":""},"parent_line_number":37,"fingerprint":"714aba98413a882e34165e80d3a08331_0","old_fingerprint":"714aba98413a882e34165e80d3a08331_94","code_extract":"                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00999\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":38,"column":{"start":17,"end":95}},"sink":{"start":37,"end":38,"column":{"start":17,"end":95},"content":""},"parent_line_number":37,"fingerprint":"041dff030254ea85dc0eb9cd17dc0164_0","old_fingerprint":"041dff030254ea85dc0eb9cd17dc0164_95","code_extract":"                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01000\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"e6d83c031e1af2ebea06e636c0c84d35_0","old_fingerprint":"e6d83c031e1af2ebea06e636c0c84d35_96","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01001\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"c68050038812a57dfffcefea111a6724_0","old_fingerprint":"c68050038812a57dfffcefea111a6724_97","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01002\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"5ad9af79a5f0e95260c674a6cfe7ba44_0","old_fingerprint":"5ad9af79a5f0e95260c674a6cfe7ba44_98","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01003\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"66cd2b9c783384a3f4d2d30e0e01cd81_0","old_fingerprint":"66cd2b9c783384a3f4d2d30e0e01cd81_99","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01004\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"85e27e9dbcb6b54de798742dc6d774d9_0","old_fingerprint":"85e27e9dbcb6b54de798742dc6d774d9_100","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01005\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"2d01fb519c7937742285f61b26fcb61b_0","old_fingerprint":"2d01fb519c7937742285f61b26fcb61b_101","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01006\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"0dfb654ca1938319f598c36bbd8fa4c0_0","old_fingerprint":"0dfb654ca1938319f598c36bbd8fa4c0_102","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01007\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"acadde03c100f6f688f0da2839dab153_0","old_fingerprint":"acadde03c100f6f688f0da2839dab153_103","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01008\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"5b6b53697990effb332ca1b27c6b90ea_0","old_fingerprint":"5b6b53697990effb332ca1b27c6b90ea_104","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01009\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"9c3d1595cc9c2d3d505171d8c3afaf85_0","old_fingerprint":"9c3d1595cc9c2d3d505171d8c3afaf85_105","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01010\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"3b0fd280ada237d1e00594ef041d628b_0","old_fingerprint":"3b0fd280ada237d1e00594ef041d628b_106","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01011\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"a86b3fd366cf2ab54be444aa64896183_0","old_fingerprint":"a86b3fd366cf2ab54be444aa64896183_107","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01012\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"3259dfa15d79dfbea3fc5c71a57db055_0","old_fingerprint":"3259dfa15d79dfbea3fc5c71a57db055_108","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01013\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"9be177880506f0adaf8601c45da2cab3_0","old_fingerprint":"9be177880506f0adaf8601c45da2cab3_109","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01014\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"328e0bb7deecaca2554527b0daf263c5_0","old_fingerprint":"328e0bb7deecaca2554527b0daf263c5_110","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01822\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"1538778211883f72b7c3379d6411be25_0","old_fingerprint":"1538778211883f72b7c3379d6411be25_111","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01823\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01824.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01824.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"6e2814d1bed92dea500903705940a036_0","old_fingerprint":"6e2814d1bed92dea500903705940a036_112","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01824\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01825.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01825.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"13f7e2aa66353e6cb16879a1cd01d4bb_0","old_fingerprint":"13f7e2aa66353e6cb16879a1cd01d4bb_113","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01825\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01826.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01826.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"56013734e9527c7f2ef997d59877a1e5_0","old_fingerprint":"56013734e9527c7f2ef997d59877a1e5_114","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01826\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01827.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01827.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"6b04bd9ad037383763d50225f218cdbf_0","old_fingerprint":"6b04bd9ad037383763d50225f218cdbf_115","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01827\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01828.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01828.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"c77f985fa704f8d288829a3252b89a8d_0","old_fingerprint":"c77f985fa704f8d288829a3252b89a8d_116","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01828\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"4fcd85ed5c1af3fad518b5216af94b58_0","old_fingerprint":"4fcd85ed5c1af3fad518b5216af94b58_117","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01829\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"61c781d55d762e366eaafb3e9f9b38a8_0","old_fingerprint":"61c781d55d762e366eaafb3e9f9b38a8_118","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01830\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"eab5db54e34b5570164a99c2dec2bb5d_0","old_fingerprint":"eab5db54e34b5570164a99c2dec2bb5d_119","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01831\", \"Ms+Bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"a27d6ea28687582aa3128bdcc883e2a7_0","old_fingerprint":"a27d6ea28687582aa3128bdcc883e2a7_120","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01832\", \"Ms+Bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"6f04e1f39747464f26cbed43629896cc_0","old_fingerprint":"6f04e1f39747464f26cbed43629896cc_121","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01833\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"94083d9728c4f50d29286235bcfd5f48_0","old_fingerprint":"94083d9728c4f50d29286235bcfd5f48_122","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01834\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"c191f061a1d467278490dbe55be75ef1_0","old_fingerprint":"c191f061a1d467278490dbe55be75ef1_123","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01835\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"883a895425d81d664edcf6070a4d1922_0","old_fingerprint":"883a895425d81d664edcf6070a4d1922_124","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01836\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"d4be8b9b0b62220847d331036bd7064e_0","old_fingerprint":"d4be8b9b0b62220847d331036bd7064e_125","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01837\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"e7bfa4bcf8272e0b43cc5b4a1d06a540_0","old_fingerprint":"e7bfa4bcf8272e0b43cc5b4a1d06a540_126","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01838\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"e8ebca8f9377a6653dec42a3e9710eac_0","old_fingerprint":"e8ebca8f9377a6653dec42a3e9710eac_127","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01839\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"3abc86e516eb3d8bc1645181faea3e11_0","old_fingerprint":"3abc86e516eb3d8bc1645181faea3e11_128","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01840\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":80}},"sink":{"start":37,"end":37,"column":{"start":17,"end":80},"content":""},"parent_line_number":37,"fingerprint":"65e1ad5496402986e37c9eb3e099d02b_0","old_fingerprint":"65e1ad5496402986e37c9eb3e099d02b_129","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01841\", \"FileName\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"742ee7df8eff735fb6618ec1989c0847_0","old_fingerprint":"742ee7df8eff735fb6618ec1989c0847_130","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01844\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"3e0669b933e92d29f034a9de47ba919f_0","old_fingerprint":"3e0669b933e92d29f034a9de47ba919f_131","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01845\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"a52a7127405121001f1cffa7cf01dd13_0","old_fingerprint":"a52a7127405121001f1cffa7cf01dd13_132","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01846\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01847.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01847.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"3edda47111c78c81c5381340d9e688c0_0","old_fingerprint":"3edda47111c78c81c5381340d9e688c0_133","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01847\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01848.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01848.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"5b78770a0b781ca6fd87cf12184ee512_0","old_fingerprint":"5b78770a0b781ca6fd87cf12184ee512_134","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01848\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01849.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01849.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"d42709d911c79cc99960f75387d8cf7e_0","old_fingerprint":"d42709d911c79cc99960f75387d8cf7e_135","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01849\", \"someSecret\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01850.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01850.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"8bcbca82053ca2d8266f40c31039f973_0","old_fingerprint":"8bcbca82053ca2d8266f40c31039f973_136","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01850\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01851.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01851.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"50bccd8f668204878593a6c5447ad915_0","old_fingerprint":"50bccd8f668204878593a6c5447ad915_137","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01851\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":78}},"sink":{"start":37,"end":37,"column":{"start":17,"end":78},"content":""},"parent_line_number":37,"fingerprint":"3885e0e71614d3e97b595617fcab620f_0","old_fingerprint":"3885e0e71614d3e97b595617fcab620f_138","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01852\", \"ECHOOO\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":74}},"sink":{"start":37,"end":37,"column":{"start":17,"end":74},"content":""},"parent_line_number":37,"fingerprint":"3d699915dfc9ad907bf87d0de892fc03_0","old_fingerprint":"3d699915dfc9ad907bf87d0de892fc03_139","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01864\", \"ls\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":74}},"sink":{"start":37,"end":37,"column":{"start":17,"end":74},"content":""},"parent_line_number":37,"fingerprint":"7e1a984f5ab402dc4f24c8be8ccd3911_0","old_fingerprint":"7e1a984f5ab402dc4f24c8be8ccd3911_140","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01865\", \"ls\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"5c4fad4cf4ad9295e46b0acbde9e8df0_0","old_fingerprint":"5c4fad4cf4ad9295e46b0acbde9e8df0_141","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01872\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":82}},"sink":{"start":37,"end":37,"column":{"start":17,"end":82},"content":""},"parent_line_number":37,"fingerprint":"bddc49a3af61eac3e45fe0c5359021f6_0","old_fingerprint":"bddc49a3af61eac3e45fe0c5359021f6_142","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01873\", \"my_user_id\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"36dacf3f400ec4e826ebe75aec98150c_0","old_fingerprint":"36dacf3f400ec4e826ebe75aec98150c_143","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01874\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":77}},"sink":{"start":37,"end":37,"column":{"start":17,"end":77},"content":""},"parent_line_number":37,"fingerprint":"f00eefcd77cea7a699dce2d6f5bc8481_0","old_fingerprint":"f00eefcd77cea7a699dce2d6f5bc8481_144","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01875\", \"color\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":81}},"sink":{"start":37,"end":37,"column":{"start":17,"end":81},"content":""},"parent_line_number":37,"fingerprint":"ccfe51ddbaa0ea012c4188255785be8c_0","old_fingerprint":"ccfe51ddbaa0ea012c4188255785be8c_145","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01876\", \"my_userid\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":38,"column":{"start":17,"end":95}},"sink":{"start":37,"end":38,"column":{"start":17,"end":95},"content":""},"parent_line_number":37,"fingerprint":"9f7a951bacf4bef88fe90e029f1f201a_0","old_fingerprint":"9f7a951bacf4bef88fe90e029f1f201a_146","code_extract":"                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01877\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"e274eb1bc277d5469d53a99298df764b_0","old_fingerprint":"e274eb1bc277d5469d53a99298df764b_147","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01878\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"902d99f14748614ed2f6537b8b7d74b0_0","old_fingerprint":"902d99f14748614ed2f6537b8b7d74b0_148","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01879\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"4ef2a99534c0b5d1894fc7895141c63a_0","old_fingerprint":"4ef2a99534c0b5d1894fc7895141c63a_149","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01880\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"fbeb3768e23ac0c128faacd748211cef_0","old_fingerprint":"fbeb3768e23ac0c128faacd748211cef_150","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01881\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"5b758bf25fc604bdd9fade1efa358423_0","old_fingerprint":"5b758bf25fc604bdd9fade1efa358423_151","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01882\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"1fd463fdfa04df6de9ca40845e8782e6_0","old_fingerprint":"1fd463fdfa04df6de9ca40845e8782e6_152","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01883\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"0fc45b739103aa133d1f867d74a4b925_0","old_fingerprint":"0fc45b739103aa133d1f867d74a4b925_153","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01884\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"0cdbe58d541743f4ae1480afb77b148c_0","old_fingerprint":"0cdbe58d541743f4ae1480afb77b148c_154","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01885\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"4e9d1bb280b18368632b0296f89d1f6f_0","old_fingerprint":"4e9d1bb280b18368632b0296f89d1f6f_155","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01886\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"a15189951099ffa8389e7af8c75ee94e_0","old_fingerprint":"a15189951099ffa8389e7af8c75ee94e_156","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01887\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"1ce89264aef512cea5a0394f5b0b22ff_0","old_fingerprint":"1ce89264aef512cea5a0394f5b0b22ff_157","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01888\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"baf097f9af05d4f64c1af2029331503d_0","old_fingerprint":"baf097f9af05d4f64c1af2029331503d_158","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01889\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"8a19bc85fc0b95e8b120c233d64b1570_0","old_fingerprint":"8a19bc85fc0b95e8b120c233d64b1570_159","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01890\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":75}},"sink":{"start":37,"end":37,"column":{"start":17,"end":75},"content":""},"parent_line_number":37,"fingerprint":"22a0444d5c7374933e88cd9916b3ea4e_0","old_fingerprint":"22a0444d5c7374933e88cd9916b3ea4e_160","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01891\", \"bar\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"b2b7f7eaf6807f50a2b74ae63a76b688_0","old_fingerprint":"b2b7f7eaf6807f50a2b74ae63a76b688_161","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01892\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"10944819b327b4db6a48ac0e1939ea5e_0","old_fingerprint":"10944819b327b4db6a48ac0e1939ea5e_162","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01893\", \"2222\");"},{"cwe_ids":["1004"],"id":"java_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```java\n  cookie.setHttpOnly(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only","line_number":37,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","category_groups":["PII","Personal Data"],"source":{"start":37,"end":37,"column":{"start":17,"end":76}},"sink":{"start":37,"end":37,"column":{"start":17,"end":76},"content":""},"parent_line_number":37,"fingerprint":"c8317947b3636d9a4462b3ab2075d323_0","old_fingerprint":"c8317947b3636d9a4462b3ab2075d323_163","code_extract":"                new javax.servlet.http.Cookie(\"BenchmarkTest01894\", \"2222\");"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00169.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00169.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":44,"end":92}},"sink":{"start":78,"end":78,"column":{"start":44,"end":92},"content":""},"parent_line_number":78,"fingerprint":"0373c2df95ea3ae71bcfc7b848e87d06_0","old_fingerprint":"0373c2df95ea3ae71bcfc7b848e87d06_23","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00170.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00170.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":44,"end":92}},"sink":{"start":89,"end":89,"column":{"start":44,"end":92},"content":""},"parent_line_number":89,"fingerprint":"d75fc5cadb2b73cce9041b587cd1d262_0","old_fingerprint":"d75fc5cadb2b73cce9041b587cd1d262_32","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00241.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00241.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":44,"end":92}},"sink":{"start":83,"end":83,"column":{"start":44,"end":92},"content":""},"parent_line_number":83,"fingerprint":"8b2082fd80b82c8f1de1465ebba7d66a_0","old_fingerprint":"8b2082fd80b82c8f1de1465ebba7d66a_27","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00300.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00300.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":44,"end":92}},"sink":{"start":77,"end":77,"column":{"start":44,"end":92},"content":""},"parent_line_number":77,"fingerprint":"19631c2f7e13bcf5248719f6946edd7b_0","old_fingerprint":"19631c2f7e13bcf5248719f6946edd7b_21","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00348.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00348.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":44,"end":92}},"sink":{"start":62,"end":62,"column":{"start":44,"end":92},"content":""},"parent_line_number":62,"fingerprint":"599689f9ae094bb61d3737d0a26d2bad_0","old_fingerprint":"599689f9ae094bb61d3737d0a26d2bad_0","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00403.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00403.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":44,"end":92}},"sink":{"start":68,"end":68,"column":{"start":44,"end":92},"content":""},"parent_line_number":68,"fingerprint":"295151e877d353bb5708dd721951ce28_0","old_fingerprint":"295151e877d353bb5708dd721951ce28_12","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00491.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00491.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":44,"end":92}},"sink":{"start":71,"end":71,"column":{"start":44,"end":92},"content":""},"parent_line_number":71,"fingerprint":"9f0f6a6883d6fb87e38fde16d51e1356_0","old_fingerprint":"9f0f6a6883d6fb87e38fde16d51e1356_18","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00565.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00565.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":44,"end":92}},"sink":{"start":77,"end":77,"column":{"start":44,"end":92},"content":""},"parent_line_number":77,"fingerprint":"19a0352f7ae3768ed6b5b56b4d566bda_0","old_fingerprint":"19a0352f7ae3768ed6b5b56b4d566bda_20","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00566.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00566.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":44,"end":92}},"sink":{"start":79,"end":79,"column":{"start":44,"end":92},"content":""},"parent_line_number":79,"fingerprint":"9a32971f31ae49f1929b929410def856_0","old_fingerprint":"9a32971f31ae49f1929b929410def856_25","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00736.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00736.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":44,"end":92}},"sink":{"start":70,"end":70,"column":{"start":44,"end":92},"content":""},"parent_line_number":70,"fingerprint":"be2b9f22b2aa24c49141a11ed501f735_0","old_fingerprint":"be2b9f22b2aa24c49141a11ed501f735_14","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00820.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00820.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":44,"end":92}},"sink":{"start":87,"end":87,"column":{"start":44,"end":92},"content":""},"parent_line_number":87,"fingerprint":"1046627e16b9ec55aaadbda8611da6a6_0","old_fingerprint":"1046627e16b9ec55aaadbda8611da6a6_30","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00821.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00821.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":44,"end":92}},"sink":{"start":88,"end":88,"column":{"start":44,"end":92},"content":""},"parent_line_number":88,"fingerprint":"fcc3c67a5ed3a8f28e4386e381c2192e_0","old_fingerprint":"fcc3c67a5ed3a8f28e4386e381c2192e_31","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00903.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00903.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":44,"end":92}},"sink":{"start":83,"end":83,"column":{"start":44,"end":92},"content":""},"parent_line_number":83,"fingerprint":"207c76b2acf2d82191500b971c4e0948_0","old_fingerprint":"207c76b2acf2d82191500b971c4e0948_26","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01061.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01061.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":44,"end":92}},"sink":{"start":68,"end":68,"column":{"start":44,"end":92},"content":""},"parent_line_number":68,"fingerprint":"69eed6ce423b492fa5180e5ba17601f0_0","old_fingerprint":"69eed6ce423b492fa5180e5ba17601f0_13","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01134.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01134.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":44,"end":92}},"sink":{"start":78,"end":78,"column":{"start":44,"end":92},"content":""},"parent_line_number":78,"fingerprint":"ffb2a8e30d3add117170c2487ef2d898_0","old_fingerprint":"ffb2a8e30d3add117170c2487ef2d898_22","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01185.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01185.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":44,"end":92}},"sink":{"start":70,"end":70,"column":{"start":44,"end":92},"content":""},"parent_line_number":70,"fingerprint":"303f6aaf7459dfd958c39463e895aa2f_0","old_fingerprint":"303f6aaf7459dfd958c39463e895aa2f_15","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01186.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01186.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":44,"end":92}},"sink":{"start":70,"end":70,"column":{"start":44,"end":92},"content":""},"parent_line_number":70,"fingerprint":"2a6606f79adbb0def46740da3b22d317_0","old_fingerprint":"2a6606f79adbb0def46740da3b22d317_16","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01187.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01187.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":44,"end":92}},"sink":{"start":70,"end":70,"column":{"start":44,"end":92},"content":""},"parent_line_number":70,"fingerprint":"17c4c585db5a94047c267b0308d13a29_0","old_fingerprint":"17c4c585db5a94047c267b0308d13a29_17","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01280.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01280.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":44,"end":92}},"sink":{"start":63,"end":63,"column":{"start":44,"end":92},"content":""},"parent_line_number":63,"fingerprint":"39391502ddfe1ad2e6f09e3a5ba0bbc4_0","old_fingerprint":"39391502ddfe1ad2e6f09e3a5ba0bbc4_5","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01281.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01281.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":44,"end":92}},"sink":{"start":63,"end":63,"column":{"start":44,"end":92},"content":""},"parent_line_number":63,"fingerprint":"fdad3bd6d4d5179c339cdf6ba785b83f_0","old_fingerprint":"fdad3bd6d4d5179c339cdf6ba785b83f_3","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01282.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01282.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":44,"end":92}},"sink":{"start":63,"end":63,"column":{"start":44,"end":92},"content":""},"parent_line_number":63,"fingerprint":"5be33e20a108c58d6cac53c8764cd4c2_0","old_fingerprint":"5be33e20a108c58d6cac53c8764cd4c2_4","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01283.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01283.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":44,"end":92}},"sink":{"start":63,"end":63,"column":{"start":44,"end":92},"content":""},"parent_line_number":63,"fingerprint":"9e90bd1e10cd87171bd90104c5608fd0_0","old_fingerprint":"9e90bd1e10cd87171bd90104c5608fd0_1","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01521.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01521.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":44,"end":92}},"sink":{"start":65,"end":65,"column":{"start":44,"end":92},"content":""},"parent_line_number":65,"fingerprint":"754e16b73ae4503390124c6fafb5db00_0","old_fingerprint":"754e16b73ae4503390124c6fafb5db00_9","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01682.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01682.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":44,"end":92}},"sink":{"start":87,"end":87,"column":{"start":44,"end":92},"content":""},"parent_line_number":87,"fingerprint":"2e4148187a34932883a476a13aa3cedb_0","old_fingerprint":"2e4148187a34932883a476a13aa3cedb_29","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01683.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01683.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":44,"end":92}},"sink":{"start":87,"end":87,"column":{"start":44,"end":92},"content":""},"parent_line_number":87,"fingerprint":"9574971bf8aca19d0f4ff6e11900012e_0","old_fingerprint":"9574971bf8aca19d0f4ff6e11900012e_28","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01789.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01789.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":44,"end":92}},"sink":{"start":64,"end":64,"column":{"start":44,"end":92},"content":""},"parent_line_number":64,"fingerprint":"743ed5aeea3ed4da0e042ac80ddcf928_0","old_fingerprint":"743ed5aeea3ed4da0e042ac80ddcf928_6","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02005.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":44,"end":92}},"sink":{"start":78,"end":78,"column":{"start":44,"end":92},"content":""},"parent_line_number":78,"fingerprint":"2e1da5b9f564066275c207d2fa1adf35_0","old_fingerprint":"2e1da5b9f564066275c207d2fa1adf35_24","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02142.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02142.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":44,"end":92}},"sink":{"start":63,"end":63,"column":{"start":44,"end":92},"content":""},"parent_line_number":63,"fingerprint":"ae3890f9b23b87b2fbf325c001fd8ca8_0","old_fingerprint":"ae3890f9b23b87b2fbf325c001fd8ca8_2","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02339.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02339.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":44,"end":92}},"sink":{"start":77,"end":77,"column":{"start":44,"end":92},"content":""},"parent_line_number":77,"fingerprint":"5e2f513d4a2e665ea81d65e92e44255f_0","old_fingerprint":"5e2f513d4a2e665ea81d65e92e44255f_19","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02427.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02427.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":44,"end":92}},"sink":{"start":65,"end":65,"column":{"start":44,"end":92},"content":""},"parent_line_number":65,"fingerprint":"00a751264593d1a9d471f0ad92dce242_0","old_fingerprint":"00a751264593d1a9d471f0ad92dce242_10","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02507.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02507.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":44,"end":92}},"sink":{"start":65,"end":65,"column":{"start":44,"end":92},"content":""},"parent_line_number":65,"fingerprint":"fb989fed7cd894c537590a4a031938a9_0","old_fingerprint":"fb989fed7cd894c537590a4a031938a9_11","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02709.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02709.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":44,"end":92}},"sink":{"start":64,"end":64,"column":{"start":44,"end":92},"content":""},"parent_line_number":64,"fingerprint":"d85f56229ad282e9004f1f9ac9e5d403_0","old_fingerprint":"d85f56229ad282e9004f1f9ac9e5d403_7","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `setSecure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02710.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02710.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":44,"end":92}},"sink":{"start":64,"end":64,"column":{"start":44,"end":92},"content":""},"parent_line_number":64,"fingerprint":"c887b26c234c8517fa3524390e9114cb_0","old_fingerprint":"c887b26c234c8517fa3524390e9114cb_8","code_extract":"        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00087.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00087.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":9,"end":32}},"sink":{"start":91,"end":91,"column":{"start":9,"end":32},"content":""},"parent_line_number":91,"fingerprint":"9231150c274357a732c3764297ad2fca_0","old_fingerprint":"9231150c274357a732c3764297ad2fca_35","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00169.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00169.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":9,"end":32}},"sink":{"start":80,"end":80,"column":{"start":9,"end":32},"content":""},"parent_line_number":80,"fingerprint":"004098ac3012bce57e2f4e35a90803ea_0","old_fingerprint":"004098ac3012bce57e2f4e35a90803ea_22","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00170.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00170.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":9,"end":32}},"sink":{"start":91,"end":91,"column":{"start":9,"end":32},"content":""},"parent_line_number":91,"fingerprint":"a4c957904f17d21eefe65bcbf76814fc_0","old_fingerprint":"a4c957904f17d21eefe65bcbf76814fc_34","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00241.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00241.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":9,"end":32}},"sink":{"start":85,"end":85,"column":{"start":9,"end":32},"content":""},"parent_line_number":85,"fingerprint":"f7c5395b0386b549c78fe0a415c41297_0","old_fingerprint":"f7c5395b0386b549c78fe0a415c41297_29","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00300.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00300.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":9,"end":32}},"sink":{"start":79,"end":79,"column":{"start":9,"end":32},"content":""},"parent_line_number":79,"fingerprint":"6945a183153dd9f967d6837e0230aedc_0","old_fingerprint":"6945a183153dd9f967d6837e0230aedc_21","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00348.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00348.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":32}},"sink":{"start":64,"end":64,"column":{"start":9,"end":32},"content":""},"parent_line_number":64,"fingerprint":"0c0c22f2f3a7ef34dd2f4f0a0bae98ae_0","old_fingerprint":"0c0c22f2f3a7ef34dd2f4f0a0bae98ae_0","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00403.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00403.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":9,"end":32}},"sink":{"start":70,"end":70,"column":{"start":9,"end":32},"content":""},"parent_line_number":70,"fingerprint":"09ec240c992cb57e4aa8bef2ae3dfd7e_0","old_fingerprint":"09ec240c992cb57e4aa8bef2ae3dfd7e_13","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00491.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00491.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":32}},"sink":{"start":73,"end":73,"column":{"start":9,"end":32},"content":""},"parent_line_number":73,"fingerprint":"d41deb5d5232ac9b5313efaa31d105b7_0","old_fingerprint":"d41deb5d5232ac9b5313efaa31d105b7_18","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00565.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00565.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":9,"end":32}},"sink":{"start":79,"end":79,"column":{"start":9,"end":32},"content":""},"parent_line_number":79,"fingerprint":"8239a9ccdab3e0be40656f6b0c00359c_0","old_fingerprint":"8239a9ccdab3e0be40656f6b0c00359c_20","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00566.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00566.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":9,"end":32}},"sink":{"start":81,"end":81,"column":{"start":9,"end":32},"content":""},"parent_line_number":81,"fingerprint":"846d1ca84d680546b68185a05ab05314_0","old_fingerprint":"846d1ca84d680546b68185a05ab05314_25","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00736.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00736.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":9,"end":32}},"sink":{"start":72,"end":72,"column":{"start":9,"end":32},"content":""},"parent_line_number":72,"fingerprint":"eae47ce005a972da5777890cc370f53f_0","old_fingerprint":"eae47ce005a972da5777890cc370f53f_17","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00820.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00820.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":9,"end":32}},"sink":{"start":89,"end":89,"column":{"start":9,"end":32},"content":""},"parent_line_number":89,"fingerprint":"03561731049785236c189d010750a97f_0","old_fingerprint":"03561731049785236c189d010750a97f_32","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00821.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00821.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":9,"end":32}},"sink":{"start":90,"end":90,"column":{"start":9,"end":32},"content":""},"parent_line_number":90,"fingerprint":"fa72da364f2548975f50f694478fd518_0","old_fingerprint":"fa72da364f2548975f50f694478fd518_33","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00903.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00903.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":9,"end":32}},"sink":{"start":85,"end":85,"column":{"start":9,"end":32},"content":""},"parent_line_number":85,"fingerprint":"7a06a302b588f5b72620481c944a6688_0","old_fingerprint":"7a06a302b588f5b72620481c944a6688_28","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00977.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00977.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":9,"end":32}},"sink":{"start":84,"end":84,"column":{"start":9,"end":32},"content":""},"parent_line_number":84,"fingerprint":"09c5a1f7d6fa4f5ef8cca7b4e51ecdef_0","old_fingerprint":"09c5a1f7d6fa4f5ef8cca7b4e51ecdef_26","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01061.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01061.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":9,"end":32}},"sink":{"start":70,"end":70,"column":{"start":9,"end":32},"content":""},"parent_line_number":70,"fingerprint":"a68e875850d2bc1b5ca82e02cfe24c90_0","old_fingerprint":"a68e875850d2bc1b5ca82e02cfe24c90_12","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01134.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01134.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":9,"end":32}},"sink":{"start":80,"end":80,"column":{"start":9,"end":32},"content":""},"parent_line_number":80,"fingerprint":"3f9c2940d0a81581edd09160fed13dd3_0","old_fingerprint":"3f9c2940d0a81581edd09160fed13dd3_24","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01185.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01185.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":9,"end":32}},"sink":{"start":72,"end":72,"column":{"start":9,"end":32},"content":""},"parent_line_number":72,"fingerprint":"ec0aa1dc1afa203dcfe88ada1c8266f9_0","old_fingerprint":"ec0aa1dc1afa203dcfe88ada1c8266f9_15","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01186.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01186.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":9,"end":32}},"sink":{"start":72,"end":72,"column":{"start":9,"end":32},"content":""},"parent_line_number":72,"fingerprint":"3fb6944de4f50950ef1c1cb3bf1e9162_0","old_fingerprint":"3fb6944de4f50950ef1c1cb3bf1e9162_14","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01187.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01187.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":9,"end":32}},"sink":{"start":72,"end":72,"column":{"start":9,"end":32},"content":""},"parent_line_number":72,"fingerprint":"052c4be9b8258a0d520362a64c91375d_0","old_fingerprint":"052c4be9b8258a0d520362a64c91375d_16","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01280.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01280.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":32}},"sink":{"start":65,"end":65,"column":{"start":9,"end":32},"content":""},"parent_line_number":65,"fingerprint":"a7f2a842b1c9afa47f1b7098694ddce1_0","old_fingerprint":"a7f2a842b1c9afa47f1b7098694ddce1_2","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01281.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01281.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":32}},"sink":{"start":65,"end":65,"column":{"start":9,"end":32},"content":""},"parent_line_number":65,"fingerprint":"e4fffadf4f43c24f75163bad3bb35fff_0","old_fingerprint":"e4fffadf4f43c24f75163bad3bb35fff_3","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01282.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01282.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":32}},"sink":{"start":65,"end":65,"column":{"start":9,"end":32},"content":""},"parent_line_number":65,"fingerprint":"aced63f0ad305fbf79b48896ac7b03fe_0","old_fingerprint":"aced63f0ad305fbf79b48896ac7b03fe_4","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01283.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01283.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":32}},"sink":{"start":65,"end":65,"column":{"start":9,"end":32},"content":""},"parent_line_number":65,"fingerprint":"9d163e38890a970d958861a24166920b_0","old_fingerprint":"9d163e38890a970d958861a24166920b_1","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01521.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01521.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":9,"end":32}},"sink":{"start":67,"end":67,"column":{"start":9,"end":32},"content":""},"parent_line_number":67,"fingerprint":"468e54ea880f92539ad4569012610b9f_0","old_fingerprint":"468e54ea880f92539ad4569012610b9f_9","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01682.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01682.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":9,"end":32}},"sink":{"start":89,"end":89,"column":{"start":9,"end":32},"content":""},"parent_line_number":89,"fingerprint":"2b2c4742fa88ce35c5b0ad6f5369d66d_0","old_fingerprint":"2b2c4742fa88ce35c5b0ad6f5369d66d_31","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01683.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01683.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":9,"end":32}},"sink":{"start":89,"end":89,"column":{"start":9,"end":32},"content":""},"parent_line_number":89,"fingerprint":"3750ba67a8677d2c27e0c61c0ff44407_0","old_fingerprint":"3750ba67a8677d2c27e0c61c0ff44407_30","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01789.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01789.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":9,"end":32}},"sink":{"start":66,"end":66,"column":{"start":9,"end":32},"content":""},"parent_line_number":66,"fingerprint":"dd03777a09c1256aacb8d6f94e959e5b_0","old_fingerprint":"dd03777a09c1256aacb8d6f94e959e5b_8","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01861.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01861.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":9,"end":32}},"sink":{"start":84,"end":84,"column":{"start":9,"end":32},"content":""},"parent_line_number":84,"fingerprint":"66ddb0febee4e4fb47df8eb54dd88496_0","old_fingerprint":"66ddb0febee4e4fb47df8eb54dd88496_27","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02005.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":9,"end":32}},"sink":{"start":80,"end":80,"column":{"start":9,"end":32},"content":""},"parent_line_number":80,"fingerprint":"967001f90eba2cf7e3393e743c3bf99b_0","old_fingerprint":"967001f90eba2cf7e3393e743c3bf99b_23","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02142.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02142.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":32}},"sink":{"start":65,"end":65,"column":{"start":9,"end":32},"content":""},"parent_line_number":65,"fingerprint":"f6d1e9a17094d6b383db5fb67aecb82e_0","old_fingerprint":"f6d1e9a17094d6b383db5fb67aecb82e_5","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02339.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02339.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":9,"end":32}},"sink":{"start":79,"end":79,"column":{"start":9,"end":32},"content":""},"parent_line_number":79,"fingerprint":"dd647a82a67c0655dbc6b394b56ec0ab_0","old_fingerprint":"dd647a82a67c0655dbc6b394b56ec0ab_19","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02427.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02427.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":9,"end":32}},"sink":{"start":67,"end":67,"column":{"start":9,"end":32},"content":""},"parent_line_number":67,"fingerprint":"37465b4d15f97403f169c47d37fe0771_0","old_fingerprint":"37465b4d15f97403f169c47d37fe0771_10","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02507.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02507.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":9,"end":32}},"sink":{"start":67,"end":67,"column":{"start":9,"end":32},"content":""},"parent_line_number":67,"fingerprint":"6efad83cca1394e9ba2d5b0b51d6cfef_0","old_fingerprint":"6efad83cca1394e9ba2d5b0b51d6cfef_11","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02709.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02709.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":9,"end":32}},"sink":{"start":66,"end":66,"column":{"start":9,"end":32},"content":""},"parent_line_number":66,"fingerprint":"62736d548884415c9fe54c47349c20b9_0","old_fingerprint":"62736d548884415c9fe54c47349c20b9_7","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["614"],"id":"java_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure option, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure option is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` option to `true` for cookies to ensure they are only sent over HTTPS, enhancing the security of data transmission.\n  ```java\n  cookie.setSecure(true);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insecure_cookie","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02710.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02710.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":9,"end":32}},"sink":{"start":66,"end":66,"column":{"start":9,"end":32},"content":""},"parent_line_number":66,"fingerprint":"64e10ea4b25ffc7c556cf49de691f176_0","old_fingerprint":"64e10ea4b25ffc7c556cf49de691f176_6","code_extract":"        cookie.setSecure(false);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":47,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java","category_groups":["PII","Personal Data"],"source":{"start":47,"end":47,"column":{"start":22,"end":44}},"sink":{"start":47,"end":47,"column":{"start":22,"end":44},"content":""},"parent_line_number":47,"fingerprint":"1400072f185f1c9fa6401880c9549bd5_0","old_fingerprint":"1400072f185f1c9fa6401880c9549bd5_1","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":24,"end":47}},"sink":{"start":72,"end":72,"column":{"start":24,"end":47},"content":""},"parent_line_number":72,"fingerprint":"935523c07bf7e3e9727853e3d0c715d1_0","old_fingerprint":"935523c07bf7e3e9727853e3d0c715d1_198","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":24,"end":47}},"sink":{"start":88,"end":88,"column":{"start":24,"end":47},"content":""},"parent_line_number":88,"fingerprint":"c0585393122cfa8e95da3efa037de70b_0","old_fingerprint":"c0585393122cfa8e95da3efa037de70b_216","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":24,"end":47}},"sink":{"start":72,"end":72,"column":{"start":24,"end":47},"content":""},"parent_line_number":72,"fingerprint":"cd7d12588d9369debdbc27b90884163b_0","old_fingerprint":"cd7d12588d9369debdbc27b90884163b_193","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":22,"end":44}},"sink":{"start":74,"end":74,"column":{"start":22,"end":44},"content":""},"parent_line_number":74,"fingerprint":"c55debe9f969895eb81d2b4dc91e87dd_0","old_fingerprint":"c55debe9f969895eb81d2b4dc91e87dd_210","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":22,"end":44}},"sink":{"start":72,"end":72,"column":{"start":22,"end":44},"content":""},"parent_line_number":72,"fingerprint":"b7e41141f32484826444ac5d63a6a422_0","old_fingerprint":"b7e41141f32484826444ac5d63a6a422_200","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":22,"end":44}},"sink":{"start":67,"end":67,"column":{"start":22,"end":44},"content":""},"parent_line_number":67,"fingerprint":"189fb8478f2a8fa1e76af7a2e4a97d87_0","old_fingerprint":"189fb8478f2a8fa1e76af7a2e4a97d87_158","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":46}},"sink":{"start":67,"end":67,"column":{"start":24,"end":46},"content":""},"parent_line_number":67,"fingerprint":"0a5e3a24812c684df2d035a91ac3911a_0","old_fingerprint":"0a5e3a24812c684df2d035a91ac3911a_159","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":26,"end":48}},"sink":{"start":68,"end":68,"column":{"start":26,"end":48},"content":""},"parent_line_number":68,"fingerprint":"3f0a5c5bcf1e7cfe87351e76c5c136e3_0","old_fingerprint":"3f0a5c5bcf1e7cfe87351e76c5c136e3_181","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":26,"end":48}},"sink":{"start":72,"end":72,"column":{"start":26,"end":48},"content":""},"parent_line_number":72,"fingerprint":"97918879019af8e6461d69f649d10c82_0","old_fingerprint":"97918879019af8e6461d69f649d10c82_203","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":17,"end":39}},"sink":{"start":69,"end":69,"column":{"start":17,"end":39},"content":""},"parent_line_number":69,"fingerprint":"d4022d9c0999ddb50acf67a2cbe9b83e_0","old_fingerprint":"d4022d9c0999ddb50acf67a2cbe9b83e_186","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":18,"end":40}},"sink":{"start":72,"end":72,"column":{"start":18,"end":40},"content":""},"parent_line_number":72,"fingerprint":"cffa561537f8fcadff1bb515ba243900_0","old_fingerprint":"cffa561537f8fcadff1bb515ba243900_202","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":18,"end":40}},"sink":{"start":72,"end":72,"column":{"start":18,"end":40},"content":""},"parent_line_number":72,"fingerprint":"7b41e7d758035df319a710e7d5f69cb2_0","old_fingerprint":"7b41e7d758035df319a710e7d5f69cb2_201","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":24,"end":47}},"sink":{"start":63,"end":63,"column":{"start":24,"end":47},"content":""},"parent_line_number":63,"fingerprint":"c77329452de42311e0441b2402f89921_0","old_fingerprint":"c77329452de42311e0441b2402f89921_139","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00160.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00160.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":9,"end":31}},"sink":{"start":61,"end":61,"column":{"start":9,"end":31},"content":""},"parent_line_number":61,"fingerprint":"f14da5b4fa797d6fd9d41177597a773f_0","old_fingerprint":"f14da5b4fa797d6fd9d41177597a773f_125","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":24,"end":46}},"sink":{"start":59,"end":59,"column":{"start":24,"end":46},"content":""},"parent_line_number":59,"fingerprint":"a88cb7923fd965ccbc776b38a9793eec_0","old_fingerprint":"a88cb7923fd965ccbc776b38a9793eec_118","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":24,"end":46}},"sink":{"start":53,"end":53,"column":{"start":24,"end":46},"content":""},"parent_line_number":53,"fingerprint":"875c839bda557b096433acffff99f40d_0","old_fingerprint":"875c839bda557b096433acffff99f40d_87","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":24,"end":46}},"sink":{"start":54,"end":54,"column":{"start":24,"end":46},"content":""},"parent_line_number":54,"fingerprint":"2f8e975dd921b3f98dad34d7f107571e_0","old_fingerprint":"2f8e975dd921b3f98dad34d7f107571e_92","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":17,"end":39}},"sink":{"start":58,"end":58,"column":{"start":17,"end":39},"content":""},"parent_line_number":58,"fingerprint":"da00268f8c1881da298a1a3b291ab495_0","old_fingerprint":"da00268f8c1881da298a1a3b291ab495_115","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":17,"end":39}},"sink":{"start":56,"end":56,"column":{"start":17,"end":39},"content":""},"parent_line_number":56,"fingerprint":"701d6c9ccd8e7aa4d5a38e27e9cd31a6_0","old_fingerprint":"701d6c9ccd8e7aa4d5a38e27e9cd31a6_108","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":18,"end":40}},"sink":{"start":53,"end":53,"column":{"start":18,"end":40},"content":""},"parent_line_number":53,"fingerprint":"8d7dac51a0d11b3e2982ed6b29ce5646_0","old_fingerprint":"8d7dac51a0d11b3e2982ed6b29ce5646_89","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":18,"end":40}},"sink":{"start":60,"end":60,"column":{"start":18,"end":40},"content":""},"parent_line_number":60,"fingerprint":"190a09253f63073a69341c6690e6f7c5_0","old_fingerprint":"190a09253f63073a69341c6690e6f7c5_123","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":18,"end":40}},"sink":{"start":58,"end":58,"column":{"start":18,"end":40},"content":""},"parent_line_number":58,"fingerprint":"ddb70a23c4bf3803bfbf4cd112b17465_0","old_fingerprint":"ddb70a23c4bf3803bfbf4cd112b17465_117","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00230.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00230.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":9,"end":31}},"sink":{"start":67,"end":67,"column":{"start":9,"end":31},"content":""},"parent_line_number":67,"fingerprint":"270f389df31337e3f20d0bf83c18686e_0","old_fingerprint":"270f389df31337e3f20d0bf83c18686e_160","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":24,"end":46}},"sink":{"start":68,"end":68,"column":{"start":24,"end":46},"content":""},"parent_line_number":68,"fingerprint":"33a9ba6e2c57a44f450b5ad797c1ddfe_0","old_fingerprint":"33a9ba6e2c57a44f450b5ad797c1ddfe_182","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":24,"end":46}},"sink":{"start":69,"end":69,"column":{"start":24,"end":46},"content":""},"parent_line_number":69,"fingerprint":"77401db707d032c5d8142e78ed75484b_0","old_fingerprint":"77401db707d032c5d8142e78ed75484b_188","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":26,"end":48}},"sink":{"start":65,"end":65,"column":{"start":26,"end":48},"content":""},"parent_line_number":65,"fingerprint":"afef347b49c1c0ea7b5f36d23fca63ce_0","old_fingerprint":"afef347b49c1c0ea7b5f36d23fca63ce_153","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":26,"end":48}},"sink":{"start":69,"end":69,"column":{"start":26,"end":48},"content":""},"parent_line_number":69,"fingerprint":"cbc074c9cef26c63207a71a05e0d3ba8_0","old_fingerprint":"cbc074c9cef26c63207a71a05e0d3ba8_185","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":17,"end":39}},"sink":{"start":65,"end":65,"column":{"start":17,"end":39},"content":""},"parent_line_number":65,"fingerprint":"1159ae8689f11da482b5bed46bb72ff1_0","old_fingerprint":"1159ae8689f11da482b5bed46bb72ff1_154","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":17,"end":39}},"sink":{"start":68,"end":68,"column":{"start":17,"end":39},"content":""},"parent_line_number":68,"fingerprint":"8ec9f754d967d97abf40fb5bdde57a19_0","old_fingerprint":"8ec9f754d967d97abf40fb5bdde57a19_183","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":17,"end":39}},"sink":{"start":82,"end":82,"column":{"start":17,"end":39},"content":""},"parent_line_number":82,"fingerprint":"6115a0cf2afe94084b9a6fe883c63cc8_0","old_fingerprint":"6115a0cf2afe94084b9a6fe883c63cc8_214","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":18,"end":40}},"sink":{"start":70,"end":70,"column":{"start":18,"end":40},"content":""},"parent_line_number":70,"fingerprint":"9a00ae91ad3b272b4a5b1ec499cf1ca1_0","old_fingerprint":"9a00ae91ad3b272b4a5b1ec499cf1ca1_189","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":18,"end":40}},"sink":{"start":83,"end":83,"column":{"start":18,"end":40},"content":""},"parent_line_number":83,"fingerprint":"b950cf0698ce892d977c1388655d77aa_0","old_fingerprint":"b950cf0698ce892d977c1388655d77aa_215","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":18,"end":40}},"sink":{"start":65,"end":65,"column":{"start":18,"end":40},"content":""},"parent_line_number":65,"fingerprint":"2b4437cc9b2a28fa1d4f178d3bbe4379_0","old_fingerprint":"2b4437cc9b2a28fa1d4f178d3bbe4379_155","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":24,"end":46}},"sink":{"start":60,"end":60,"column":{"start":24,"end":46},"content":""},"parent_line_number":60,"fingerprint":"9e63cd8f35bb61d8fa47f131b4796109_0","old_fingerprint":"9e63cd8f35bb61d8fa47f131b4796109_121","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":24,"end":46}},"sink":{"start":57,"end":57,"column":{"start":24,"end":46},"content":""},"parent_line_number":57,"fingerprint":"2c7fc92177cafd849486005fce9442e9_0","old_fingerprint":"2c7fc92177cafd849486005fce9442e9_110","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":26,"end":48}},"sink":{"start":60,"end":60,"column":{"start":26,"end":48},"content":""},"parent_line_number":60,"fingerprint":"4f9674f06ca7ac5f5b5a594dbaee4502_0","old_fingerprint":"4f9674f06ca7ac5f5b5a594dbaee4502_120","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":18,"end":40}},"sink":{"start":60,"end":60,"column":{"start":18,"end":40},"content":""},"parent_line_number":60,"fingerprint":"591a38b0aca5fd7bb0dab626c8b2f371_0","old_fingerprint":"591a38b0aca5fd7bb0dab626c8b2f371_122","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":47,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java","category_groups":["PII","Personal Data"],"source":{"start":47,"end":47,"column":{"start":18,"end":40}},"sink":{"start":47,"end":47,"column":{"start":18,"end":40},"content":""},"parent_line_number":47,"fingerprint":"4c772c6f72507959ac2f4b7250fc9966_0","old_fingerprint":"4c772c6f72507959ac2f4b7250fc9966_0","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":24,"end":47}},"sink":{"start":48,"end":48,"column":{"start":24,"end":47},"content":""},"parent_line_number":48,"fingerprint":"6bba1c2d4e03b3d3193bfeded8522d7c_0","old_fingerprint":"6bba1c2d4e03b3d3193bfeded8522d7c_15","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":24,"end":47}},"sink":{"start":51,"end":51,"column":{"start":24,"end":47},"content":""},"parent_line_number":51,"fingerprint":"7c7323ad589198fd37767f1a5c751de5_0","old_fingerprint":"7c7323ad589198fd37767f1a5c751de5_64","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00397.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00397.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":31}},"sink":{"start":50,"end":50,"column":{"start":9,"end":31},"content":""},"parent_line_number":50,"fingerprint":"2216bef8b77254b17e2ad9780668da64_0","old_fingerprint":"2216bef8b77254b17e2ad9780668da64_41","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":24,"end":46}},"sink":{"start":54,"end":54,"column":{"start":24,"end":46},"content":""},"parent_line_number":54,"fingerprint":"0b81db2d3dfa286a8a636abbb4f3ebab_0","old_fingerprint":"0b81db2d3dfa286a8a636abbb4f3ebab_91","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":24,"end":46}},"sink":{"start":69,"end":69,"column":{"start":24,"end":46},"content":""},"parent_line_number":69,"fingerprint":"2f5c0c30856241da5353cfe5ffa6bb76_0","old_fingerprint":"2f5c0c30856241da5353cfe5ffa6bb76_184","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":22,"end":44}},"sink":{"start":67,"end":67,"column":{"start":22,"end":44},"content":""},"parent_line_number":67,"fingerprint":"b662506ed31362dbcd57c6295ef2f331_0","old_fingerprint":"b662506ed31362dbcd57c6295ef2f331_176","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":26,"end":48}},"sink":{"start":55,"end":55,"column":{"start":26,"end":48},"content":""},"parent_line_number":55,"fingerprint":"dd765a010603e13cc0cfd7be97853b6e_0","old_fingerprint":"dd765a010603e13cc0cfd7be97853b6e_104","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":17,"end":39}},"sink":{"start":52,"end":52,"column":{"start":17,"end":39},"content":""},"parent_line_number":52,"fingerprint":"2bbe9bbb18c5ab27a6b8019853c68da7_0","old_fingerprint":"2bbe9bbb18c5ab27a6b8019853c68da7_67","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":24,"end":47}},"sink":{"start":52,"end":52,"column":{"start":24,"end":47},"content":""},"parent_line_number":52,"fingerprint":"60e4afc1310d56597d3862c9aa32eecc_0","old_fingerprint":"60e4afc1310d56597d3862c9aa32eecc_73","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00482.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00482.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":31}},"sink":{"start":53,"end":53,"column":{"start":9,"end":31},"content":""},"parent_line_number":53,"fingerprint":"e88cf389215ef51a1dbbe67cc278fdee_0","old_fingerprint":"e88cf389215ef51a1dbbe67cc278fdee_84","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00483.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00483.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":9,"end":31}},"sink":{"start":58,"end":58,"column":{"start":9,"end":31},"content":""},"parent_line_number":58,"fingerprint":"ba00811f9bab1437bb174c98f4855ae0_0","old_fingerprint":"ba00811f9bab1437bb174c98f4855ae0_116","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":24,"end":46}},"sink":{"start":57,"end":57,"column":{"start":24,"end":46},"content":""},"parent_line_number":57,"fingerprint":"be96eedb654729e760a1d5c02b1b2c81_0","old_fingerprint":"be96eedb654729e760a1d5c02b1b2c81_114","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":26,"end":48}},"sink":{"start":54,"end":54,"column":{"start":26,"end":48},"content":""},"parent_line_number":54,"fingerprint":"80b76006b4903d7290dd6465e1754556_0","old_fingerprint":"80b76006b4903d7290dd6465e1754556_90","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":17,"end":39}},"sink":{"start":52,"end":52,"column":{"start":17,"end":39},"content":""},"parent_line_number":52,"fingerprint":"1eb5ce91eb64cdee4fceac45b82428df_0","old_fingerprint":"1eb5ce91eb64cdee4fceac45b82428df_72","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":17,"end":39}},"sink":{"start":57,"end":57,"column":{"start":17,"end":39},"content":""},"parent_line_number":57,"fingerprint":"370433797683cab24af8731209aaf23b_0","old_fingerprint":"370433797683cab24af8731209aaf23b_113","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":18,"end":40}},"sink":{"start":62,"end":62,"column":{"start":18,"end":40},"content":""},"parent_line_number":62,"fingerprint":"998e6e6f21384c09243a977dfb0876fb_0","old_fingerprint":"998e6e6f21384c09243a977dfb0876fb_131","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":18,"end":40}},"sink":{"start":57,"end":57,"column":{"start":18,"end":40},"content":""},"parent_line_number":57,"fingerprint":"9147b568180fcc62a0e68b9711ba1964_0","old_fingerprint":"9147b568180fcc62a0e68b9711ba1964_109","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":18,"end":40}},"sink":{"start":62,"end":62,"column":{"start":18,"end":40},"content":""},"parent_line_number":62,"fingerprint":"e94a85dd9a73b061d8ec2cbc059dd160_0","old_fingerprint":"e94a85dd9a73b061d8ec2cbc059dd160_126","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":46}},"sink":{"start":67,"end":67,"column":{"start":24,"end":46},"content":""},"parent_line_number":67,"fingerprint":"eb9952574f1575dd09cd5044376a6dab_0","old_fingerprint":"eb9952574f1575dd09cd5044376a6dab_170","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":22,"end":44}},"sink":{"start":72,"end":72,"column":{"start":22,"end":44},"content":""},"parent_line_number":72,"fingerprint":"f48ec295a24a31073abd7879f2b9b03c_0","old_fingerprint":"f48ec295a24a31073abd7879f2b9b03c_197","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":22,"end":44}},"sink":{"start":81,"end":81,"column":{"start":22,"end":44},"content":""},"parent_line_number":81,"fingerprint":"ac6c428ce620dd71f11542b3fb3c426e_0","old_fingerprint":"ac6c428ce620dd71f11542b3fb3c426e_213","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":17,"end":39}},"sink":{"start":62,"end":62,"column":{"start":17,"end":39},"content":""},"parent_line_number":62,"fingerprint":"3401d4f6bd3b59c7b798a827f263a16e_0","old_fingerprint":"3401d4f6bd3b59c7b798a827f263a16e_130","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":18,"end":40}},"sink":{"start":63,"end":63,"column":{"start":18,"end":40},"content":""},"parent_line_number":63,"fingerprint":"ac62fa73b34779d5dbe19408da8f7f6d_0","old_fingerprint":"ac62fa73b34779d5dbe19408da8f7f6d_137","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00652.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00652.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":31}},"sink":{"start":53,"end":53,"column":{"start":9,"end":31},"content":""},"parent_line_number":53,"fingerprint":"0db327dbfd4d782711fb2de24c165c77_0","old_fingerprint":"0db327dbfd4d782711fb2de24c165c77_85","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":17,"end":39}},"sink":{"start":55,"end":55,"column":{"start":17,"end":39},"content":""},"parent_line_number":55,"fingerprint":"407a1a2978f850ba4da578035b36b2bf_0","old_fingerprint":"407a1a2978f850ba4da578035b36b2bf_105","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":18,"end":40}},"sink":{"start":60,"end":60,"column":{"start":18,"end":40},"content":""},"parent_line_number":60,"fingerprint":"57aa720b3da00801d6835ff69a1276b6_0","old_fingerprint":"57aa720b3da00801d6835ff69a1276b6_119","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":24,"end":47}},"sink":{"start":57,"end":57,"column":{"start":24,"end":47},"content":""},"parent_line_number":57,"fingerprint":"971ed8e2f9cffcd9cb208ac23374e203_0","old_fingerprint":"971ed8e2f9cffcd9cb208ac23374e203_112","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":24,"end":46}},"sink":{"start":51,"end":51,"column":{"start":24,"end":46},"content":""},"parent_line_number":51,"fingerprint":"d591d561feca1c30a8071e6c6eee373b_0","old_fingerprint":"d591d561feca1c30a8071e6c6eee373b_66","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":24,"end":46}},"sink":{"start":69,"end":69,"column":{"start":24,"end":46},"content":""},"parent_line_number":69,"fingerprint":"362cdfede943a4a1616b64f70a627342_0","old_fingerprint":"362cdfede943a4a1616b64f70a627342_187","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":18,"end":40}},"sink":{"start":60,"end":60,"column":{"start":18,"end":40},"content":""},"parent_line_number":60,"fingerprint":"d7cd2afd0960b79cb6258c2c9b6c067b_0","old_fingerprint":"d7cd2afd0960b79cb6258c2c9b6c067b_124","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":24,"end":46}},"sink":{"start":92,"end":92,"column":{"start":24,"end":46},"content":""},"parent_line_number":92,"fingerprint":"e52cdfabbbc488c69bc2109a794a1354_0","old_fingerprint":"e52cdfabbbc488c69bc2109a794a1354_217","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":22,"end":44}},"sink":{"start":75,"end":75,"column":{"start":22,"end":44},"content":""},"parent_line_number":75,"fingerprint":"2aafc3ad4722f1a002794f46727d1c35_0","old_fingerprint":"2aafc3ad4722f1a002794f46727d1c35_211","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":18,"end":40}},"sink":{"start":77,"end":77,"column":{"start":18,"end":40},"content":""},"parent_line_number":77,"fingerprint":"c42fb207e9c31594469f9fa7e67f5dc8_0","old_fingerprint":"c42fb207e9c31594469f9fa7e67f5dc8_212","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":57,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00898.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00898.java","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":9,"end":31}},"sink":{"start":57,"end":57,"column":{"start":9,"end":31},"content":""},"parent_line_number":57,"fingerprint":"0c721551d9f73032f771a79fdac21183_0","old_fingerprint":"0c721551d9f73032f771a79fdac21183_111","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":24,"end":46}},"sink":{"start":68,"end":68,"column":{"start":24,"end":46},"content":""},"parent_line_number":68,"fingerprint":"87077426ce19945dcea11079494397ba_0","old_fingerprint":"87077426ce19945dcea11079494397ba_179","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":24,"end":46}},"sink":{"start":68,"end":68,"column":{"start":24,"end":46},"content":""},"parent_line_number":68,"fingerprint":"c72c2eb7e14bbee2f2f323ed627887ca_0","old_fingerprint":"c72c2eb7e14bbee2f2f323ed627887ca_178","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":26,"end":48}},"sink":{"start":68,"end":68,"column":{"start":26,"end":48},"content":""},"parent_line_number":68,"fingerprint":"e07b43b843994851cc61825447ac1875_0","old_fingerprint":"e07b43b843994851cc61825447ac1875_177","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":17,"end":39}},"sink":{"start":54,"end":54,"column":{"start":17,"end":39},"content":""},"parent_line_number":54,"fingerprint":"31638e5f8a1faafc344caab6749bee5e_0","old_fingerprint":"31638e5f8a1faafc344caab6749bee5e_93","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":47}},"sink":{"start":67,"end":67,"column":{"start":24,"end":47},"content":""},"parent_line_number":67,"fingerprint":"dcaf0c6deef2f713c9c3f66dc70ad69f_0","old_fingerprint":"dcaf0c6deef2f713c9c3f66dc70ad69f_156","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":46}},"sink":{"start":67,"end":67,"column":{"start":24,"end":46},"content":""},"parent_line_number":67,"fingerprint":"a7a2a3d9e2fa959e8b226937ba19aeef_0","old_fingerprint":"a7a2a3d9e2fa959e8b226937ba19aeef_175","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":46}},"sink":{"start":67,"end":67,"column":{"start":24,"end":46},"content":""},"parent_line_number":67,"fingerprint":"88e7d7a49214538dbee4f5979209b638_0","old_fingerprint":"88e7d7a49214538dbee4f5979209b638_174","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":46}},"sink":{"start":67,"end":67,"column":{"start":24,"end":46},"content":""},"parent_line_number":67,"fingerprint":"9ebb0d28dd59e489eda1c87897ece71d_0","old_fingerprint":"9ebb0d28dd59e489eda1c87897ece71d_173","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":26,"end":48}},"sink":{"start":67,"end":67,"column":{"start":26,"end":48},"content":""},"parent_line_number":67,"fingerprint":"2c47288d9671faeb75ed02e297c323af_0","old_fingerprint":"2c47288d9671faeb75ed02e297c323af_171","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":26,"end":48}},"sink":{"start":67,"end":67,"column":{"start":26,"end":48},"content":""},"parent_line_number":67,"fingerprint":"e5ce6d1248f55d051416d94f0bc5604e_0","old_fingerprint":"e5ce6d1248f55d051416d94f0bc5604e_168","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"193a6f91a59b88c305f91b1ff2d4261d_0","old_fingerprint":"193a6f91a59b88c305f91b1ff2d4261d_169","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01058.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01058.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":31}},"sink":{"start":54,"end":54,"column":{"start":9,"end":31},"content":""},"parent_line_number":54,"fingerprint":"4262803a9f2abf5ecfff0430bc70f0cd_0","old_fingerprint":"4262803a9f2abf5ecfff0430bc70f0cd_94","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":24,"end":46}},"sink":{"start":53,"end":53,"column":{"start":24,"end":46},"content":""},"parent_line_number":53,"fingerprint":"cd3fd750e080d168092247a3962db3d3_0","old_fingerprint":"cd3fd750e080d168092247a3962db3d3_78","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":22,"end":44}},"sink":{"start":53,"end":53,"column":{"start":22,"end":44},"content":""},"parent_line_number":53,"fingerprint":"840bd06d11001e2e69d099fe35c6c9e3_0","old_fingerprint":"840bd06d11001e2e69d099fe35c6c9e3_86","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":24,"end":47}},"sink":{"start":63,"end":63,"column":{"start":24,"end":47},"content":""},"parent_line_number":63,"fingerprint":"53ea2418e3e9efc7553c36754ff02240_0","old_fingerprint":"53ea2418e3e9efc7553c36754ff02240_147","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":24,"end":46}},"sink":{"start":63,"end":63,"column":{"start":24,"end":46},"content":""},"parent_line_number":63,"fingerprint":"b7b84f3257413542dd8b8593d126bcc2_0","old_fingerprint":"b7b84f3257413542dd8b8593d126bcc2_141","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":24,"end":46}},"sink":{"start":63,"end":63,"column":{"start":24,"end":46},"content":""},"parent_line_number":63,"fingerprint":"719edbe8ac3973db206a43f977662d68_0","old_fingerprint":"719edbe8ac3973db206a43f977662d68_140","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":26,"end":48}},"sink":{"start":63,"end":63,"column":{"start":26,"end":48},"content":""},"parent_line_number":63,"fingerprint":"c35216c74d13e6e97fde3895d2133778_0","old_fingerprint":"c35216c74d13e6e97fde3895d2133778_136","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":17,"end":39}},"sink":{"start":63,"end":63,"column":{"start":17,"end":39},"content":""},"parent_line_number":63,"fingerprint":"af6bcce85d74db96c6f9bcb8602b2008_0","old_fingerprint":"af6bcce85d74db96c6f9bcb8602b2008_138","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":17,"end":39}},"sink":{"start":63,"end":63,"column":{"start":17,"end":39},"content":""},"parent_line_number":63,"fingerprint":"8c6ad8d9cc111e3322a6a3bf73f89b1f_0","old_fingerprint":"8c6ad8d9cc111e3322a6a3bf73f89b1f_146","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":17,"end":39}},"sink":{"start":63,"end":63,"column":{"start":17,"end":39},"content":""},"parent_line_number":63,"fingerprint":"c91c0344130c5fa6cae5e75bfb15d822_0","old_fingerprint":"c91c0344130c5fa6cae5e75bfb15d822_142","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":18,"end":40}},"sink":{"start":63,"end":63,"column":{"start":18,"end":40},"content":""},"parent_line_number":63,"fingerprint":"eeaf162a660b913e6c72bdd2222d5506_0","old_fingerprint":"eeaf162a660b913e6c72bdd2222d5506_145","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":47}},"sink":{"start":55,"end":55,"column":{"start":24,"end":47},"content":""},"parent_line_number":55,"fingerprint":"fe343f75a6331c41ffa0158b426bb8fe_0","old_fingerprint":"fe343f75a6331c41ffa0158b426bb8fe_102","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":47}},"sink":{"start":55,"end":55,"column":{"start":24,"end":47},"content":""},"parent_line_number":55,"fingerprint":"52ce3fe5f3e727691340361cecee1bac_0","old_fingerprint":"52ce3fe5f3e727691340361cecee1bac_96","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":22,"end":44}},"sink":{"start":55,"end":55,"column":{"start":22,"end":44},"content":""},"parent_line_number":55,"fingerprint":"502755d3786c7fef9a0a6f1d991ca8d8_0","old_fingerprint":"502755d3786c7fef9a0a6f1d991ca8d8_97","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":46}},"sink":{"start":55,"end":55,"column":{"start":24,"end":46},"content":""},"parent_line_number":55,"fingerprint":"e5cb02f130c8e3b2c035ea75818fa712_0","old_fingerprint":"e5cb02f130c8e3b2c035ea75818fa712_98","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":22,"end":44}},"sink":{"start":48,"end":48,"column":{"start":22,"end":44},"content":""},"parent_line_number":48,"fingerprint":"a2c865fda3590da6a5e8073fafd84912_0","old_fingerprint":"a2c865fda3590da6a5e8073fafd84912_3","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":24,"end":46}},"sink":{"start":48,"end":48,"column":{"start":24,"end":46},"content":""},"parent_line_number":48,"fingerprint":"9541066f4adcefa6bd45619a095590b6_0","old_fingerprint":"9541066f4adcefa6bd45619a095590b6_2","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":24,"end":46}},"sink":{"start":48,"end":48,"column":{"start":24,"end":46},"content":""},"parent_line_number":48,"fingerprint":"5675248b478a4d6279d5a0c451554a47_0","old_fingerprint":"5675248b478a4d6279d5a0c451554a47_7","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":26,"end":48}},"sink":{"start":48,"end":48,"column":{"start":26,"end":48},"content":""},"parent_line_number":48,"fingerprint":"ceef2e77ed1051df6e2262e51693a62b_0","old_fingerprint":"ceef2e77ed1051df6e2262e51693a62b_6","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":26,"end":48}},"sink":{"start":48,"end":48,"column":{"start":26,"end":48},"content":""},"parent_line_number":48,"fingerprint":"6b233a090a41822093d23be494145349_0","old_fingerprint":"6b233a090a41822093d23be494145349_5","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":17,"end":39}},"sink":{"start":48,"end":48,"column":{"start":17,"end":39},"content":""},"parent_line_number":48,"fingerprint":"d0733e5305c0997273b42d4bb8eed1d8_0","old_fingerprint":"d0733e5305c0997273b42d4bb8eed1d8_4","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":18,"end":40}},"sink":{"start":48,"end":48,"column":{"start":18,"end":40},"content":""},"parent_line_number":48,"fingerprint":"8b43ca35ec994ca61d91538f786b7ec5_0","old_fingerprint":"8b43ca35ec994ca61d91538f786b7ec5_9","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":18,"end":40}},"sink":{"start":48,"end":48,"column":{"start":18,"end":40},"content":""},"parent_line_number":48,"fingerprint":"a03634c1a9562d26c5300356b7bbea34_0","old_fingerprint":"a03634c1a9562d26c5300356b7bbea34_8","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":18,"end":40}},"sink":{"start":48,"end":48,"column":{"start":18,"end":40},"content":""},"parent_line_number":48,"fingerprint":"953bef777134e2c3a867600efde41bb1_0","old_fingerprint":"953bef777134e2c3a867600efde41bb1_11","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":22,"end":44}},"sink":{"start":52,"end":52,"column":{"start":22,"end":44},"content":""},"parent_line_number":52,"fingerprint":"1a51cb95c9cec8da3cc3c6f4e80646a0_0","old_fingerprint":"1a51cb95c9cec8da3cc3c6f4e80646a0_77","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":22,"end":44}},"sink":{"start":52,"end":52,"column":{"start":22,"end":44},"content":""},"parent_line_number":52,"fingerprint":"80e7d35e3050e34194bf799e32778290_0","old_fingerprint":"80e7d35e3050e34194bf799e32778290_71","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":22,"end":44}},"sink":{"start":52,"end":52,"column":{"start":22,"end":44},"content":""},"parent_line_number":52,"fingerprint":"c0b4082e0103b2dddcb6bbb0dc0fe95c_0","old_fingerprint":"c0b4082e0103b2dddcb6bbb0dc0fe95c_70","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":17,"end":39}},"sink":{"start":52,"end":52,"column":{"start":17,"end":39},"content":""},"parent_line_number":52,"fingerprint":"cf8fe1d4f5ee056fb83c9aaceeecb75d_0","old_fingerprint":"cf8fe1d4f5ee056fb83c9aaceeecb75d_69","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":17,"end":39}},"sink":{"start":52,"end":52,"column":{"start":17,"end":39},"content":""},"parent_line_number":52,"fingerprint":"c04d3e81c4fcac274fb4566524b504e9_0","old_fingerprint":"c04d3e81c4fcac274fb4566524b504e9_68","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":24,"end":46}},"sink":{"start":62,"end":62,"column":{"start":24,"end":46},"content":""},"parent_line_number":62,"fingerprint":"7556468bca9c133a86efd1ba5351a192_0","old_fingerprint":"7556468bca9c133a86efd1ba5351a192_128","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":24,"end":46}},"sink":{"start":62,"end":62,"column":{"start":24,"end":46},"content":""},"parent_line_number":62,"fingerprint":"c1a1b4ae161e734c9abd3b56b4a315f1_0","old_fingerprint":"c1a1b4ae161e734c9abd3b56b4a315f1_129","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":26,"end":48}},"sink":{"start":62,"end":62,"column":{"start":26,"end":48},"content":""},"parent_line_number":62,"fingerprint":"0df499c434309a3f9d85d5581f038d32_0","old_fingerprint":"0df499c434309a3f9d85d5581f038d32_132","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":17,"end":39}},"sink":{"start":62,"end":62,"column":{"start":17,"end":39},"content":""},"parent_line_number":62,"fingerprint":"e189dac282c85119ec7ad63efa276684_0","old_fingerprint":"e189dac282c85119ec7ad63efa276684_133","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":17,"end":39}},"sink":{"start":62,"end":62,"column":{"start":17,"end":39},"content":""},"parent_line_number":62,"fingerprint":"a7db84b0a8c3a914e2766634805ca9c6_0","old_fingerprint":"a7db84b0a8c3a914e2766634805ca9c6_134","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":47}},"sink":{"start":50,"end":50,"column":{"start":24,"end":47},"content":""},"parent_line_number":50,"fingerprint":"d6759655e8415073121b39a43eb3f646_0","old_fingerprint":"d6759655e8415073121b39a43eb3f646_63","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":22,"end":44}},"sink":{"start":50,"end":50,"column":{"start":22,"end":44},"content":""},"parent_line_number":50,"fingerprint":"0177834022874bec363cd8897d5950d9_0","old_fingerprint":"0177834022874bec363cd8897d5950d9_40","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":22,"end":44}},"sink":{"start":50,"end":50,"column":{"start":22,"end":44},"content":""},"parent_line_number":50,"fingerprint":"7d34712c9e276bc0979b5370f66e8200_0","old_fingerprint":"7d34712c9e276bc0979b5370f66e8200_36","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":18,"end":40}},"sink":{"start":50,"end":50,"column":{"start":18,"end":40},"content":""},"parent_line_number":50,"fingerprint":"c3f95ed16210ebd23ece68060c2def1b_0","old_fingerprint":"c3f95ed16210ebd23ece68060c2def1b_43","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":47}},"sink":{"start":50,"end":50,"column":{"start":24,"end":47},"content":""},"parent_line_number":50,"fingerprint":"cac8db9a8b4e50986405adbf0115b6e9_0","old_fingerprint":"cac8db9a8b4e50986405adbf0115b6e9_62","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":22,"end":44}},"sink":{"start":50,"end":50,"column":{"start":22,"end":44},"content":""},"parent_line_number":50,"fingerprint":"78636631005513c3781d3aceba4561b3_0","old_fingerprint":"78636631005513c3781d3aceba4561b3_61","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":18,"end":40}},"sink":{"start":50,"end":50,"column":{"start":18,"end":40},"content":""},"parent_line_number":50,"fingerprint":"73121cbdd050bb7339308dcf0bf7d716_0","old_fingerprint":"73121cbdd050bb7339308dcf0bf7d716_60","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":24,"end":47}},"sink":{"start":72,"end":72,"column":{"start":24,"end":47},"content":""},"parent_line_number":72,"fingerprint":"1ad547f3bbc5f48907d6abefed0904f9_0","old_fingerprint":"1ad547f3bbc5f48907d6abefed0904f9_190","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01675.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01675.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":31}},"sink":{"start":73,"end":73,"column":{"start":9,"end":31},"content":""},"parent_line_number":73,"fingerprint":"7823d50e440f966c1695dd5e7c64a363_0","old_fingerprint":"7823d50e440f966c1695dd5e7c64a363_209","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":24,"end":46}},"sink":{"start":72,"end":72,"column":{"start":24,"end":46},"content":""},"parent_line_number":72,"fingerprint":"c15d641d9f9f299cd5acddf2cff5d3e2_0","old_fingerprint":"c15d641d9f9f299cd5acddf2cff5d3e2_196","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":22,"end":44}},"sink":{"start":72,"end":72,"column":{"start":22,"end":44},"content":""},"parent_line_number":72,"fingerprint":"8d2dda7fbb81fbbb29cdc4ebef5cf0ce_0","old_fingerprint":"8d2dda7fbb81fbbb29cdc4ebef5cf0ce_195","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":22,"end":44}},"sink":{"start":72,"end":72,"column":{"start":22,"end":44},"content":""},"parent_line_number":72,"fingerprint":"93aed0a778d64b6421c87854e4980856_0","old_fingerprint":"93aed0a778d64b6421c87854e4980856_199","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":22,"end":44}},"sink":{"start":72,"end":72,"column":{"start":22,"end":44},"content":""},"parent_line_number":72,"fingerprint":"c9875a80c2898c2dae16d7e9f4af4152_0","old_fingerprint":"c9875a80c2898c2dae16d7e9f4af4152_204","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":26,"end":48}},"sink":{"start":72,"end":72,"column":{"start":26,"end":48},"content":""},"parent_line_number":72,"fingerprint":"06160cb2c83a5442ae78672216d5ea62_0","old_fingerprint":"06160cb2c83a5442ae78672216d5ea62_191","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":17,"end":39}},"sink":{"start":72,"end":72,"column":{"start":17,"end":39},"content":""},"parent_line_number":72,"fingerprint":"e633aaab0fd56a29f94222f8040c9712_0","old_fingerprint":"e633aaab0fd56a29f94222f8040c9712_194","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":24,"end":46}},"sink":{"start":49,"end":49,"column":{"start":24,"end":46},"content":""},"parent_line_number":49,"fingerprint":"c44716337c0cbbcea3001739f7590480_0","old_fingerprint":"c44716337c0cbbcea3001739f7590480_16","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":24,"end":46}},"sink":{"start":49,"end":49,"column":{"start":24,"end":46},"content":""},"parent_line_number":49,"fingerprint":"be5ebe14ef1c706a79b113bc320ffecf_0","old_fingerprint":"be5ebe14ef1c706a79b113bc320ffecf_22","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":24,"end":46}},"sink":{"start":49,"end":49,"column":{"start":24,"end":46},"content":""},"parent_line_number":49,"fingerprint":"fce02f39030a6634489a8689a5024d84_0","old_fingerprint":"fce02f39030a6634489a8689a5024d84_17","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":17,"end":39}},"sink":{"start":49,"end":49,"column":{"start":17,"end":39},"content":""},"parent_line_number":49,"fingerprint":"a738aeda2203422464c1aa914b7354fc_0","old_fingerprint":"a738aeda2203422464c1aa914b7354fc_26","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":17,"end":39}},"sink":{"start":49,"end":49,"column":{"start":17,"end":39},"content":""},"parent_line_number":49,"fingerprint":"7113ecfec48b177250ae18b8293eac12_0","old_fingerprint":"7113ecfec48b177250ae18b8293eac12_19","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":17,"end":39}},"sink":{"start":49,"end":49,"column":{"start":17,"end":39},"content":""},"parent_line_number":49,"fingerprint":"db35cde08d509ac4346beef424db6999_0","old_fingerprint":"db35cde08d509ac4346beef424db6999_29","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":17,"end":39}},"sink":{"start":49,"end":49,"column":{"start":17,"end":39},"content":""},"parent_line_number":49,"fingerprint":"d2998ae218d849b780d32c4dd8df3464_0","old_fingerprint":"d2998ae218d849b780d32c4dd8df3464_28","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":18,"end":40}},"sink":{"start":49,"end":49,"column":{"start":18,"end":40},"content":""},"parent_line_number":49,"fingerprint":"24eae7fe6c75984cfba1567b5c1b3b6a_0","old_fingerprint":"24eae7fe6c75984cfba1567b5c1b3b6a_25","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":47}},"sink":{"start":67,"end":67,"column":{"start":24,"end":47},"content":""},"parent_line_number":67,"fingerprint":"9484278f7e39b998ce043277927135f3_0","old_fingerprint":"9484278f7e39b998ce043277927135f3_157","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":24,"end":47}},"sink":{"start":67,"end":67,"column":{"start":24,"end":47},"content":""},"parent_line_number":67,"fingerprint":"071641e8a458e3e50b2ad8f4bde95ca3_0","old_fingerprint":"071641e8a458e3e50b2ad8f4bde95ca3_172","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01853.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01853.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":31}},"sink":{"start":68,"end":68,"column":{"start":9,"end":31},"content":""},"parent_line_number":68,"fingerprint":"1107a8a02fbe0b67e935abe1756af87c_0","old_fingerprint":"1107a8a02fbe0b67e935abe1756af87c_180","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":22,"end":44}},"sink":{"start":67,"end":67,"column":{"start":22,"end":44},"content":""},"parent_line_number":67,"fingerprint":"7c4369ec94aac6f2a812b4b7a53d4903_0","old_fingerprint":"7c4369ec94aac6f2a812b4b7a53d4903_167","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"7f96a7288b3cff29f35671da2a16427f_0","old_fingerprint":"7f96a7288b3cff29f35671da2a16427f_166","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"93b52f570dab6c88dba6eaaaaabde79a_0","old_fingerprint":"93b52f570dab6c88dba6eaaaaabde79a_165","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"d7d03718ec108eb6c061a3b1dc320ebd_0","old_fingerprint":"d7d03718ec108eb6c061a3b1dc320ebd_164","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"f909676f5ece21cee14cda7f7ba6eefe_0","old_fingerprint":"f909676f5ece21cee14cda7f7ba6eefe_163","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"dc1970cc2914b382461a5209fb0f43d5_0","old_fingerprint":"dc1970cc2914b382461a5209fb0f43d5_162","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":18,"end":40}},"sink":{"start":67,"end":67,"column":{"start":18,"end":40},"content":""},"parent_line_number":67,"fingerprint":"bf4e278361b2fc6ffb8e2cddb8056942_0","old_fingerprint":"bf4e278361b2fc6ffb8e2cddb8056942_161","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":24,"end":47}},"sink":{"start":53,"end":53,"column":{"start":24,"end":47},"content":""},"parent_line_number":53,"fingerprint":"b8c355a0084c43466bc70b1dcd6be5f3_0","old_fingerprint":"b8c355a0084c43466bc70b1dcd6be5f3_80","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":24,"end":46}},"sink":{"start":53,"end":53,"column":{"start":24,"end":46},"content":""},"parent_line_number":53,"fingerprint":"a5f20ac706cff876997333a00a322942_0","old_fingerprint":"a5f20ac706cff876997333a00a322942_81","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":22,"end":44}},"sink":{"start":53,"end":53,"column":{"start":22,"end":44},"content":""},"parent_line_number":53,"fingerprint":"6a1f3e0a8d908684e3e74182ee264fa9_0","old_fingerprint":"6a1f3e0a8d908684e3e74182ee264fa9_82","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":17,"end":39}},"sink":{"start":53,"end":53,"column":{"start":17,"end":39},"content":""},"parent_line_number":53,"fingerprint":"0634059794280432da633ecbbdbad0fe_0","old_fingerprint":"0634059794280432da633ecbbdbad0fe_83","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":18,"end":40}},"sink":{"start":53,"end":53,"column":{"start":18,"end":40},"content":""},"parent_line_number":53,"fingerprint":"2a8745a0197212c60b6c9c11d585d290_0","old_fingerprint":"2a8745a0197212c60b6c9c11d585d290_79","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":18,"end":40}},"sink":{"start":53,"end":53,"column":{"start":18,"end":40},"content":""},"parent_line_number":53,"fingerprint":"d8148a454e076c376829bacffea7e171_0","old_fingerprint":"d8148a454e076c376829bacffea7e171_88","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":24,"end":47}},"sink":{"start":63,"end":63,"column":{"start":24,"end":47},"content":""},"parent_line_number":63,"fingerprint":"5d8d9c78148cb6513d21682b064f3b60_0","old_fingerprint":"5d8d9c78148cb6513d21682b064f3b60_143","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01999.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01999.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":31}},"sink":{"start":64,"end":64,"column":{"start":9,"end":31},"content":""},"parent_line_number":64,"fingerprint":"6793513d2494d9eda484a94b50de5fd4_0","old_fingerprint":"6793513d2494d9eda484a94b50de5fd4_152","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02000.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02000.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":31}},"sink":{"start":64,"end":64,"column":{"start":9,"end":31},"content":""},"parent_line_number":64,"fingerprint":"13889069a14a895264b36dde8b1ba503_0","old_fingerprint":"13889069a14a895264b36dde8b1ba503_151","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":22,"end":44}},"sink":{"start":63,"end":63,"column":{"start":22,"end":44},"content":""},"parent_line_number":63,"fingerprint":"17c50ee48d91f2ed3a11705e36768a12_0","old_fingerprint":"17c50ee48d91f2ed3a11705e36768a12_144","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":26,"end":48}},"sink":{"start":63,"end":63,"column":{"start":26,"end":48},"content":""},"parent_line_number":63,"fingerprint":"5d0cae8bca2b623d8eed3e8abb6cd2c2_0","old_fingerprint":"5d0cae8bca2b623d8eed3e8abb6cd2c2_150","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":17,"end":39}},"sink":{"start":63,"end":63,"column":{"start":17,"end":39},"content":""},"parent_line_number":63,"fingerprint":"e679a4dc816a7739f64da36c7b33763e_0","old_fingerprint":"e679a4dc816a7739f64da36c7b33763e_149","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":18,"end":40}},"sink":{"start":63,"end":63,"column":{"start":18,"end":40},"content":""},"parent_line_number":63,"fingerprint":"fd27eac610a826b7a71c9d1258280c75_0","old_fingerprint":"fd27eac610a826b7a71c9d1258280c75_148","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":47}},"sink":{"start":55,"end":55,"column":{"start":24,"end":47},"content":""},"parent_line_number":55,"fingerprint":"a2173cf6b0485b91c2fd469291494ec1_0","old_fingerprint":"a2173cf6b0485b91c2fd469291494ec1_107","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":47}},"sink":{"start":55,"end":55,"column":{"start":24,"end":47},"content":""},"parent_line_number":55,"fingerprint":"7abfe595ab635fd1ca3947298d59482d_0","old_fingerprint":"7abfe595ab635fd1ca3947298d59482d_106","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":47}},"sink":{"start":55,"end":55,"column":{"start":24,"end":47},"content":""},"parent_line_number":55,"fingerprint":"36097b9ad5fc68bb40c34a43de88b521_0","old_fingerprint":"36097b9ad5fc68bb40c34a43de88b521_95","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":24,"end":46}},"sink":{"start":55,"end":55,"column":{"start":24,"end":46},"content":""},"parent_line_number":55,"fingerprint":"b38fcd9329ffa68bff710a709f869eb4_0","old_fingerprint":"b38fcd9329ffa68bff710a709f869eb4_103","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":17,"end":39}},"sink":{"start":55,"end":55,"column":{"start":17,"end":39},"content":""},"parent_line_number":55,"fingerprint":"15dd55086b873eda7f3063400adf9655_0","old_fingerprint":"15dd55086b873eda7f3063400adf9655_99","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":17,"end":39}},"sink":{"start":55,"end":55,"column":{"start":17,"end":39},"content":""},"parent_line_number":55,"fingerprint":"7c5164841b826ae4f99fe541f8322957_0","old_fingerprint":"7c5164841b826ae4f99fe541f8322957_100","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":18,"end":40}},"sink":{"start":55,"end":55,"column":{"start":18,"end":40},"content":""},"parent_line_number":55,"fingerprint":"c6ce32e3756775a9d5cbb123521f3363_0","old_fingerprint":"c6ce32e3756775a9d5cbb123521f3363_101","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":24,"end":47}},"sink":{"start":48,"end":48,"column":{"start":24,"end":47},"content":""},"parent_line_number":48,"fingerprint":"64e23a13ef161421745bb527e516ebdb_0","old_fingerprint":"64e23a13ef161421745bb527e516ebdb_10","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02138.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02138.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":31}},"sink":{"start":49,"end":49,"column":{"start":9,"end":31},"content":""},"parent_line_number":49,"fingerprint":"d11f7ef33588f90fa6996f531875bffe_0","old_fingerprint":"d11f7ef33588f90fa6996f531875bffe_21","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":22,"end":44}},"sink":{"start":48,"end":48,"column":{"start":22,"end":44},"content":""},"parent_line_number":48,"fingerprint":"3d5698ebd9f0b3b32189d9adf5e3a547_0","old_fingerprint":"3d5698ebd9f0b3b32189d9adf5e3a547_12","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":17,"end":39}},"sink":{"start":48,"end":48,"column":{"start":17,"end":39},"content":""},"parent_line_number":48,"fingerprint":"2431882d93012b52bbc9e3854a3b042c_0","old_fingerprint":"2431882d93012b52bbc9e3854a3b042c_13","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":48,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java","category_groups":["PII","Personal Data"],"source":{"start":48,"end":48,"column":{"start":18,"end":40}},"sink":{"start":48,"end":48,"column":{"start":18,"end":40},"content":""},"parent_line_number":48,"fingerprint":"877ca9bbb78d628c23bfc8ab4c7a68e7_0","old_fingerprint":"877ca9bbb78d628c23bfc8ab4c7a68e7_14","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":24,"end":47}},"sink":{"start":52,"end":52,"column":{"start":24,"end":47},"content":""},"parent_line_number":52,"fingerprint":"949d0e68fe63203897aad25d8f915a88_0","old_fingerprint":"949d0e68fe63203897aad25d8f915a88_74","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":26,"end":48}},"sink":{"start":52,"end":52,"column":{"start":26,"end":48},"content":""},"parent_line_number":52,"fingerprint":"8620fb029a6aebfeb2bc3b9c91ff6e78_0","old_fingerprint":"8620fb029a6aebfeb2bc3b9c91ff6e78_75","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":26,"end":48}},"sink":{"start":52,"end":52,"column":{"start":26,"end":48},"content":""},"parent_line_number":52,"fingerprint":"16a5543e13593b30c291de9a8180f26e_0","old_fingerprint":"16a5543e13593b30c291de9a8180f26e_76","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":18,"end":40}},"sink":{"start":62,"end":62,"column":{"start":18,"end":40},"content":""},"parent_line_number":62,"fingerprint":"2b712fc0bfc15ca994a905bb9ef22870_0","old_fingerprint":"2b712fc0bfc15ca994a905bb9ef22870_127","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":18,"end":40}},"sink":{"start":62,"end":62,"column":{"start":18,"end":40},"content":""},"parent_line_number":62,"fingerprint":"bf4a7ab73eff2c7fa1294466a0c4cfe8_0","old_fingerprint":"bf4a7ab73eff2c7fa1294466a0c4cfe8_135","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02415.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02415.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":31}},"sink":{"start":51,"end":51,"column":{"start":9,"end":31},"content":""},"parent_line_number":51,"fingerprint":"52bbb9cc1b4c8058865c744082eff6a0_0","old_fingerprint":"52bbb9cc1b4c8058865c744082eff6a0_65","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"430fd0b8c39ea57d06c38e986494ac3c_0","old_fingerprint":"430fd0b8c39ea57d06c38e986494ac3c_35","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"fe7b38bb6758d51df6e469f19c2287aa_0","old_fingerprint":"fe7b38bb6758d51df6e469f19c2287aa_34","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"1082c062aacd488044a30c67c05a6205_0","old_fingerprint":"1082c062aacd488044a30c67c05a6205_49","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":22,"end":44}},"sink":{"start":50,"end":50,"column":{"start":22,"end":44},"content":""},"parent_line_number":50,"fingerprint":"9d4304eddcaf60df46ae13bac0704432_0","old_fingerprint":"9d4304eddcaf60df46ae13bac0704432_37","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"2727fc1721c37e545c26479807c4fd41_0","old_fingerprint":"2727fc1721c37e545c26479807c4fd41_38","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"e0d066e0c0ee651fd87148c949ba8b5b_0","old_fingerprint":"e0d066e0c0ee651fd87148c949ba8b5b_42","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"9a154774a24973722b5c95ee628dbdb4_0","old_fingerprint":"9a154774a24973722b5c95ee628dbdb4_32","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":26,"end":48}},"sink":{"start":50,"end":50,"column":{"start":26,"end":48},"content":""},"parent_line_number":50,"fingerprint":"b0017e2b5a3deab902884ea4e01f93d9_0","old_fingerprint":"b0017e2b5a3deab902884ea4e01f93d9_44","code_extract":"        int randNumber = new java.util.Random().nextInt(99);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":17,"end":39}},"sink":{"start":50,"end":50,"column":{"start":17,"end":39},"content":""},"parent_line_number":50,"fingerprint":"cdb80f03984454d053db9ae37b8b30ff_0","old_fingerprint":"cdb80f03984454d053db9ae37b8b30ff_45","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":17,"end":39}},"sink":{"start":50,"end":50,"column":{"start":17,"end":39},"content":""},"parent_line_number":50,"fingerprint":"0d262185921a0e0f1f2ae905a4e56a98_0","old_fingerprint":"0d262185921a0e0f1f2ae905a4e56a98_46","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":18,"end":40}},"sink":{"start":50,"end":50,"column":{"start":18,"end":40},"content":""},"parent_line_number":50,"fingerprint":"f25b18f6425817475ce156f71d33c9c1_0","old_fingerprint":"f25b18f6425817475ce156f71d33c9c1_47","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":47}},"sink":{"start":50,"end":50,"column":{"start":24,"end":47},"content":""},"parent_line_number":50,"fingerprint":"b9ed6951707bdbf7978b85a54aeec4d5_0","old_fingerprint":"b9ed6951707bdbf7978b85a54aeec4d5_48","code_extract":"        double value = java.lang.Math.random();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"c44cebc207ae97b89d225ef8722f84e5_0","old_fingerprint":"c44cebc207ae97b89d225ef8722f84e5_51","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"06f4898a97a48a16977f81c6f8b2c028_0","old_fingerprint":"06f4898a97a48a16977f81c6f8b2c028_52","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":22,"end":44}},"sink":{"start":50,"end":50,"column":{"start":22,"end":44},"content":""},"parent_line_number":50,"fingerprint":"2bb7f49daa234d01d1d5b35098691a27_0","old_fingerprint":"2bb7f49daa234d01d1d5b35098691a27_54","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":24,"end":46}},"sink":{"start":50,"end":50,"column":{"start":24,"end":46},"content":""},"parent_line_number":50,"fingerprint":"aee5ecfb16da45927ff2fbb9e0923793_0","old_fingerprint":"aee5ecfb16da45927ff2fbb9e0923793_57","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":17,"end":39}},"sink":{"start":50,"end":50,"column":{"start":17,"end":39},"content":""},"parent_line_number":50,"fingerprint":"20e48e47fa5b61e5040dc444bfb2a960_0","old_fingerprint":"20e48e47fa5b61e5040dc444bfb2a960_39","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":17,"end":39}},"sink":{"start":50,"end":50,"column":{"start":17,"end":39},"content":""},"parent_line_number":50,"fingerprint":"8d21ddf8cb636d59d958a576a537f9be_0","old_fingerprint":"8d21ddf8cb636d59d958a576a537f9be_33","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":17,"end":39}},"sink":{"start":50,"end":50,"column":{"start":17,"end":39},"content":""},"parent_line_number":50,"fingerprint":"b605735b342bee632d6f78f5987bf39b_0","old_fingerprint":"b605735b342bee632d6f78f5987bf39b_50","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":17,"end":39}},"sink":{"start":50,"end":50,"column":{"start":17,"end":39},"content":""},"parent_line_number":50,"fingerprint":"2b92b309c86738fe2796586aa33c70bd_0","old_fingerprint":"2b92b309c86738fe2796586aa33c70bd_53","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":18,"end":40}},"sink":{"start":50,"end":50,"column":{"start":18,"end":40},"content":""},"parent_line_number":50,"fingerprint":"f14ee0a1916c53fe4a972bed1813e237_0","old_fingerprint":"f14ee0a1916c53fe4a972bed1813e237_55","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":18,"end":40}},"sink":{"start":50,"end":50,"column":{"start":18,"end":40},"content":""},"parent_line_number":50,"fingerprint":"c0231dc6373948712890742095a41a72_0","old_fingerprint":"c0231dc6373948712890742095a41a72_56","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02602.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02602.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":31}},"sink":{"start":73,"end":73,"column":{"start":9,"end":31},"content":""},"parent_line_number":73,"fingerprint":"e5ec142c7a696d9e6a2e8d4d25a7bf23_0","old_fingerprint":"e5ec142c7a696d9e6a2e8d4d25a7bf23_207","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02603.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02603.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":31}},"sink":{"start":73,"end":73,"column":{"start":9,"end":31},"content":""},"parent_line_number":73,"fingerprint":"ca90daec2c44043bfa950dce9480aad4_0","old_fingerprint":"ca90daec2c44043bfa950dce9480aad4_208","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":24,"end":46}},"sink":{"start":72,"end":72,"column":{"start":24,"end":46},"content":""},"parent_line_number":72,"fingerprint":"47b490f8ba9e3fa43e55af36e5f441fa_0","old_fingerprint":"47b490f8ba9e3fa43e55af36e5f441fa_206","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":24,"end":46}},"sink":{"start":72,"end":72,"column":{"start":24,"end":46},"content":""},"parent_line_number":72,"fingerprint":"d198b72b0fe1738b7b90427d418c28aa_0","old_fingerprint":"d198b72b0fe1738b7b90427d418c28aa_192","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":22,"end":44}},"sink":{"start":72,"end":72,"column":{"start":22,"end":44},"content":""},"parent_line_number":72,"fingerprint":"801778d8afdd5ac1db60ace467459c72_0","old_fingerprint":"801778d8afdd5ac1db60ace467459c72_205","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02700.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02700.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":31}},"sink":{"start":50,"end":50,"column":{"start":9,"end":31},"content":""},"parent_line_number":50,"fingerprint":"23d259870c0fceeb5c6b127833092a6c_0","old_fingerprint":"23d259870c0fceeb5c6b127833092a6c_59","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02701.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02701.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":31}},"sink":{"start":50,"end":50,"column":{"start":9,"end":31},"content":""},"parent_line_number":50,"fingerprint":"9652f3bdab2569d7d26e674d6ab1dd37_0","old_fingerprint":"9652f3bdab2569d7d26e674d6ab1dd37_58","code_extract":"        new java.util.Random().nextBytes(bytes);"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":24,"end":46}},"sink":{"start":49,"end":49,"column":{"start":24,"end":46},"content":""},"parent_line_number":49,"fingerprint":"2e545ba2f53e044e31cd3ad803291760_0","old_fingerprint":"2e545ba2f53e044e31cd3ad803291760_18","code_extract":"        double value = new java.util.Random().nextDouble();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":22,"end":44}},"sink":{"start":49,"end":49,"column":{"start":22,"end":44},"content":""},"parent_line_number":49,"fingerprint":"d20a9107e99f78a70c03906273f423c7_0","old_fingerprint":"d20a9107e99f78a70c03906273f423c7_23","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":22,"end":44}},"sink":{"start":49,"end":49,"column":{"start":22,"end":44},"content":""},"parent_line_number":49,"fingerprint":"6141d7493c2dac80923fe8388dac6760_0","old_fingerprint":"6141d7493c2dac80923fe8388dac6760_24","code_extract":"        float rand = new java.util.Random().nextFloat();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":24,"end":46}},"sink":{"start":49,"end":49,"column":{"start":24,"end":46},"content":""},"parent_line_number":49,"fingerprint":"804572d7c353c540d247dbd06d66b25c_0","old_fingerprint":"804572d7c353c540d247dbd06d66b25c_27","code_extract":"        double stuff = new java.util.Random().nextGaussian();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":17,"end":39}},"sink":{"start":49,"end":49,"column":{"start":17,"end":39},"content":""},"parent_line_number":49,"fingerprint":"e126d7e63f2bb87755a5fc2274952b37_0","old_fingerprint":"e126d7e63f2bb87755a5fc2274952b37_30","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":17,"end":39}},"sink":{"start":49,"end":49,"column":{"start":17,"end":39},"content":""},"parent_line_number":49,"fingerprint":"2d746d64f9025d782f318b39a11c5087_0","old_fingerprint":"2d746d64f9025d782f318b39a11c5087_31","code_extract":"        int r = new java.util.Random().nextInt();"},{"cwe_ids":["330"],"id":"java_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nThe use of predictable random values compromises application security, particularly when these values serve security-related functions.\n\n## Remediations\n\n- **Do** utilize a robust library for generating random values to enhance security.\n  ```java\n  SecureRandom random = new SecureRandom();\n  ```\n\n## References\n\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":18,"end":40}},"sink":{"start":49,"end":49,"column":{"start":18,"end":40},"content":""},"parent_line_number":49,"fingerprint":"056047b6df75bbc9f55431d3834ee9c8_0","old_fingerprint":"056047b6df75bbc9f55431d3834ee9c8_20","code_extract":"        long l = new java.util.Random().nextLong();"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00012.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00012.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":21,"end":58}},"sink":{"start":68,"end":68,"column":{"start":21,"end":58},"content":""},"parent_line_number":68,"fingerprint":"08f24721ff718be24367d93d4bdfd4f3_0","old_fingerprint":"08f24721ff718be24367d93d4bdfd4f3_11","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00138.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00138.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":21,"end":58}},"sink":{"start":72,"end":72,"column":{"start":21,"end":58},"content":""},"parent_line_number":72,"fingerprint":"5d1d0b4885338924477685e8ce912ddc_0","old_fingerprint":"5d1d0b4885338924477685e8ce912ddc_14","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":21,"end":58}},"sink":{"start":79,"end":79,"column":{"start":21,"end":58},"content":""},"parent_line_number":79,"fingerprint":"cd57d67fe98aa8801853f117c7ef231b_0","old_fingerprint":"cd57d67fe98aa8801853f117c7ef231b_20","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":21,"end":49}},"sink":{"start":78,"end":78,"column":{"start":21,"end":49},"content":""},"parent_line_number":78,"fingerprint":"2252daf7ec1448b5c1975ed2463b687c_0","old_fingerprint":"2252daf7ec1448b5c1975ed2463b687c_19","code_extract":"                    ctx.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":81,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java","category_groups":["PII","Personal Data"],"source":{"start":81,"end":81,"column":{"start":21,"end":58}},"sink":{"start":81,"end":81,"column":{"start":21,"end":58},"content":""},"parent_line_number":81,"fingerprint":"363186b7cf538172b7e359e3e989950d_0","old_fingerprint":"363186b7cf538172b7e359e3e989950d_23","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01023.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01023.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":58}},"sink":{"start":65,"end":65,"column":{"start":21,"end":58},"content":""},"parent_line_number":65,"fingerprint":"5b2d39758b5f2611410c9a93dfd4a4ab_0","old_fingerprint":"5b2d39758b5f2611410c9a93dfd4a4ab_5","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01024.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01024.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":21,"end":58}},"sink":{"start":65,"end":65,"column":{"start":21,"end":58},"content":""},"parent_line_number":65,"fingerprint":"ac4c85f8603906bc0cb5f3cf8e968741_0","old_fingerprint":"ac4c85f8603906bc0cb5f3cf8e968741_6","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01154.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01154.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":21,"end":58}},"sink":{"start":67,"end":67,"column":{"start":21,"end":58},"content":""},"parent_line_number":67,"fingerprint":"7085068859b43b1f7232ef0aad7840b3_0","old_fingerprint":"7085068859b43b1f7232ef0aad7840b3_10","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01326.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01326.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":58}},"sink":{"start":64,"end":64,"column":{"start":21,"end":58},"content":""},"parent_line_number":64,"fingerprint":"af10023f706f356425373561df078373_0","old_fingerprint":"af10023f706f356425373561df078373_2","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01327.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01327.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":58}},"sink":{"start":64,"end":64,"column":{"start":21,"end":58},"content":""},"parent_line_number":64,"fingerprint":"61b10bf848338cc4394135f3ca0421a1_0","old_fingerprint":"61b10bf848338cc4394135f3ca0421a1_3","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01402.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01402.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":21,"end":58}},"sink":{"start":74,"end":74,"column":{"start":21,"end":58},"content":""},"parent_line_number":74,"fingerprint":"1ab9b477a88ee1b0f886a96329c99a53_0","old_fingerprint":"1ab9b477a88ee1b0f886a96329c99a53_16","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":21,"end":58}},"sink":{"start":79,"end":79,"column":{"start":21,"end":58},"content":""},"parent_line_number":79,"fingerprint":"e08634b4c7c9c72655fe26185a2d2ab1_0","old_fingerprint":"e08634b4c7c9c72655fe26185a2d2ab1_22","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":21,"end":58}},"sink":{"start":79,"end":79,"column":{"start":21,"end":58},"content":""},"parent_line_number":79,"fingerprint":"824ee9741628240068c7f8691e2538e6_0","old_fingerprint":"824ee9741628240068c7f8691e2538e6_21","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01902.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01902.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":49}},"sink":{"start":64,"end":64,"column":{"start":21,"end":49},"content":""},"parent_line_number":64,"fingerprint":"36c5bb1b7741d360d257d6275fbe4ebb_0","old_fingerprint":"36c5bb1b7741d360d257d6275fbe4ebb_1","code_extract":"                    ctx.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01903.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01903.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":21,"end":49}},"sink":{"start":64,"end":64,"column":{"start":21,"end":49},"content":""},"parent_line_number":64,"fingerprint":"b58c614c012b1f4196ee54920b2a45bf_0","old_fingerprint":"b58c614c012b1f4196ee54920b2a45bf_4","code_extract":"                    ctx.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01909.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01909.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":21,"end":49}},"sink":{"start":66,"end":66,"column":{"start":21,"end":49},"content":""},"parent_line_number":66,"fingerprint":"56225ecbffe594a907d38301455964e4_0","old_fingerprint":"56225ecbffe594a907d38301455964e4_9","code_extract":"                    idc.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02025.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02025.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":21,"end":49}},"sink":{"start":66,"end":66,"column":{"start":21,"end":49},"content":""},"parent_line_number":66,"fingerprint":"4b66ba51f946b6be29fb9e683e792eb3_0","old_fingerprint":"4b66ba51f946b6be29fb9e683e792eb3_8","code_extract":"                    ctx.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02036.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02036.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":21,"end":58}},"sink":{"start":69,"end":69,"column":{"start":21,"end":58},"content":""},"parent_line_number":69,"fingerprint":"3b646cbb341aa46de2e18771b9ace3f9_0","old_fingerprint":"3b646cbb341aa46de2e18771b9ace3f9_13","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02037.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02037.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":21,"end":58}},"sink":{"start":69,"end":69,"column":{"start":21,"end":58},"content":""},"parent_line_number":69,"fingerprint":"93ac3396453b06644fc167c4e68ddf4a_0","old_fingerprint":"93ac3396453b06644fc167c4e68ddf4a_12","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02196.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02196.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":21,"end":49}},"sink":{"start":63,"end":63,"column":{"start":21,"end":49},"content":""},"parent_line_number":63,"fingerprint":"39d31d95643f88c741e192276c67846f_0","old_fingerprint":"39d31d95643f88c741e192276c67846f_0","code_extract":"                    ctx.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02208.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02208.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":21,"end":58}},"sink":{"start":66,"end":66,"column":{"start":21,"end":58},"content":""},"parent_line_number":66,"fingerprint":"c61ba4a228ec73a495e9f20933574150_0","old_fingerprint":"c61ba4a228ec73a495e9f20933574150_7","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02299.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02299.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":21,"end":49}},"sink":{"start":73,"end":73,"column":{"start":21,"end":49},"content":""},"parent_line_number":73,"fingerprint":"6496b86a314ed8262935bf6942a7cc2e_0","old_fingerprint":"6496b86a314ed8262935bf6942a7cc2e_15","code_extract":"                    ctx.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02305.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02305.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":21,"end":58}},"sink":{"start":76,"end":76,"column":{"start":21,"end":58},"content":""},"parent_line_number":76,"fingerprint":"89ea8de4516cf452d4b0ef185407ec85_0","old_fingerprint":"89ea8de4516cf452d4b0ef185407ec85_18","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02306.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02306.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":21,"end":49}},"sink":{"start":75,"end":75,"column":{"start":21,"end":49},"content":""},"parent_line_number":75,"fingerprint":"f69112d28cb9a2734e14ac187679f8f7_0","old_fingerprint":"f69112d28cb9a2734e14ac187679f8f7_17","code_extract":"                    idc.search(base, filter, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02553.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02553.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":21,"end":58}},"sink":{"start":84,"end":84,"column":{"start":21,"end":58},"content":""},"parent_line_number":84,"fingerprint":"f701621a562c98e04d46efb975b751da_0","old_fingerprint":"f701621a562c98e04d46efb975b751da_24","code_extract":"                    ctx.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02571.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02571.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":21,"end":58}},"sink":{"start":86,"end":86,"column":{"start":21,"end":58},"content":""},"parent_line_number":86,"fingerprint":"2fd9d36701d33da263ab0984c739d093_0","old_fingerprint":"2fd9d36701d33da263ab0984c739d093_26","code_extract":"                    idc.search(base, filter, filters, sc);"},{"cwe_ids":["90"],"id":"java_lang_ldap_injection","title":"Unsanitized user input in LDAP request","description":"## Description\n\nUsing unsanitized user input in an LDAP request can lead to LDAP injection, which is when attackers can modify the LDAP tree structure by injecting malicious input. It's crucial to ensure that data passed to an LDAP query is either not controlled by the user or is properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before including it in LDAP queries to prevent LDAP injection attacks.\n  ```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization method effectively neutralizes LDAP injection vectors\n\n          String filter = \"(\u0026(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n  ```\n\n## References\n\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ldap_injection","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02572.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02572.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":21,"end":49}},"sink":{"start":85,"end":85,"column":{"start":21,"end":49},"content":""},"parent_line_number":85,"fingerprint":"45e4db9028373208200ec4a532affe4f_0","old_fingerprint":"45e4db9028373208200ec4a532affe4f_25","code_extract":"                    idc.search(base, filter, sc);"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"5a8754cb93a65e9d65606f657999e2c3_0","old_fingerprint":"5a8754cb93a65e9d65606f657999e2c3_12","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"0e9e7fe4c00ce7e8b80cf132b4c7a5fd_0","old_fingerprint":"0e9e7fe4c00ce7e8b80cf132b4c7a5fd_40","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"cb7b74f19815f659f646e13bbfd28305_0","old_fingerprint":"cb7b74f19815f659f646e13bbfd28305_19","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":37,"end":92}},"sink":{"start":69,"end":69,"column":{"start":37,"end":92},"content":""},"parent_line_number":69,"fingerprint":"9571f1fa31569faeae151235dbcca478_0","old_fingerprint":"9571f1fa31569faeae151235dbcca478_23","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"8049365395a6ecdde6aa772fdf12ec3b_0","old_fingerprint":"8049365395a6ecdde6aa772fdf12ec3b_17","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":37,"end":92}},"sink":{"start":77,"end":77,"column":{"start":37,"end":92},"content":""},"parent_line_number":77,"fingerprint":"b11e053eb10ce44ef77bd53d4f24c53b_0","old_fingerprint":"b11e053eb10ce44ef77bd53d4f24c53b_32","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"dea1e078ec675e353087a4425b68a1ef_0","old_fingerprint":"dea1e078ec675e353087a4425b68a1ef_37","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":37,"end":92}},"sink":{"start":68,"end":68,"column":{"start":37,"end":92},"content":""},"parent_line_number":68,"fingerprint":"152933462f5fb90ce9e9d69694d1d7f5_0","old_fingerprint":"152933462f5fb90ce9e9d69694d1d7f5_22","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":37,"end":92}},"sink":{"start":71,"end":71,"column":{"start":37,"end":92},"content":""},"parent_line_number":71,"fingerprint":"f886a38e4696dd4055d833721c3bc9f0_0","old_fingerprint":"f886a38e4696dd4055d833721c3bc9f0_25","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":37,"end":92}},"sink":{"start":67,"end":67,"column":{"start":37,"end":92},"content":""},"parent_line_number":67,"fingerprint":"4102c00bb031ead4df81984462a19520_0","old_fingerprint":"4102c00bb031ead4df81984462a19520_21","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":37,"end":92}},"sink":{"start":71,"end":71,"column":{"start":37,"end":92},"content":""},"parent_line_number":71,"fingerprint":"54a714b61746ef56f6742fc1513832b7_0","old_fingerprint":"54a714b61746ef56f6742fc1513832b7_24","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"85076a35857d0ac775746fe419c61629_0","old_fingerprint":"85076a35857d0ac775746fe419c61629_7","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"fd28b3406d30f61a2eabedf70f56994e_0","old_fingerprint":"fd28b3406d30f61a2eabedf70f56994e_18","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"8e2aa6d9a17d723a1541a37fa1645899_0","old_fingerprint":"8e2aa6d9a17d723a1541a37fa1645899_35","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":37,"end":92}},"sink":{"start":80,"end":80,"column":{"start":37,"end":92},"content":""},"parent_line_number":80,"fingerprint":"434ac4acf1957e9757f4bfce15752c2d_0","old_fingerprint":"434ac4acf1957e9757f4bfce15752c2d_34","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":37,"end":92}},"sink":{"start":79,"end":79,"column":{"start":37,"end":92},"content":""},"parent_line_number":79,"fingerprint":"729973721a39a7b47f9c08381dba4da4_0","old_fingerprint":"729973721a39a7b47f9c08381dba4da4_33","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"eecca47977938976cadeb86b9b46e639_0","old_fingerprint":"eecca47977938976cadeb86b9b46e639_16","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":92}},"sink":{"start":74,"end":74,"column":{"start":37,"end":92},"content":""},"parent_line_number":74,"fingerprint":"44f9d23fd7a7c86af2391cea6b2f664c_0","old_fingerprint":"44f9d23fd7a7c86af2391cea6b2f664c_29","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":92}},"sink":{"start":74,"end":74,"column":{"start":37,"end":92},"content":""},"parent_line_number":74,"fingerprint":"bec32df5cd11839efa5d693a1c20b9f9_0","old_fingerprint":"bec32df5cd11839efa5d693a1c20b9f9_30","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":37,"end":92}},"sink":{"start":66,"end":66,"column":{"start":37,"end":92},"content":""},"parent_line_number":66,"fingerprint":"79daed13a072f591e4a751d81ebd3068_0","old_fingerprint":"79daed13a072f591e4a751d81ebd3068_20","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":37,"end":92}},"sink":{"start":59,"end":59,"column":{"start":37,"end":92},"content":""},"parent_line_number":59,"fingerprint":"39be54a160c019aa3d56966f3ed5cf27_0","old_fingerprint":"39be54a160c019aa3d56966f3ed5cf27_1","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":59,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":37,"end":92}},"sink":{"start":59,"end":59,"column":{"start":37,"end":92},"content":""},"parent_line_number":59,"fingerprint":"60235d59827bd0aacfa7f15f733ce99c_0","old_fingerprint":"60235d59827bd0aacfa7f15f733ce99c_0","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"2be17f7b9d46c7d2c5ee95fd8fde44b5_0","old_fingerprint":"2be17f7b9d46c7d2c5ee95fd8fde44b5_11","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"af085eb9e70fd104b4f6af0b6bf146bb_0","old_fingerprint":"af085eb9e70fd104b4f6af0b6bf146bb_10","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"004d600726c64475705d6a2250ed1ce2_0","old_fingerprint":"004d600726c64475705d6a2250ed1ce2_8","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"6b26582840a2fe751778dd5841ae0e8e_0","old_fingerprint":"6b26582840a2fe751778dd5841ae0e8e_4","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"44db3820479bac7d86db485d0ae57086_0","old_fingerprint":"44db3820479bac7d86db485d0ae57086_39","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"628e3c59b9e04e3f3ff2545e935dfde2_0","old_fingerprint":"628e3c59b9e04e3f3ff2545e935dfde2_36","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"57a4d06ea2e6b812e04fc01ac7a97990_0","old_fingerprint":"57a4d06ea2e6b812e04fc01ac7a97990_14","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":37,"end":92}},"sink":{"start":64,"end":64,"column":{"start":37,"end":92},"content":""},"parent_line_number":64,"fingerprint":"e3834c81755fa7b71868838c4d5ff9d6_0","old_fingerprint":"e3834c81755fa7b71868838c4d5ff9d6_15","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":37,"end":92}},"sink":{"start":74,"end":74,"column":{"start":37,"end":92},"content":""},"parent_line_number":74,"fingerprint":"507cea928dcf0f7eb9602c44c307cffe_0","old_fingerprint":"507cea928dcf0f7eb9602c44c307cffe_31","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"cc8701c74397c1bc5d516a3edf2924db_0","old_fingerprint":"cc8701c74397c1bc5d516a3edf2924db_9","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":37,"end":92}},"sink":{"start":63,"end":63,"column":{"start":37,"end":92},"content":""},"parent_line_number":63,"fingerprint":"ae52ab3974695af7cf97f9cb58c491e5_0","old_fingerprint":"ae52ab3974695af7cf97f9cb58c491e5_13","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":92}},"sink":{"start":73,"end":73,"column":{"start":37,"end":92},"content":""},"parent_line_number":73,"fingerprint":"730510a046a726ff4e887f9572b815d2_0","old_fingerprint":"730510a046a726ff4e887f9572b815d2_26","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":92}},"sink":{"start":73,"end":73,"column":{"start":37,"end":92},"content":""},"parent_line_number":73,"fingerprint":"901d21b26bc4f0996d93ffe1c00cd6b9_0","old_fingerprint":"901d21b26bc4f0996d93ffe1c00cd6b9_28","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":37,"end":92}},"sink":{"start":73,"end":73,"column":{"start":37,"end":92},"content":""},"parent_line_number":73,"fingerprint":"c42487a7f6614950b7f692977d2b3ddf_0","old_fingerprint":"c42487a7f6614950b7f692977d2b3ddf_27","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"d9f91f9108d974d8331b3ba14391f481_0","old_fingerprint":"d9f91f9108d974d8331b3ba14391f481_6","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":37,"end":92}},"sink":{"start":61,"end":61,"column":{"start":37,"end":92},"content":""},"parent_line_number":61,"fingerprint":"7a1911810aaed194e62c98d90321df03_0","old_fingerprint":"7a1911810aaed194e62c98d90321df03_5","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":37,"end":92}},"sink":{"start":83,"end":83,"column":{"start":37,"end":92},"content":""},"parent_line_number":83,"fingerprint":"10c05a6b8a3b62785ac3e045904e4054_0","old_fingerprint":"10c05a6b8a3b62785ac3e045904e4054_38","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":92}},"sink":{"start":60,"end":60,"column":{"start":37,"end":92},"content":""},"parent_line_number":60,"fingerprint":"2c0db66b489ed5fd417ee0658c66e8fd_0","old_fingerprint":"2c0db66b489ed5fd417ee0658c66e8fd_2","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["353"],"id":"java_lang_missing_integrity_check","title":"Missing support for integrity check","description":"## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), it is impossible to determine whether or not an attacker has interfered with or manipulated the transmitted data. This makes it difficult to confirm whether or not the transmitted data has been tampered with or altered by unauthorized parties (Man-in-the-Middle attack).\n\n## Remediations\n\n- **Do** use encryption schemes that include integrity checks to ensure the data has not been modified during transmission.\n  ```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n  ```\n\n## References\n\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check","line_number":60,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":37,"end":92}},"sink":{"start":60,"end":60,"column":{"start":37,"end":92},"content":""},"parent_line_number":60,"fingerprint":"db7986b88b8cb4cccc33de9a1c214cf8_0","old_fingerprint":"db7986b88b8cb4cccc33de9a1c214cf8_3","code_extract":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":9,"end":58}},"sink":{"start":67,"end":67,"column":{"start":9,"end":58},"content":""},"parent_line_number":67,"fingerprint":"a014ba93ddc5098ee43a9cd95b37cd1b_0","old_fingerprint":"a014ba93ddc5098ee43a9cd95b37cd1b_89","code_extract":"        request.getSession().setAttribute(param, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00010.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00010.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"fa84f24a5f936edb0c07a52f6537e545_0","old_fingerprint":"fa84f24a5f936edb0c07a52f6537e545_430","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"dcdec237a5022e11e5e7c96a195bf2ba_0","old_fingerprint":"dcdec237a5022e11e5e7c96a195bf2ba_117","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":52,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00031.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00031.java","category_groups":["PII","Personal Data"],"source":{"start":52,"end":52,"column":{"start":9,"end":55}},"sink":{"start":52,"end":52,"column":{"start":9,"end":55},"content":""},"parent_line_number":52,"fingerprint":"1717a148c6af2cb2741bcd69e45dcefa_0","old_fingerprint":"1717a148c6af2cb2741bcd69e45dcefa_35","code_extract":"        request.getSession().putValue(\"userid\", param);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00042.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00042.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"e89df327416195756f060657a61b60f9_0","old_fingerprint":"e89df327416195756f060657a61b60f9_168","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":13,"end":73}},"sink":{"start":108,"end":108,"column":{"start":13,"end":73},"content":""},"parent_line_number":108,"fingerprint":"803a62bd77be98d187c1d38311ba540c_0","old_fingerprint":"803a62bd77be98d187c1d38311ba540c_547","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":124,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java","category_groups":["PII","Personal Data"],"source":{"start":124,"end":124,"column":{"start":13,"end":73}},"sink":{"start":124,"end":124,"column":{"start":13,"end":73},"content":""},"parent_line_number":124,"fingerprint":"a82051afe13ad2ddf4169e197b71abd0_0","old_fingerprint":"a82051afe13ad2ddf4169e197b71abd0_606","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":13,"end":73}},"sink":{"start":108,"end":108,"column":{"start":13,"end":73},"content":""},"parent_line_number":108,"fingerprint":"2be445fc8aa3c916ab2c48632335d858_0","old_fingerprint":"2be445fc8aa3c916ab2c48632335d858_545","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":13,"end":73}},"sink":{"start":109,"end":109,"column":{"start":13,"end":73},"content":""},"parent_line_number":109,"fingerprint":"f385b1bb06b3d505ef6135b378d39fe2_0","old_fingerprint":"f385b1bb06b3d505ef6135b378d39fe2_565","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"5a24d26a30f7191fe22df890307b3852_0","old_fingerprint":"5a24d26a30f7191fe22df890307b3852_536","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"8c1a1b0020f13578be17003dbec34c51_0","old_fingerprint":"8c1a1b0020f13578be17003dbec34c51_479","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":13,"end":73}},"sink":{"start":101,"end":101,"column":{"start":13,"end":73},"content":""},"parent_line_number":101,"fingerprint":"28ccfb7fa73dfae6c673404d68347f13_0","old_fingerprint":"28ccfb7fa73dfae6c673404d68347f13_461","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"2fbccea246361a2d7b1d125797a88f7b_0","old_fingerprint":"2fbccea246361a2d7b1d125797a88f7b_467","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":13,"end":73}},"sink":{"start":106,"end":106,"column":{"start":13,"end":73},"content":""},"parent_line_number":106,"fingerprint":"b4226bc59977641b6ae1bd25586bf0be_0","old_fingerprint":"b4226bc59977641b6ae1bd25586bf0be_520","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"d762b5477a3b42de82c40cc11e5ea39c_0","old_fingerprint":"d762b5477a3b42de82c40cc11e5ea39c_497","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"f3340441a4ab6d45dc9e870bf66a0d01_0","old_fingerprint":"f3340441a4ab6d45dc9e870bf66a0d01_544","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"1ed4f49eaef65cff61bcc707f49f58b8_0","old_fingerprint":"1ed4f49eaef65cff61bcc707f49f58b8_540","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":112,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00094.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00094.java","category_groups":["PII","Personal Data"],"source":{"start":112,"end":112,"column":{"start":17,"end":77}},"sink":{"start":112,"end":112,"column":{"start":17,"end":77},"content":""},"parent_line_number":112,"fingerprint":"baa483e17ba7782799309176ce9db896_0","old_fingerprint":"baa483e17ba7782799309176ce9db896_591","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00095.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00095.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"9a1b0298a29d556efe1510cabe4037bf_0","old_fingerprint":"9a1b0298a29d556efe1510cabe4037bf_566","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00096.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00096.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"ba36968fe34b56c5eb03739d5b41d187_0","old_fingerprint":"ba36968fe34b56c5eb03739d5b41d187_558","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":53}},"sink":{"start":68,"end":68,"column":{"start":9,"end":53},"content":""},"parent_line_number":68,"fingerprint":"f531ec230f7965e1e18add113d297698_0","old_fingerprint":"f531ec230f7965e1e18add113d297698_90","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00099.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00099.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":9,"end":57}},"sink":{"start":78,"end":78,"column":{"start":9,"end":57},"content":""},"parent_line_number":78,"fingerprint":"42e74a457731885a09661b3a7988ee5e_0","old_fingerprint":"42e74a457731885a09661b3a7988ee5e_114","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"db5ee194b58744f73832ffb2a579ed5f_0","old_fingerprint":"db5ee194b58744f73832ffb2a579ed5f_444","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00160.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00160.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"538876fbbd77fa85013a5eae04aa22c5_0","old_fingerprint":"538876fbbd77fa85013a5eae04aa22c5_397","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":13,"end":73}},"sink":{"start":94,"end":94,"column":{"start":13,"end":73},"content":""},"parent_line_number":94,"fingerprint":"bd4842cacca1db3aaf146b96b9eccfb0_0","old_fingerprint":"bd4842cacca1db3aaf146b96b9eccfb0_358","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":13,"end":73}},"sink":{"start":87,"end":87,"column":{"start":13,"end":73},"content":""},"parent_line_number":87,"fingerprint":"e6a86ca3fed287c1b02f6ef4abfebed0_0","old_fingerprint":"e6a86ca3fed287c1b02f6ef4abfebed0_230","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"c3c1fbc6a74b4988e91a9d5b9c496445_0","old_fingerprint":"c3c1fbc6a74b4988e91a9d5b9c496445_245","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":13,"end":73}},"sink":{"start":92,"end":92,"column":{"start":13,"end":73},"content":""},"parent_line_number":92,"fingerprint":"60b93e4721ef5d29f48669cb1d45c592_0","old_fingerprint":"60b93e4721ef5d29f48669cb1d45c592_331","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":13,"end":73}},"sink":{"start":90,"end":90,"column":{"start":13,"end":73},"content":""},"parent_line_number":90,"fingerprint":"90b7fb8f399c7442c04a24a271a65b16_0","old_fingerprint":"90b7fb8f399c7442c04a24a271a65b16_299","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"c7eb8dc4bd8fc92e579da0ced49d18fc_0","old_fingerprint":"c7eb8dc4bd8fc92e579da0ced49d18fc_244","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":13,"end":73}},"sink":{"start":95,"end":95,"column":{"start":13,"end":73},"content":""},"parent_line_number":95,"fingerprint":"5e2ea4eb6c8350638854aab0e15d2422_0","old_fingerprint":"5e2ea4eb6c8350638854aab0e15d2422_381","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":13,"end":73}},"sink":{"start":93,"end":93,"column":{"start":13,"end":73},"content":""},"parent_line_number":93,"fingerprint":"87d56664d9005e532aacfd628ccf7c3d_0","old_fingerprint":"87d56664d9005e532aacfd628ccf7c3d_353","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00178.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00178.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"477966475b117a68a6a628fb54810398_0","old_fingerprint":"477966475b117a68a6a628fb54810398_382","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00179.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00179.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"d6a8dbd9e49d2933aa83aab75ed3ac83_0","old_fingerprint":"d6a8dbd9e49d2933aa83aab75ed3ac83_333","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00180.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00180.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":17,"end":77}},"sink":{"start":97,"end":97,"column":{"start":17,"end":77},"content":""},"parent_line_number":97,"fingerprint":"1957b00ed5a619697815b47dafb1ebfc_0","old_fingerprint":"1957b00ed5a619697815b47dafb1ebfc_415","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00181.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00181.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"0547779dcdd52061dd6cc8d0efd9fd85_0","old_fingerprint":"0547779dcdd52061dd6cc8d0efd9fd85_339","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00182.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00182.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"88293de0b0d478f596efb4820e81b45b_0","old_fingerprint":"88293de0b0d478f596efb4820e81b45b_583","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00183.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00183.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"cc491afcbe2249a626ac7aea6f574b38_0","old_fingerprint":"cc491afcbe2249a626ac7aea6f574b38_564","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00184.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00184.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"ff987cd84fa40140796d90dd504f0334_0","old_fingerprint":"ff987cd84fa40140796d90dd504f0334_365","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00185.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00185.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"4d85198dbb7648ea43947ad5f87d384f_0","old_fingerprint":"4d85198dbb7648ea43947ad5f87d384f_372","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00186.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00186.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"7fee9335b09bef2c087b214b12f3fe28_0","old_fingerprint":"7fee9335b09bef2c087b214b12f3fe28_571","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00187.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00187.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"be1c1eb50e1bb08588325e99a6b7dc56_0","old_fingerprint":"be1c1eb50e1bb08588325e99a6b7dc56_443","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00188.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00188.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"3c78bb07188a1d06ac40cad33d2de517_0","old_fingerprint":"3c78bb07188a1d06ac40cad33d2de517_371","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00189.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00189.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":9,"end":57}},"sink":{"start":75,"end":75,"column":{"start":9,"end":57},"content":""},"parent_line_number":75,"fingerprint":"e5b3cb58c3170246d4364c6b92410aa0_0","old_fingerprint":"e5b3cb58c3170246d4364c6b92410aa0_113","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00230.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00230.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"cd5494f0b838652c3dc105627798d36d_0","old_fingerprint":"cd5494f0b838652c3dc105627798d36d_486","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"4a33caca431b26ac11026459a708532e_0","old_fingerprint":"4a33caca431b26ac11026459a708532e_487","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"91d74228999e75ccff5b921a8692b2c8_0","old_fingerprint":"91d74228999e75ccff5b921a8692b2c8_494","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"87ce8553207fcb64fe19f32841df75b5_0","old_fingerprint":"87ce8553207fcb64fe19f32841df75b5_449","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"b1de8008a7522991e13194cdedc992d5_0","old_fingerprint":"b1de8008a7522991e13194cdedc992d5_495","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"5ca5e8528adea1677503a1915cc7b80b_0","old_fingerprint":"5ca5e8528adea1677503a1915cc7b80b_450","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"4d18ab88b2905c9123dbecf5b341b749_0","old_fingerprint":"4d18ab88b2905c9123dbecf5b341b749_489","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":116,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java","category_groups":["PII","Personal Data"],"source":{"start":116,"end":116,"column":{"start":13,"end":73}},"sink":{"start":116,"end":116,"column":{"start":13,"end":73},"content":""},"parent_line_number":116,"fingerprint":"ce738a5a2560d1f36c344724607f5f54_0","old_fingerprint":"ce738a5a2560d1f36c344724607f5f54_601","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":13,"end":73}},"sink":{"start":105,"end":105,"column":{"start":13,"end":73},"content":""},"parent_line_number":105,"fingerprint":"dc33747aeef1a644fc81b732a5ddf973_0","old_fingerprint":"dc33747aeef1a644fc81b732a5ddf973_515","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":118,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java","category_groups":["PII","Personal Data"],"source":{"start":118,"end":118,"column":{"start":13,"end":73}},"sink":{"start":118,"end":118,"column":{"start":13,"end":73},"content":""},"parent_line_number":118,"fingerprint":"c9600d309d2bd67924860cb2747c7c6f_0","old_fingerprint":"c9600d309d2bd67924860cb2747c7c6f_604","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":100,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java","category_groups":["PII","Personal Data"],"source":{"start":100,"end":100,"column":{"start":13,"end":73}},"sink":{"start":100,"end":100,"column":{"start":13,"end":73},"content":""},"parent_line_number":100,"fingerprint":"5e0210df1656281e6dcc2cedde75e230_0","old_fingerprint":"5e0210df1656281e6dcc2cedde75e230_455","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00243.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00243.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"a7bd305d35640ff998983a52042c2cab_0","old_fingerprint":"a7bd305d35640ff998983a52042c2cab_574","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00244.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00244.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"1184b4985de22002427ecfed639c5b5d_0","old_fingerprint":"1184b4985de22002427ecfed639c5b5d_575","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":123,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00245.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00245.java","category_groups":["PII","Personal Data"],"source":{"start":123,"end":123,"column":{"start":17,"end":77}},"sink":{"start":123,"end":123,"column":{"start":17,"end":77},"content":""},"parent_line_number":123,"fingerprint":"94c22c2022a8e8b04ea6be3787bd2172_0","old_fingerprint":"94c22c2022a8e8b04ea6be3787bd2172_605","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00246.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00246.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"873679158585a1e3e7f7dcaa85c6b4cb_0","old_fingerprint":"873679158585a1e3e7f7dcaa85c6b4cb_587","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00247.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00247.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"db5b0c24412e838f08a88ea4b1265541_0","old_fingerprint":"db5b0c24412e838f08a88ea4b1265541_524","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00248.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00248.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"7afb830e15202f33fae82accf5eabfbb_0","old_fingerprint":"7afb830e15202f33fae82accf5eabfbb_454","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00249.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00249.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"357bfe3ce1d812f74482cdf0f51398ae_0","old_fingerprint":"357bfe3ce1d812f74482cdf0f51398ae_451","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00251.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00251.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":53}},"sink":{"start":65,"end":65,"column":{"start":9,"end":53},"content":""},"parent_line_number":65,"fingerprint":"4f5a6ed52afe8a0914f8f3a88662cd98_0","old_fingerprint":"4f5a6ed52afe8a0914f8f3a88662cd98_87","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00252.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00252.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":56}},"sink":{"start":74,"end":74,"column":{"start":9,"end":56},"content":""},"parent_line_number":74,"fingerprint":"c694acc0dfee039cd6b4260c47d08eae_0","old_fingerprint":"c694acc0dfee039cd6b4260c47d08eae_112","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":13,"end":73}},"sink":{"start":94,"end":94,"column":{"start":13,"end":73},"content":""},"parent_line_number":94,"fingerprint":"5122cd6bede05ef66ef6ab5f0f8a3f8d_0","old_fingerprint":"5122cd6bede05ef66ef6ab5f0f8a3f8d_359","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"bf0c615dbf66d72fb682f361af00975a_0","old_fingerprint":"bf0c615dbf66d72fb682f361af00975a_312","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":13,"end":73}},"sink":{"start":94,"end":94,"column":{"start":13,"end":73},"content":""},"parent_line_number":94,"fingerprint":"ad24561e82876a940356603043519da1_0","old_fingerprint":"ad24561e82876a940356603043519da1_355","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":13,"end":73}},"sink":{"start":95,"end":95,"column":{"start":13,"end":73},"content":""},"parent_line_number":95,"fingerprint":"294988320fe2332c255c8155f040868b_0","old_fingerprint":"294988320fe2332c255c8155f040868b_377","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00312.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00312.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"3cc131fb6a96b9493f8b7c9210d4da7b_0","old_fingerprint":"3cc131fb6a96b9493f8b7c9210d4da7b_386","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00313.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00313.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"b1507a15adc9f7309f294f9b7c8aa0f5_0","old_fingerprint":"b1507a15adc9f7309f294f9b7c8aa0f5_404","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00314.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00314.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":17,"end":77}},"sink":{"start":97,"end":97,"column":{"start":17,"end":77},"content":""},"parent_line_number":97,"fingerprint":"81f8677663b6060da44c3cfb6fae5290_0","old_fingerprint":"81f8677663b6060da44c3cfb6fae5290_409","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00315.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00315.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":17,"end":77}},"sink":{"start":104,"end":104,"column":{"start":17,"end":77},"content":""},"parent_line_number":104,"fingerprint":"ef46131cdefc92446da11019b1f90d15_0","old_fingerprint":"ef46131cdefc92446da11019b1f90d15_504","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":114,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00316.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00316.java","category_groups":["PII","Personal Data"],"source":{"start":114,"end":114,"column":{"start":17,"end":77}},"sink":{"start":114,"end":114,"column":{"start":17,"end":77},"content":""},"parent_line_number":114,"fingerprint":"344f84a208b4910e8e4e9a8e928e5ebc_0","old_fingerprint":"344f84a208b4910e8e4e9a8e928e5ebc_598","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00317.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00317.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"69a96f88ae7034d4d7558cda8f25d319_0","old_fingerprint":"69a96f88ae7034d4d7558cda8f25d319_390","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":113,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00318.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00318.java","category_groups":["PII","Personal Data"],"source":{"start":113,"end":113,"column":{"start":17,"end":77}},"sink":{"start":113,"end":113,"column":{"start":17,"end":77},"content":""},"parent_line_number":113,"fingerprint":"beb2af78433a4d71b00b9b4d0f3ca365_0","old_fingerprint":"beb2af78433a4d71b00b9b4d0f3ca365_594","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00319.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00319.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"79f9078e0c147a384285bd51d4b06321_0","old_fingerprint":"79f9078e0c147a384285bd51d4b06321_570","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00320.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00320.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"cb601092917f18d63470e2e0e24fd93e_0","old_fingerprint":"cb601092917f18d63470e2e0e24fd93e_391","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00321.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00321.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":52}},"sink":{"start":56,"end":56,"column":{"start":9,"end":52},"content":""},"parent_line_number":56,"fingerprint":"cc1aa4e0f2b962c89d5ecc1870de5cd4_0","old_fingerprint":"cc1aa4e0f2b962c89d5ecc1870de5cd4_69","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":62,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00322.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00322.java","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":9,"end":53}},"sink":{"start":62,"end":62,"column":{"start":9,"end":53},"content":""},"parent_line_number":62,"fingerprint":"6c5d5044813dc3051d6858d09aa660e3_0","old_fingerprint":"6c5d5044813dc3051d6858d09aa660e3_73","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00323.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00323.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":9,"end":53}},"sink":{"start":61,"end":61,"column":{"start":9,"end":53},"content":""},"parent_line_number":61,"fingerprint":"c5cd36b059fff21f182276e7736fd7b1_0","old_fingerprint":"c5cd36b059fff21f182276e7736fd7b1_72","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00324.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00324.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"2402e6ea9e756acd7c231cd3617b0b39_0","old_fingerprint":"2402e6ea9e756acd7c231cd3617b0b39_68","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00325.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00325.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"00fcf6d6c4818e5c4d67228928693aff_0","old_fingerprint":"00fcf6d6c4818e5c4d67228928693aff_67","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":58,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00327.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00327.java","category_groups":["PII","Personal Data"],"source":{"start":58,"end":58,"column":{"start":9,"end":57}},"sink":{"start":58,"end":58,"column":{"start":9,"end":57},"content":""},"parent_line_number":58,"fingerprint":"c135bcb5542e59077c62b9b6d6d02185_0","old_fingerprint":"c135bcb5542e59077c62b9b6d6d02185_70","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"ba01e329120172474392cf604edd69cd_0","old_fingerprint":"ba01e329120172474392cf604edd69cd_118","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00349.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00349.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"ca0f15b247e6ee0edf50fb80c4bdf98e_0","old_fingerprint":"ca0f15b247e6ee0edf50fb80c4bdf98e_208","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"718041a87d41c8d3192a7d20e74743a0_0","old_fingerprint":"718041a87d41c8d3192a7d20e74743a0_150","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":13,"end":73}},"sink":{"start":87,"end":87,"column":{"start":13,"end":73},"content":""},"parent_line_number":87,"fingerprint":"8c03866f28955fb1600f086a6572d684_0","old_fingerprint":"8c03866f28955fb1600f086a6572d684_233","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00397.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00397.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"7c138080635c873c4430a7fd39eb93db_0","old_fingerprint":"7c138080635c873c4430a7fd39eb93db_189","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"da1ab6a911f49485bc675b5a86ebb163_0","old_fingerprint":"da1ab6a911f49485bc675b5a86ebb163_279","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":13,"end":73}},"sink":{"start":104,"end":104,"column":{"start":13,"end":73},"content":""},"parent_line_number":104,"fingerprint":"ed21d1aa3ed953287d2bef8bd5ce9906_0","old_fingerprint":"ed21d1aa3ed953287d2bef8bd5ce9906_505","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"12843cde2b423e60140c77838cd0917b_0","old_fingerprint":"12843cde2b423e60140c77838cd0917b_478","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"9479a1765be7cfa04c3c6c3cbeafa482_0","old_fingerprint":"9479a1765be7cfa04c3c6c3cbeafa482_281","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"fd3bc4d43b0a8ffc8eb673db58eaa29a_0","old_fingerprint":"fd3bc4d43b0a8ffc8eb673db58eaa29a_196","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00413.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00413.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"aac4e985dac20a5b0010491b62625945_0","old_fingerprint":"aac4e985dac20a5b0010491b62625945_399","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00414.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00414.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"b7f888bdfd0ab79ddfc44edf81059590_0","old_fingerprint":"b7f888bdfd0ab79ddfc44edf81059590_563","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00415.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00415.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":17,"end":77}},"sink":{"start":97,"end":97,"column":{"start":17,"end":77},"content":""},"parent_line_number":97,"fingerprint":"2e48ddc7ab62c89cb9b8d5645d21a882_0","old_fingerprint":"2e48ddc7ab62c89cb9b8d5645d21a882_420","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00416.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00416.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"10f81b5be8e5e99a42c8e720dbd96c0a_0","old_fingerprint":"10f81b5be8e5e99a42c8e720dbd96c0a_405","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00417.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00417.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"3b7459896cf1434a7e386121100f6443_0","old_fingerprint":"3b7459896cf1434a7e386121100f6443_403","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00418.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00418.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"78fcb8872784b36103e353af83375b3d_0","old_fingerprint":"78fcb8872784b36103e353af83375b3d_324","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00419.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00419.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"9633e781d328a055c2991300a2046daa_0","old_fingerprint":"9633e781d328a055c2991300a2046daa_374","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00420.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00420.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"883fa75c5d7b0193a0387170a45049fa_0","old_fingerprint":"883fa75c5d7b0193a0387170a45049fa_292","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00421.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00421.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"6a9e6cf2a26d388b9ad352be1837341c_0","old_fingerprint":"6a9e6cf2a26d388b9ad352be1837341c_151","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00422.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00422.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"721911c78443e07404500a35c2b9db7d_0","old_fingerprint":"721911c78443e07404500a35c2b9db7d_284","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00423.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00423.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"51fabf23f0d8ef0c68fd2df383a3e0f1_0","old_fingerprint":"51fabf23f0d8ef0c68fd2df383a3e0f1_210","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00424.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00424.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"ab2b78cc5b9d7f066954631396c1f4b7_0","old_fingerprint":"ab2b78cc5b9d7f066954631396c1f4b7_55","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00425.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00425.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":53}},"sink":{"start":50,"end":50,"column":{"start":9,"end":53},"content":""},"parent_line_number":50,"fingerprint":"dccaa18d54b2ae5f1e92c63922c9fc4b_0","old_fingerprint":"dccaa18d54b2ae5f1e92c63922c9fc4b_11","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00427.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00427.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":9,"end":57}},"sink":{"start":69,"end":69,"column":{"start":9,"end":57},"content":""},"parent_line_number":69,"fingerprint":"8ab1017519d36524a3967fdd59740c8b_0","old_fingerprint":"8ab1017519d36524a3967fdd59740c8b_102","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"19be3fa83df3ef513ee1569ec298e00e_0","old_fingerprint":"19be3fa83df3ef513ee1569ec298e00e_249","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00482.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00482.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"0618daf75e063669e422f4d7d158d6f5_0","old_fingerprint":"0618daf75e063669e422f4d7d158d6f5_240","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00483.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00483.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":13,"end":73}},"sink":{"start":93,"end":93,"column":{"start":13,"end":73},"content":""},"parent_line_number":93,"fingerprint":"94ff7fee3f7aa4244c3e5c5ac95dbfbc_0","old_fingerprint":"94ff7fee3f7aa4244c3e5c5ac95dbfbc_343","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":13,"end":73}},"sink":{"start":92,"end":92,"column":{"start":13,"end":73},"content":""},"parent_line_number":92,"fingerprint":"1222f39d4d6c242abea7724741d88ed4_0","old_fingerprint":"1222f39d4d6c242abea7724741d88ed4_337","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"f9d398e5dc07839067c33960f3c1d212_0","old_fingerprint":"f9d398e5dc07839067c33960f3c1d212_247","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"09c8fd36357ca25c037cb5151af5cf84_0","old_fingerprint":"09c8fd36357ca25c037cb5151af5cf84_195","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"6667bb142cad378b014f35304252159b_0","old_fingerprint":"6667bb142cad378b014f35304252159b_311","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"69fb17c9779f69e33370db0cf4c8effb_0","old_fingerprint":"69fb17c9779f69e33370db0cf4c8effb_407","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":13,"end":73}},"sink":{"start":92,"end":92,"column":{"start":13,"end":73},"content":""},"parent_line_number":92,"fingerprint":"8c44430b48f45798877bcf8d403aa115_0","old_fingerprint":"8c44430b48f45798877bcf8d403aa115_340","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"fb362447e349c3e5f7cf762204f7efb1_0","old_fingerprint":"fb362447e349c3e5f7cf762204f7efb1_411","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00501.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00501.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"3be27c0305e526198b669f8aa18ffe5b_0","old_fingerprint":"3be27c0305e526198b669f8aa18ffe5b_517","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00502.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00502.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"a5ca06a513ba3e16ba1b04866caf3c73_0","old_fingerprint":"a5ca06a513ba3e16ba1b04866caf3c73_388","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00503.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00503.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":17,"end":77}},"sink":{"start":101,"end":101,"column":{"start":17,"end":77},"content":""},"parent_line_number":101,"fingerprint":"790d1dfb3baaedd063ed72cff2ba1a59_0","old_fingerprint":"790d1dfb3baaedd063ed72cff2ba1a59_465","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00504.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00504.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"febf6e77a7c5098aab4b7ef3439257bf_0","old_fingerprint":"febf6e77a7c5098aab4b7ef3439257bf_274","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00505.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00505.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"356818bdce0491c7ab2d81927913754e_0","old_fingerprint":"356818bdce0491c7ab2d81927913754e_344","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00506.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00506.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"5ab26a84ff63591769da2069417cca0b_0","old_fingerprint":"5ab26a84ff63591769da2069417cca0b_568","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00507.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00507.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"3a6cd77ffd9cbe910e59658acd1962a6_0","old_fingerprint":"3a6cd77ffd9cbe910e59658acd1962a6_273","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00508.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00508.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":57}},"sink":{"start":54,"end":54,"column":{"start":9,"end":57},"content":""},"parent_line_number":54,"fingerprint":"c31eeab8d38d881f9ea6697e40241fda_0","old_fingerprint":"c31eeab8d38d881f9ea6697e40241fda_49","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"a383ada5466bf94205cc061997fd8e3e_0","old_fingerprint":"a383ada5466bf94205cc061997fd8e3e_488","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"15aa63c78183effa3c2be954699f0020_0","old_fingerprint":"15aa63c78183effa3c2be954699f0020_539","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":116,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java","category_groups":["PII","Personal Data"],"source":{"start":116,"end":116,"column":{"start":13,"end":73}},"sink":{"start":116,"end":116,"column":{"start":13,"end":73},"content":""},"parent_line_number":116,"fingerprint":"0a4788fd04fa085e445ba40833a2f4ff_0","old_fingerprint":"0a4788fd04fa085e445ba40833a2f4ff_602","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"b13da87ce88102376eed7b2b29449d99_0","old_fingerprint":"b13da87ce88102376eed7b2b29449d99_395","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":13,"end":73}},"sink":{"start":98,"end":98,"column":{"start":13,"end":73},"content":""},"parent_line_number":98,"fingerprint":"55eff9bc726be8a3d27b5c89c3c320d2_0","old_fingerprint":"55eff9bc726be8a3d27b5c89c3c320d2_428","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00577.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00577.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"3041c17131d654139a544653ae22a1c4_0","old_fingerprint":"3041c17131d654139a544653ae22a1c4_573","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00578.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00578.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"7c4145b22ee8ebb0f8ad09775d3b207f_0","old_fingerprint":"7c4145b22ee8ebb0f8ad09775d3b207f_525","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00579.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00579.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"4121259382dcf2614909c3ec49336e3e_0","old_fingerprint":"4121259382dcf2614909c3ec49336e3e_562","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00580.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00580.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"7ac494630de2d190b4bf38fb2751128d_0","old_fingerprint":"7ac494630de2d190b4bf38fb2751128d_560","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00581.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00581.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":17,"end":77}},"sink":{"start":101,"end":101,"column":{"start":17,"end":77},"content":""},"parent_line_number":101,"fingerprint":"d9cceb2b1e5a9dd8e3c362a9df5e4d91_0","old_fingerprint":"d9cceb2b1e5a9dd8e3c362a9df5e4d91_466","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00582.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00582.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"a637af7e0cd88de12d4f7e9183c6b40c_0","old_fingerprint":"a637af7e0cd88de12d4f7e9183c6b40c_531","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00583.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00583.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"9c5d6842de72e1c62156e612a982438c_0","old_fingerprint":"9c5d6842de72e1c62156e612a982438c_518","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00584.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00584.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":17,"end":77}},"sink":{"start":107,"end":107,"column":{"start":17,"end":77},"content":""},"parent_line_number":107,"fingerprint":"1aaffea5a287a31db888d8ca2beffdfc_0","old_fingerprint":"1aaffea5a287a31db888d8ca2beffdfc_535","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00585.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00585.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"cba33749d1383fa24f20d8ae1067bf7b_0","old_fingerprint":"cba33749d1383fa24f20d8ae1067bf7b_452","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00586.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00586.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":9,"end":52}},"sink":{"start":69,"end":69,"column":{"start":9,"end":52},"content":""},"parent_line_number":69,"fingerprint":"77cc9a27cd05e75beb718ae3ec496c94_0","old_fingerprint":"77cc9a27cd05e75beb718ae3ec496c94_103","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00587.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00587.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":56}},"sink":{"start":68,"end":68,"column":{"start":9,"end":56},"content":""},"parent_line_number":68,"fingerprint":"d2dd728cbe1755d29cde8b0dcf8ae27f_0","old_fingerprint":"d2dd728cbe1755d29cde8b0dcf8ae27f_91","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00588.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00588.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":9,"end":56}},"sink":{"start":66,"end":66,"column":{"start":9,"end":56},"content":""},"parent_line_number":66,"fingerprint":"afe186316e165c498de03b1e1b53c7f9_0","old_fingerprint":"afe186316e165c498de03b1e1b53c7f9_88","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00652.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00652.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"baf3be4794bf5bed16cf4454d87c0b87_0","old_fingerprint":"baf3be4794bf5bed16cf4454d87c0b87_258","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"68f32c26a04ad903e5d91376e1206795_0","old_fingerprint":"68f32c26a04ad903e5d91376e1206795_261","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":13,"end":73}},"sink":{"start":95,"end":95,"column":{"start":13,"end":73},"content":""},"parent_line_number":95,"fingerprint":"2c423d336be3edf3e576e50788aa0840_0","old_fingerprint":"2c423d336be3edf3e576e50788aa0840_376","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00660.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00660.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"49eda76021b8c68ae736c2a5ab0b1f2e_0","old_fingerprint":"49eda76021b8c68ae736c2a5ab0b1f2e_260","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00661.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00661.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"384982f5b1607d0181fb53cd4f8f31a7_0","old_fingerprint":"384982f5b1607d0181fb53cd4f8f31a7_349","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00662.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00662.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"f799b74e156de3ece7eaabecd0124e29_0","old_fingerprint":"f799b74e156de3ece7eaabecd0124e29_402","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00663.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00663.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"639f0fce6c82d6eeeb2f1789d0ed77f6_0","old_fingerprint":"639f0fce6c82d6eeeb2f1789d0ed77f6_364","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00664.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00664.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"5ad28c76b9a3a93b68caa42d2f871b1d_0","old_fingerprint":"5ad28c76b9a3a93b68caa42d2f871b1d_556","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00665.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00665.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"66cffcb67a853bb23235d817db0833d0_0","old_fingerprint":"66cffcb67a853bb23235d817db0833d0_330","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00666.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00666.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"f6b76fdbe570662fd4166bd9fd57bd53_0","old_fingerprint":"f6b76fdbe570662fd4166bd9fd57bd53_313","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00667.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00667.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"be2d8ee1f4fad24fb2b88a6a0fc435a6_0","old_fingerprint":"be2d8ee1f4fad24fb2b88a6a0fc435a6_303","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00668.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00668.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":52}},"sink":{"start":51,"end":51,"column":{"start":9,"end":52},"content":""},"parent_line_number":51,"fingerprint":"ba80942b655f227994f7df1addfd5e7c_0","old_fingerprint":"ba80942b655f227994f7df1addfd5e7c_19","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00669.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00669.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":52}},"sink":{"start":56,"end":56,"column":{"start":9,"end":52},"content":""},"parent_line_number":56,"fingerprint":"11bc172aa6e3f15bf14ba53f56a82566_0","old_fingerprint":"11bc172aa6e3f15bf14ba53f56a82566_60","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":55,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00670.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00670.java","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":9,"end":52}},"sink":{"start":55,"end":55,"column":{"start":9,"end":52},"content":""},"parent_line_number":55,"fingerprint":"31261d821e5aef9b7f79704679b302f9_0","old_fingerprint":"31261d821e5aef9b7f79704679b302f9_54","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":13,"end":73}},"sink":{"start":93,"end":93,"column":{"start":13,"end":73},"content":""},"parent_line_number":93,"fingerprint":"b9091d7ca7da8c03f5869ae7d2fbf44d_0","old_fingerprint":"b9091d7ca7da8c03f5869ae7d2fbf44d_345","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"e57810a0855839a749dd5f68ae505ad5_0","old_fingerprint":"e57810a0855839a749dd5f68ae505ad5_204","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"592c88046df89ec40a8090cc4d5ac789_0","old_fingerprint":"592c88046df89ec40a8090cc4d5ac789_498","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":13,"end":73}},"sink":{"start":95,"end":95,"column":{"start":13,"end":73},"content":""},"parent_line_number":95,"fingerprint":"4645af9231b23c3e9a381f0b9d1f9166_0","old_fingerprint":"4645af9231b23c3e9a381f0b9d1f9166_379","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00744.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00744.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":17,"end":77}},"sink":{"start":103,"end":103,"column":{"start":17,"end":77},"content":""},"parent_line_number":103,"fingerprint":"c8ac1539ba189a894bbbf3a19b44e0df_0","old_fingerprint":"c8ac1539ba189a894bbbf3a19b44e0df_491","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00745.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00745.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"197f0b0e2a84b817c54c7dfde9c3758f_0","old_fingerprint":"197f0b0e2a84b817c54c7dfde9c3758f_351","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":112,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00746.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00746.java","category_groups":["PII","Personal Data"],"source":{"start":112,"end":112,"column":{"start":17,"end":77}},"sink":{"start":112,"end":112,"column":{"start":17,"end":77},"content":""},"parent_line_number":112,"fingerprint":"41e67a0f719a9fd822659f92b7623c45_0","old_fingerprint":"41e67a0f719a9fd822659f92b7623c45_592","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00747.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00747.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"870e4ad189f0169ed6e8e2961e76bcfb_0","old_fingerprint":"870e4ad189f0169ed6e8e2961e76bcfb_327","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":113,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00748.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00748.java","category_groups":["PII","Personal Data"],"source":{"start":113,"end":113,"column":{"start":17,"end":77}},"sink":{"start":113,"end":113,"column":{"start":17,"end":77},"content":""},"parent_line_number":113,"fingerprint":"805d362974b93e26b142e2665c58f180_0","old_fingerprint":"805d362974b93e26b142e2665c58f180_593","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00749.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00749.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"774ce295a407aaa4f6345d78355d169a_0","old_fingerprint":"774ce295a407aaa4f6345d78355d169a_287","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00750.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00750.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"70d503c37662481ae0eb2bffcd416cac_0","old_fingerprint":"70d503c37662481ae0eb2bffcd416cac_348","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00751.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00751.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"90c8d658f5b822f9e144f0f4adc4d201_0","old_fingerprint":"90c8d658f5b822f9e144f0f4adc4d201_362","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00752.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00752.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"39e79a894862f48e72788eb4f016fa33_0","old_fingerprint":"39e79a894862f48e72788eb4f016fa33_511","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00753.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00753.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"735a6a4ea82664a531d8fd7af5cf3020_0","old_fingerprint":"735a6a4ea82664a531d8fd7af5cf3020_241","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00754.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00754.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"8d7cd5b5f71070104c73dbfcda89f83a_0","old_fingerprint":"8d7cd5b5f71070104c73dbfcda89f83a_56","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00755.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00755.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"8e4ae960838dfc76c65ba293e148e0d9_0","old_fingerprint":"8e4ae960838dfc76c65ba293e148e0d9_61","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00756.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00756.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"0bfc204f46d8f0c4a9e110e30cb6b31a_0","old_fingerprint":"0bfc204f46d8f0c4a9e110e30cb6b31a_22","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":61,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00758.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00758.java","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":9,"end":57}},"sink":{"start":61,"end":61,"column":{"start":9,"end":57},"content":""},"parent_line_number":61,"fingerprint":"6f6fdc1f207f1bc830050442b80f078a_0","old_fingerprint":"6f6fdc1f207f1bc830050442b80f078a_71","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00759.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00759.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":57}},"sink":{"start":54,"end":54,"column":{"start":9,"end":57},"content":""},"parent_line_number":54,"fingerprint":"d9ebf000fbb7ef7fd445f6e2c097f0a3_0","old_fingerprint":"d9ebf000fbb7ef7fd445f6e2c097f0a3_45","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":127,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java","category_groups":["PII","Personal Data"],"source":{"start":127,"end":127,"column":{"start":13,"end":73}},"sink":{"start":127,"end":127,"column":{"start":13,"end":73},"content":""},"parent_line_number":127,"fingerprint":"1ccb12ae7f74f51d4a4f984a51a77612_0","old_fingerprint":"1ccb12ae7f74f51d4a4f984a51a77612_607","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":13,"end":73}},"sink":{"start":110,"end":110,"column":{"start":13,"end":73},"content":""},"parent_line_number":110,"fingerprint":"c4ff16198bbf67c0231b45dfccec7882_0","old_fingerprint":"c4ff16198bbf67c0231b45dfccec7882_569","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":112,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java","category_groups":["PII","Personal Data"],"source":{"start":112,"end":112,"column":{"start":13,"end":73}},"sink":{"start":112,"end":112,"column":{"start":13,"end":73},"content":""},"parent_line_number":112,"fingerprint":"fcf0ee279556660c120ad2006c0c66a5_0","old_fingerprint":"fcf0ee279556660c120ad2006c0c66a5_590","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":117,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00828.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00828.java","category_groups":["PII","Personal Data"],"source":{"start":117,"end":117,"column":{"start":17,"end":77}},"sink":{"start":117,"end":117,"column":{"start":17,"end":77},"content":""},"parent_line_number":117,"fingerprint":"886c4d5fc56cafeb449b5f1f32328493_0","old_fingerprint":"886c4d5fc56cafeb449b5f1f32328493_603","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":134,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00829.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00829.java","category_groups":["PII","Personal Data"],"source":{"start":134,"end":134,"column":{"start":17,"end":77}},"sink":{"start":134,"end":134,"column":{"start":17,"end":77},"content":""},"parent_line_number":134,"fingerprint":"3d296ad0126ed1e92db31f14f28d3971_0","old_fingerprint":"3d296ad0126ed1e92db31f14f28d3971_609","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":114,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00830.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00830.java","category_groups":["PII","Personal Data"],"source":{"start":114,"end":114,"column":{"start":17,"end":77}},"sink":{"start":114,"end":114,"column":{"start":17,"end":77},"content":""},"parent_line_number":114,"fingerprint":"01392d8d61374b9c0718ec751c9ad4da_0","old_fingerprint":"01392d8d61374b9c0718ec751c9ad4da_596","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":129,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00831.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00831.java","category_groups":["PII","Personal Data"],"source":{"start":129,"end":129,"column":{"start":17,"end":77}},"sink":{"start":129,"end":129,"column":{"start":17,"end":77},"content":""},"parent_line_number":129,"fingerprint":"f750f7b3bb3b1078116dd4bd644ab5da_0","old_fingerprint":"f750f7b3bb3b1078116dd4bd644ab5da_608","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00832.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00832.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"f7a444c01b905c3bdfef79bbab88c24e_0","old_fingerprint":"f7a444c01b905c3bdfef79bbab88c24e_553","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00834.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00834.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":9,"end":57}},"sink":{"start":80,"end":80,"column":{"start":9,"end":57},"content":""},"parent_line_number":80,"fingerprint":"238ae8d82682c2f2893f51ebca6a8fbc_0","old_fingerprint":"238ae8d82682c2f2893f51ebca6a8fbc_115","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00835.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00835.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":9,"end":57}},"sink":{"start":83,"end":83,"column":{"start":9,"end":57},"content":""},"parent_line_number":83,"fingerprint":"f3bdb41f392af2ca34efc13e1be0f60b_0","old_fingerprint":"f3bdb41f392af2ca34efc13e1be0f60b_139","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00836.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00836.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":9,"end":57}},"sink":{"start":74,"end":74,"column":{"start":9,"end":57},"content":""},"parent_line_number":74,"fingerprint":"70a543a2136f7b9ef70c4ace2a61567e_0","old_fingerprint":"70a543a2136f7b9ef70c4ace2a61567e_111","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00898.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00898.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":13,"end":73}},"sink":{"start":92,"end":92,"column":{"start":13,"end":73},"content":""},"parent_line_number":92,"fingerprint":"ee20e8e25e1a82ca4c0f42caaa7aaebe_0","old_fingerprint":"ee20e8e25e1a82ca4c0f42caaa7aaebe_338","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"6ecbf3a2fb361b61a1cf52e5af753429_0","old_fingerprint":"6ecbf3a2fb361b61a1cf52e5af753429_503","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"8fc54f09e232f7165ca8b3314ae6f1ef_0","old_fingerprint":"8fc54f09e232f7165ca8b3314ae6f1ef_482","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"b608901c06ed15e25596a040b49f491b_0","old_fingerprint":"b608901c06ed15e25596a040b49f491b_468","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"966b8f20d496679d2ec15a24469ecb19_0","old_fingerprint":"966b8f20d496679d2ec15a24469ecb19_238","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00911.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00911.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"b9c416a5c4fcc11f869edfc6b3942a83_0","old_fingerprint":"b9c416a5c4fcc11f869edfc6b3942a83_363","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00912.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00912.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":17,"end":77}},"sink":{"start":97,"end":97,"column":{"start":17,"end":77},"content":""},"parent_line_number":97,"fingerprint":"46ba9c92bc9015573ddfe1a13a35e6c3_0","old_fingerprint":"46ba9c92bc9015573ddfe1a13a35e6c3_417","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00913.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00913.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"b2fce42a29f255599503a8e23c4b9865_0","old_fingerprint":"b2fce42a29f255599503a8e23c4b9865_578","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00914.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00914.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"d660e530827763207748c2cb07c76b03_0","old_fingerprint":"d660e530827763207748c2cb07c76b03_319","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00915.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00915.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"a58a261e216508764c4c6fc46844bb90_0","old_fingerprint":"a58a261e216508764c4c6fc46844bb90_282","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00916.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00916.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"f5c26284a9483627c65d83a4d2ea7aee_0","old_fingerprint":"f5c26284a9483627c65d83a4d2ea7aee_314","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00917.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00917.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"964fa05ab9f9d2a93ac35cd71061ee37_0","old_fingerprint":"964fa05ab9f9d2a93ac35cd71061ee37_433","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00918.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00918.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":17,"end":77}},"sink":{"start":97,"end":97,"column":{"start":17,"end":77},"content":""},"parent_line_number":97,"fingerprint":"a9190de6c8ff3d10698cb5b868807b45_0","old_fingerprint":"a9190de6c8ff3d10698cb5b868807b45_413","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00919.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00919.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"e9b8e4ba8edbbfc3ac67e7502414f585_0","old_fingerprint":"e9b8e4ba8edbbfc3ac67e7502414f585_194","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00920.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00920.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"bf95629e0cb7766ea36c8a8696a7c892_0","old_fingerprint":"bf95629e0cb7766ea36c8a8696a7c892_200","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00921.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00921.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"3313c8abe126d295fd27c3385d47bca1_0","old_fingerprint":"3313c8abe126d295fd27c3385d47bca1_286","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00923.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00923.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":57}},"sink":{"start":50,"end":50,"column":{"start":9,"end":57},"content":""},"parent_line_number":50,"fingerprint":"61dfd480ce5cd37a002618d12b80ac2a_0","old_fingerprint":"61dfd480ce5cd37a002618d12b80ac2a_10","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"c05e1c5489eda39a2bf9002e1e4599b7_0","old_fingerprint":"c05e1c5489eda39a2bf9002e1e4599b7_490","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"36b1981e36dc9fb403332a0a4ba62457_0","old_fingerprint":"36b1981e36dc9fb403332a0a4ba62457_485","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"b5c72beced4b19495f8d17a8a82843c7_0","old_fingerprint":"b5c72beced4b19495f8d17a8a82843c7_484","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":13,"end":73}},"sink":{"start":101,"end":101,"column":{"start":13,"end":73},"content":""},"parent_line_number":101,"fingerprint":"db0e52e12c0b161ebd3cc4f7a7e22b50_0","old_fingerprint":"db0e52e12c0b161ebd3cc4f7a7e22b50_464","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":13,"end":73}},"sink":{"start":101,"end":101,"column":{"start":13,"end":73},"content":""},"parent_line_number":101,"fingerprint":"b8a7efc979ac039b35c6ecd8b0027192_0","old_fingerprint":"b8a7efc979ac039b35c6ecd8b0027192_463","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":13,"end":73}},"sink":{"start":101,"end":101,"column":{"start":13,"end":73},"content":""},"parent_line_number":101,"fingerprint":"7b586ac116d8cf5acec83be33df4ec94_0","old_fingerprint":"7b586ac116d8cf5acec83be33df4ec94_462","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"64a9ce8ba13d6814633308575e3b2286_0","old_fingerprint":"64a9ce8ba13d6814633308575e3b2286_477","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00984.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00984.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"f8d56c5a1160e277c791a9d09ff08740_0","old_fingerprint":"f8d56c5a1160e277c791a9d09ff08740_530","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00985.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00985.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"a8c0cdbf3f9f4b9c75e2655764b8efec_0","old_fingerprint":"a8c0cdbf3f9f4b9c75e2655764b8efec_532","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00986.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00986.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"85f06ed4c97ea5d886a559fb0b17ef24_0","old_fingerprint":"85f06ed4c97ea5d886a559fb0b17ef24_529","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00987.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00987.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":17,"end":77}},"sink":{"start":104,"end":104,"column":{"start":17,"end":77},"content":""},"parent_line_number":104,"fingerprint":"bd0981943303ade87542bc6733679d96_0","old_fingerprint":"bd0981943303ade87542bc6733679d96_509","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00988.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00988.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":17,"end":77}},"sink":{"start":104,"end":104,"column":{"start":17,"end":77},"content":""},"parent_line_number":104,"fingerprint":"63d12ffc465b259e54bc067fa441d8c1_0","old_fingerprint":"63d12ffc465b259e54bc067fa441d8c1_510","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00989.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00989.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":17,"end":77}},"sink":{"start":103,"end":103,"column":{"start":17,"end":77},"content":""},"parent_line_number":103,"fingerprint":"71b0289cf70de7065171d5e14cdb7226_0","old_fingerprint":"71b0289cf70de7065171d5e14cdb7226_499","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00990.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00990.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":17,"end":77}},"sink":{"start":103,"end":103,"column":{"start":17,"end":77},"content":""},"parent_line_number":103,"fingerprint":"a6f06b78c1d417dc943c6e73f584da8b_0","old_fingerprint":"a6f06b78c1d417dc943c6e73f584da8b_500","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":52}},"sink":{"start":68,"end":68,"column":{"start":9,"end":52},"content":""},"parent_line_number":68,"fingerprint":"09d28dca1764855e2903f750a2997b34_0","old_fingerprint":"09d28dca1764855e2903f750a2997b34_95","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":52}},"sink":{"start":68,"end":68,"column":{"start":9,"end":52},"content":""},"parent_line_number":68,"fingerprint":"32fba2c8cb34fb2ee92915bfda4ec81d_0","old_fingerprint":"32fba2c8cb34fb2ee92915bfda4ec81d_92","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":53}},"sink":{"start":68,"end":68,"column":{"start":9,"end":53},"content":""},"parent_line_number":68,"fingerprint":"475bba3e5aade089ebbbbe9ce483bbc8_0","old_fingerprint":"475bba3e5aade089ebbbbe9ce483bbc8_101","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":53}},"sink":{"start":68,"end":68,"column":{"start":9,"end":53},"content":""},"parent_line_number":68,"fingerprint":"05bd16b64f144bd3070d951dc0d9fd8d_0","old_fingerprint":"05bd16b64f144bd3070d951dc0d9fd8d_97","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":56}},"sink":{"start":68,"end":68,"column":{"start":9,"end":56},"content":""},"parent_line_number":68,"fingerprint":"069fd5592bd047b8a95e83d08afe701a_0","old_fingerprint":"069fd5592bd047b8a95e83d08afe701a_96","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01058.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01058.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"69fd9ab127c0ffd2ca760e3be0a8fb20_0","old_fingerprint":"69fd9ab127c0ffd2ca760e3be0a8fb20_275","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"d9c7718c598963f82e409c4d16104c92_0","old_fingerprint":"d9c7718c598963f82e409c4d16104c92_252","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"a7df25e02eee5cfaa677b2d3655db204_0","old_fingerprint":"a7df25e02eee5cfaa677b2d3655db204_251","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01069.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01069.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"0343f41c35dd2eb12c466fb2d804ee7f_0","old_fingerprint":"0343f41c35dd2eb12c466fb2d804ee7f_389","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01070.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01070.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"54860906c06f1cfc62920bf0e43501e3_0","old_fingerprint":"54860906c06f1cfc62920bf0e43501e3_373","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01071.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01071.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"76272e40ccf2d7fc43a08bfc3d974aa9_0","old_fingerprint":"76272e40ccf2d7fc43a08bfc3d974aa9_375","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01072.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01072.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"1cfc4947f93a05cf43bde875220e60e4_0","old_fingerprint":"1cfc4947f93a05cf43bde875220e60e4_329","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01073.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01073.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"c763750a442ef4481e7b8791aefc001a_0","old_fingerprint":"c763750a442ef4481e7b8791aefc001a_387","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01074.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01074.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"49e2fff478cf632236850dc5c0b2d986_0","old_fingerprint":"49e2fff478cf632236850dc5c0b2d986_293","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01075.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01075.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"0bee58a9c3a3036a7123a186239e1fd2_0","old_fingerprint":"0bee58a9c3a3036a7123a186239e1fd2_294","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01076.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01076.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"e9ab89438a22bdaa2739bafae57fa8c1_0","old_fingerprint":"e9ab89438a22bdaa2739bafae57fa8c1_298","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01077.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01077.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"723f25b7cadfe00456939167dad9780b_0","old_fingerprint":"723f25b7cadfe00456939167dad9780b_270","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01078.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01078.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"64dafdf5dc4d2d601c7313d13999ef9c_0","old_fingerprint":"64dafdf5dc4d2d601c7313d13999ef9c_269","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01079.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01079.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"fc59cad39e4307209a5ad15deb4ff986_0","old_fingerprint":"fc59cad39e4307209a5ad15deb4ff986_268","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01080.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01080.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":52}},"sink":{"start":54,"end":54,"column":{"start":9,"end":52},"content":""},"parent_line_number":54,"fingerprint":"8e75c51aeec69780296b01baf13716de_0","old_fingerprint":"8e75c51aeec69780296b01baf13716de_46","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01081.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01081.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":56}},"sink":{"start":54,"end":54,"column":{"start":9,"end":56},"content":""},"parent_line_number":54,"fingerprint":"fcfb7c50d0335751b557518a9bb63ce5_0","old_fingerprint":"fcfb7c50d0335751b557518a9bb63ce5_47","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01082.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01082.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":56}},"sink":{"start":54,"end":54,"column":{"start":9,"end":56},"content":""},"parent_line_number":54,"fingerprint":"f432992574228a8198f7701f3b50f779_0","old_fingerprint":"f432992574228a8198f7701f3b50f779_48","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"718a1ffa04d79d8735d2a6c13e374e32_0","old_fingerprint":"718a1ffa04d79d8735d2a6c13e374e32_439","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":13,"end":73}},"sink":{"start":98,"end":98,"column":{"start":13,"end":73},"content":""},"parent_line_number":98,"fingerprint":"e846fd47f71231d3616c5e82ab3ed7f5_0","old_fingerprint":"e846fd47f71231d3616c5e82ab3ed7f5_425","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"42fd9c52fc04d8dfdfc9635f1c676115_0","old_fingerprint":"42fd9c52fc04d8dfdfc9635f1c676115_419","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"a4aaa4693a1998b495c28172abfb18a0_0","old_fingerprint":"a4aaa4693a1998b495c28172abfb18a0_418","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"d98ff94786507b4573da47ff0fbb62e1_0","old_fingerprint":"d98ff94786507b4573da47ff0fbb62e1_416","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"10e003884a342c4969a68b080b03cc8b_0","old_fingerprint":"10e003884a342c4969a68b080b03cc8b_414","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"b1ae0d86d3e2e7037329580babc7f2fd_0","old_fingerprint":"b1ae0d86d3e2e7037329580babc7f2fd_412","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":13,"end":73}},"sink":{"start":98,"end":98,"column":{"start":13,"end":73},"content":""},"parent_line_number":98,"fingerprint":"428c7757c8729d6cbd4b9f4ad9b4c1f0_0","old_fingerprint":"428c7757c8729d6cbd4b9f4ad9b4c1f0_436","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01135.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01135.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"7b542829c3ccd212ecd68fe99751bbe3_0","old_fingerprint":"7b542829c3ccd212ecd68fe99751bbe3_514","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01136.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01136.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"c5dc080f1ee8b4da6f6e84c283014d15_0","old_fingerprint":"c5dc080f1ee8b4da6f6e84c283014d15_523","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01137.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01137.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":17,"end":77}},"sink":{"start":102,"end":102,"column":{"start":17,"end":77},"content":""},"parent_line_number":102,"fingerprint":"9d8baae2ead3ac2a6242937791242d77_0","old_fingerprint":"9d8baae2ead3ac2a6242937791242d77_481","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":100,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01138.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01138.java","category_groups":["PII","Personal Data"],"source":{"start":100,"end":100,"column":{"start":17,"end":77}},"sink":{"start":100,"end":100,"column":{"start":17,"end":77},"content":""},"parent_line_number":100,"fingerprint":"4dac6300e8180e5645358d7dcec1b08a_0","old_fingerprint":"4dac6300e8180e5645358d7dcec1b08a_457","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":100,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01139.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01139.java","category_groups":["PII","Personal Data"],"source":{"start":100,"end":100,"column":{"start":17,"end":77}},"sink":{"start":100,"end":100,"column":{"start":17,"end":77},"content":""},"parent_line_number":100,"fingerprint":"35673a39c7d4a228928f578da28d72fd_0","old_fingerprint":"35673a39c7d4a228928f578da28d72fd_456","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01140.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01140.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"13b1935012333740b45eec12020b6849_0","old_fingerprint":"13b1935012333740b45eec12020b6849_442","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01141.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01141.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"1de43773d8ef87a6589b7c1c4ce586d7_0","old_fingerprint":"1de43773d8ef87a6589b7c1c4ce586d7_453","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01142.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01142.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":53}},"sink":{"start":64,"end":64,"column":{"start":9,"end":53},"content":""},"parent_line_number":64,"fingerprint":"b17507e1286b49b606618fc74fec715c_0","old_fingerprint":"b17507e1286b49b606618fc74fec715c_86","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01143.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01143.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":53}},"sink":{"start":64,"end":64,"column":{"start":9,"end":53},"content":""},"parent_line_number":64,"fingerprint":"b8d26c1913d582616732147bd2705014_0","old_fingerprint":"b8d26c1913d582616732147bd2705014_82","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01144.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01144.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":57}},"sink":{"start":64,"end":64,"column":{"start":9,"end":57},"content":""},"parent_line_number":64,"fingerprint":"9d20f6fe90af316824408f94b38d5676_0","old_fingerprint":"9d20f6fe90af316824408f94b38d5676_83","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01145.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01145.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":57}},"sink":{"start":64,"end":64,"column":{"start":9,"end":57},"content":""},"parent_line_number":64,"fingerprint":"d644b04e4950fe942e26724c90e6467d_0","old_fingerprint":"d644b04e4950fe942e26724c90e6467d_84","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01146.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01146.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":57}},"sink":{"start":64,"end":64,"column":{"start":9,"end":57},"content":""},"parent_line_number":64,"fingerprint":"3ec9fc0ff377bf1a9a18b0b4370c1fda_0","old_fingerprint":"3ec9fc0ff377bf1a9a18b0b4370c1fda_85","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"ced8c61e1d1cc4a35aa15494d508c882_0","old_fingerprint":"ced8c61e1d1cc4a35aa15494d508c882_318","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"a1df6c9db8a45dd00abe6fbd28e46b78_0","old_fingerprint":"a1df6c9db8a45dd00abe6fbd28e46b78_302","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":13,"end":73}},"sink":{"start":90,"end":90,"column":{"start":13,"end":73},"content":""},"parent_line_number":90,"fingerprint":"af87cb7aa216807f8bf0bb21dfb6d5f4_0","old_fingerprint":"af87cb7aa216807f8bf0bb21dfb6d5f4_300","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"2abaf446fdbd8767867cdea7acc5849d_0","old_fingerprint":"2abaf446fdbd8767867cdea7acc5849d_262","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01195.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01195.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"74ae748445548abe147893b8e01fa756_0","old_fingerprint":"74ae748445548abe147893b8e01fa756_361","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01196.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01196.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"6509441fa184b9281bf6d0dd39c8a43e_0","old_fingerprint":"6509441fa184b9281bf6d0dd39c8a43e_356","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01197.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01197.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"6c137e5fefa5020aa8a18538a45cf569_0","old_fingerprint":"6c137e5fefa5020aa8a18538a45cf569_426","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01198.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01198.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"95db97638048153a6b2c0dd36b6b150f_0","old_fingerprint":"95db97638048153a6b2c0dd36b6b150f_366","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01199.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01199.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"d80ce9605a0c1545cef1370df8867b65_0","old_fingerprint":"d80ce9605a0c1545cef1370df8867b65_341","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01200.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01200.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"f9d3a98178f428dbdd6da3bf038264d2_0","old_fingerprint":"f9d3a98178f428dbdd6da3bf038264d2_336","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01201.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01201.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"9033a3716ed5a646658db80276ea5a3a_0","old_fingerprint":"9033a3716ed5a646658db80276ea5a3a_335","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01202.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01202.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"de3003edd717a8ef5139b933ebcdbca8_0","old_fingerprint":"de3003edd717a8ef5139b933ebcdbca8_334","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01203.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01203.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"bb472e5c71025ae5a9c800b0571480fb_0","old_fingerprint":"bb472e5c71025ae5a9c800b0571480fb_66","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01204.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01204.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"a07147ccb4eb5432326dc4e39a8da40f_0","old_fingerprint":"a07147ccb4eb5432326dc4e39a8da40f_65","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01205.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01205.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"e5906aed9b38fb0b273ed3a8cfa57f1a_0","old_fingerprint":"e5906aed9b38fb0b273ed3a8cfa57f1a_64","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01206.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01206.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":53}},"sink":{"start":56,"end":56,"column":{"start":9,"end":53},"content":""},"parent_line_number":56,"fingerprint":"506c81169f50e0352384d6f58f85d58d_0","old_fingerprint":"506c81169f50e0352384d6f58f85d58d_63","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01207.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01207.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":56}},"sink":{"start":56,"end":56,"column":{"start":9,"end":56},"content":""},"parent_line_number":56,"fingerprint":"fb77def6cf9bab3d0f8fc9645f22e0f1_0","old_fingerprint":"fb77def6cf9bab3d0f8fc9645f22e0f1_62","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"f9929d058d10d9bd790ad90b336fb2be_0","old_fingerprint":"f9929d058d10d9bd790ad90b336fb2be_135","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"203e62ab4b2ee8e683be65d90f2ca65e_0","old_fingerprint":"203e62ab4b2ee8e683be65d90f2ca65e_119","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"e08ae9e5f54cd0e8be87ea740d5dda15_0","old_fingerprint":"e08ae9e5f54cd0e8be87ea740d5dda15_116","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"88afd27e3f8620734603c3c243f441a0_0","old_fingerprint":"88afd27e3f8620734603c3c243f441a0_122","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"f8260af0bf2a731ab9f6cd321d9f4d56_0","old_fingerprint":"f8260af0bf2a731ab9f6cd321d9f4d56_123","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"95a423e1268b105dd491371deb5bc23d_0","old_fingerprint":"95a423e1268b105dd491371deb5bc23d_121","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"fe8baf8fee1bb7e5285b35c11caf097e_0","old_fingerprint":"fe8baf8fee1bb7e5285b35c11caf097e_126","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"78707d28f837eddff1242f0bb085e710_0","old_fingerprint":"78707d28f837eddff1242f0bb085e710_127","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"3b94d5fbc07739c828ad8579f7aad23e_0","old_fingerprint":"3b94d5fbc07739c828ad8579f7aad23e_132","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01291.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01291.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"276641db4547e513392bb200b47376ae_0","old_fingerprint":"276641db4547e513392bb200b47376ae_307","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01292.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01292.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"0bce56ec67b5d58019f385e9aa75edd3_0","old_fingerprint":"0bce56ec67b5d58019f385e9aa75edd3_291","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01293.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01293.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"1d3d2463ec64030880e363c221982100_0","old_fingerprint":"1d3d2463ec64030880e363c221982100_306","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01294.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01294.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"3e9c1d9d5ee91fe63e01bf62d06caa9c_0","old_fingerprint":"3e9c1d9d5ee91fe63e01bf62d06caa9c_174","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01295.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01295.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"9d0b8784be3702dc49d0a4275937797e_0","old_fingerprint":"9d0b8784be3702dc49d0a4275937797e_175","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01296.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01296.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"98c67956b019073cc9716f30649095eb_0","old_fingerprint":"98c67956b019073cc9716f30649095eb_177","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01297.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01297.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"56d3e3874a846d6cfb5b0d37940845e5_0","old_fingerprint":"56d3e3874a846d6cfb5b0d37940845e5_160","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01298.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01298.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"04f6d87a656a9a5ad4ee4c873a31d4d0_0","old_fingerprint":"04f6d87a656a9a5ad4ee4c873a31d4d0_159","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01299.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01299.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":53}},"sink":{"start":49,"end":49,"column":{"start":9,"end":53},"content":""},"parent_line_number":49,"fingerprint":"31e3c66a07efda877000000ec6148514_0","old_fingerprint":"31e3c66a07efda877000000ec6148514_1","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01300.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01300.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":53}},"sink":{"start":49,"end":49,"column":{"start":9,"end":53},"content":""},"parent_line_number":49,"fingerprint":"d36fa310eb45739d83ee427082938e84_0","old_fingerprint":"d36fa310eb45739d83ee427082938e84_4","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":13,"end":73}},"sink":{"start":87,"end":87,"column":{"start":13,"end":73},"content":""},"parent_line_number":87,"fingerprint":"ed887c52004d37d9a8ab84a3b99e0bee_0","old_fingerprint":"ed887c52004d37d9a8ab84a3b99e0bee_223","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":13,"end":73}},"sink":{"start":87,"end":87,"column":{"start":13,"end":73},"content":""},"parent_line_number":87,"fingerprint":"d3bd70b5591a4afea010e6c602012646_0","old_fingerprint":"d3bd70b5591a4afea010e6c602012646_222","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":13,"end":73}},"sink":{"start":87,"end":87,"column":{"start":13,"end":73},"content":""},"parent_line_number":87,"fingerprint":"fa26b35b76251a90c999528cf8ebb883_0","old_fingerprint":"fa26b35b76251a90c999528cf8ebb883_221","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"3ed49b75c31ecf8ea97a157dd3564d6c_0","old_fingerprint":"3ed49b75c31ecf8ea97a157dd3564d6c_203","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"b19d74353147ec990c9d3c82e3546bce_0","old_fingerprint":"b19d74353147ec990c9d3c82e3546bce_202","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01366.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01366.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"cc0d5eee24234f5a2f6ebc561d8f9ab8_0","old_fingerprint":"cc0d5eee24234f5a2f6ebc561d8f9ab8_380","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01367.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01367.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"814c95961aa20cc2a86b0c82dc33a22c_0","old_fingerprint":"814c95961aa20cc2a86b0c82dc33a22c_383","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01368.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01368.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":17,"end":77}},"sink":{"start":95,"end":95,"column":{"start":17,"end":77},"content":""},"parent_line_number":95,"fingerprint":"c1d367aa9a02f2ae61ad18748281624d_0","old_fingerprint":"c1d367aa9a02f2ae61ad18748281624d_378","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01369.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01369.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"2ed25741afb6476f354e06ff0318b726_0","old_fingerprint":"2ed25741afb6476f354e06ff0318b726_357","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01370.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01370.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"bd3515a387da37e73451d8a1015f2847_0","old_fingerprint":"bd3515a387da37e73451d8a1015f2847_301","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01371.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01371.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"9c7af3156bf18825d33bba7f58c13da4_0","old_fingerprint":"9c7af3156bf18825d33bba7f58c13da4_257","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01372.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01372.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"1f7a038ba9b2c66736419a8470bfb846_0","old_fingerprint":"1f7a038ba9b2c66736419a8470bfb846_250","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01373.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01373.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"8b1da77b624b7d7b3d23e2a7e486aef6_0","old_fingerprint":"8b1da77b624b7d7b3d23e2a7e486aef6_246","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01374.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01374.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":52}},"sink":{"start":53,"end":53,"column":{"start":9,"end":52},"content":""},"parent_line_number":53,"fingerprint":"8e5fad53359a9af1f4de81b3b7fa28d8_0","old_fingerprint":"8e5fad53359a9af1f4de81b3b7fa28d8_38","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01375.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01375.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":53}},"sink":{"start":53,"end":53,"column":{"start":9,"end":53},"content":""},"parent_line_number":53,"fingerprint":"226700eb56723272b80a8123a0f7cd77_0","old_fingerprint":"226700eb56723272b80a8123a0f7cd77_37","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01376.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01376.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":57}},"sink":{"start":53,"end":53,"column":{"start":9,"end":57},"content":""},"parent_line_number":53,"fingerprint":"55e2721a050be12a85be482ac9dd45ec_0","old_fingerprint":"55e2721a050be12a85be482ac9dd45ec_36","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01377.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01377.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":57}},"sink":{"start":53,"end":53,"column":{"start":9,"end":57},"content":""},"parent_line_number":53,"fingerprint":"b7adb38b3c715b303484703acbb52323_0","old_fingerprint":"b7adb38b3c715b303484703acbb52323_40","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"28eec4c833789dd9bc4726474734205f_0","old_fingerprint":"28eec4c833789dd9bc4726474734205f_398","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"c82c950f9217342cc738a41de99d7070_0","old_fingerprint":"c82c950f9217342cc738a41de99d7070_400","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"0661e74bc39dd1a52c2e36d7dc641231_0","old_fingerprint":"0661e74bc39dd1a52c2e36d7dc641231_401","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"d4d4028000e3ff489f5ea3ec446791bf_0","old_fingerprint":"d4d4028000e3ff489f5ea3ec446791bf_384","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":13,"end":73}},"sink":{"start":96,"end":96,"column":{"start":13,"end":73},"content":""},"parent_line_number":96,"fingerprint":"38a9fa573bc3486bcf3f0422575db778_0","old_fingerprint":"38a9fa573bc3486bcf3f0422575db778_385","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01447.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01447.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":17,"end":77}},"sink":{"start":104,"end":104,"column":{"start":17,"end":77},"content":""},"parent_line_number":104,"fingerprint":"1fb81fb322ca404efbf99e9b9c4e6a07_0","old_fingerprint":"1fb81fb322ca404efbf99e9b9c4e6a07_507","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01448.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01448.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":17,"end":77}},"sink":{"start":101,"end":101,"column":{"start":17,"end":77},"content":""},"parent_line_number":101,"fingerprint":"e02c3004712bbfc8b836427114fb30ec_0","old_fingerprint":"e02c3004712bbfc8b836427114fb30ec_460","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01449.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01449.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":17,"end":77}},"sink":{"start":101,"end":101,"column":{"start":17,"end":77},"content":""},"parent_line_number":101,"fingerprint":"2d8238a36eee6615b11f989b0c25c25e_0","old_fingerprint":"2d8238a36eee6615b11f989b0c25c25e_458","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01450.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01450.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"cfa46d8c652ca00881bfca49e8d64068_0","old_fingerprint":"cfa46d8c652ca00881bfca49e8d64068_516","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01451.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01451.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"d71b232682c53d3b6c0c1d779324ddcc_0","old_fingerprint":"d71b232682c53d3b6c0c1d779324ddcc_445","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01452.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01452.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"c23f9d3671c7f1ae2d0f37674e75a285_0","old_fingerprint":"c23f9d3671c7f1ae2d0f37674e75a285_440","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01453.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01453.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"d3e4813baf4ce0aae3ac18ec164bbdff_0","old_fingerprint":"d3e4813baf4ce0aae3ac18ec164bbdff_424","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01454.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01454.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":53}},"sink":{"start":63,"end":63,"column":{"start":9,"end":53},"content":""},"parent_line_number":63,"fingerprint":"2ac10d677e81ec4619b927ded5d14524_0","old_fingerprint":"2ac10d677e81ec4619b927ded5d14524_76","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01455.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01455.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":53}},"sink":{"start":63,"end":63,"column":{"start":9,"end":53},"content":""},"parent_line_number":63,"fingerprint":"64fce4b30946a28e58ff6daf0d4e91ce_0","old_fingerprint":"64fce4b30946a28e58ff6daf0d4e91ce_75","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01456.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01456.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":53}},"sink":{"start":63,"end":63,"column":{"start":9,"end":53},"content":""},"parent_line_number":63,"fingerprint":"b0d6cb3aba76cd4d36d941d51a67d42d_0","old_fingerprint":"b0d6cb3aba76cd4d36d941d51a67d42d_77","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01457.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01457.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":53}},"sink":{"start":63,"end":63,"column":{"start":9,"end":53},"content":""},"parent_line_number":63,"fingerprint":"ad2b9e5c825b9297ea67ad79b1ae177c_0","old_fingerprint":"ad2b9e5c825b9297ea67ad79b1ae177c_74","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01458.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01458.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":56}},"sink":{"start":63,"end":63,"column":{"start":9,"end":56},"content":""},"parent_line_number":63,"fingerprint":"63bcda2156caa694db5ed9c64b93799a_0","old_fingerprint":"63bcda2156caa694db5ed9c64b93799a_79","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"83a88b90f8df010f69d6289a0c1fa401_0","old_fingerprint":"83a88b90f8df010f69d6289a0c1fa401_199","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"c79f0481a209d4df0262a54634c5a4e1_0","old_fingerprint":"c79f0481a209d4df0262a54634c5a4e1_190","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"59ba32f5adc0a3b11596675ae9b958ba_0","old_fingerprint":"59ba32f5adc0a3b11596675ae9b958ba_188","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"925c6c62e1f05c18fe6b154067503569_0","old_fingerprint":"925c6c62e1f05c18fe6b154067503569_183","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01534.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01534.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"09f3c625ac346147058b102f7f5e347c_0","old_fingerprint":"09f3c625ac346147058b102f7f5e347c_342","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01535.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01535.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"b2a471372d0048a099ad0c5eaa0746ac_0","old_fingerprint":"b2a471372d0048a099ad0c5eaa0746ac_280","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01536.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01536.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"99cda149310b73fbdef4d10483f27687_0","old_fingerprint":"99cda149310b73fbdef4d10483f27687_263","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01537.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01537.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"ecac1ad4e35496387d0d0c54533cbe8b_0","old_fingerprint":"ecac1ad4e35496387d0d0c54533cbe8b_264","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01538.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01538.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"11fd06efaf710b8f147110c40b8f35ae_0","old_fingerprint":"11fd06efaf710b8f147110c40b8f35ae_354","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01539.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01539.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"706bc54aba4e48c7b53fcff7dc7392e0_0","old_fingerprint":"706bc54aba4e48c7b53fcff7dc7392e0_352","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01540.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01540.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"90822613ad46981a8e87a0b489f300a2_0","old_fingerprint":"90822613ad46981a8e87a0b489f300a2_350","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01541.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01541.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"9f26174a81d5ac6ea5f6eaa086b27bcd_0","old_fingerprint":"9f26174a81d5ac6ea5f6eaa086b27bcd_267","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01542.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01542.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"80cccb438a6fe31d31fe13d389b76e98_0","old_fingerprint":"80cccb438a6fe31d31fe13d389b76e98_227","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01543.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01543.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"355322564ef8f248cfebcc2ab57d268b_0","old_fingerprint":"355322564ef8f248cfebcc2ab57d268b_231","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01544.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01544.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"e2810f7af569bcfcb8e7a2e05da9f118_0","old_fingerprint":"e2810f7af569bcfcb8e7a2e05da9f118_219","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01545.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01545.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"1ff3ddfde30e10a84956615388c3ebb3_0","old_fingerprint":"1ff3ddfde30e10a84956615388c3ebb3_234","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01546.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01546.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":52}},"sink":{"start":51,"end":51,"column":{"start":9,"end":52},"content":""},"parent_line_number":51,"fingerprint":"d93081982690f12c439217026798693f_0","old_fingerprint":"d93081982690f12c439217026798693f_24","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01547.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01547.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"48585e367264540428c129bd537097e2_0","old_fingerprint":"48585e367264540428c129bd537097e2_31","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01548.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01548.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"709e23c5d5636f722777905054fda99f_0","old_fingerprint":"709e23c5d5636f722777905054fda99f_16","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01549.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01549.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":57}},"sink":{"start":51,"end":51,"column":{"start":9,"end":57},"content":""},"parent_line_number":51,"fingerprint":"c8ce64a1b38f7b81cd949c495c62eb3a_0","old_fingerprint":"c8ce64a1b38f7b81cd949c495c62eb3a_25","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01550.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01550.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":57}},"sink":{"start":51,"end":51,"column":{"start":9,"end":57},"content":""},"parent_line_number":51,"fingerprint":"1e15df46569b9e446fb13b6cf90b9006_0","old_fingerprint":"1e15df46569b9e446fb13b6cf90b9006_14","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01551.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01551.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":57}},"sink":{"start":51,"end":51,"column":{"start":9,"end":57},"content":""},"parent_line_number":51,"fingerprint":"614ab3d0f330663573d296f0f7c0e550_0","old_fingerprint":"614ab3d0f330663573d296f0f7c0e550_20","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"60df357e01dacac8099f02e0525b7e06_0","old_fingerprint":"60df357e01dacac8099f02e0525b7e06_218","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"597b1b178852fca3e91e3099101c3710_0","old_fingerprint":"597b1b178852fca3e91e3099101c3710_180","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"74817a67a72a55e91201e3f323a6ea98_0","old_fingerprint":"74817a67a72a55e91201e3f323a6ea98_169","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01611.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01611.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"56305d41b091aca1bb15118bf1d49e62_0","old_fingerprint":"56305d41b091aca1bb15118bf1d49e62_347","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01612.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01612.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"4940809c1ced59b61a112a604ea42817_0","old_fingerprint":"4940809c1ced59b61a112a604ea42817_235","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01613.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01613.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"46fe8ede36ae09d3c8016726ebbc0d47_0","old_fingerprint":"46fe8ede36ae09d3c8016726ebbc0d47_215","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01614.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01614.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"4ccb5065f20b4f1ab720a617afe20173_0","old_fingerprint":"4ccb5065f20b4f1ab720a617afe20173_214","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01615.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01615.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":52}},"sink":{"start":51,"end":51,"column":{"start":9,"end":52},"content":""},"parent_line_number":51,"fingerprint":"2e7036f122e92aac3c1009dafaec4c27_0","old_fingerprint":"2e7036f122e92aac3c1009dafaec4c27_23","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01616.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01616.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"44bf041d87ca5e5f2fa8282b15868124_0","old_fingerprint":"44bf041d87ca5e5f2fa8282b15868124_26","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01617.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01617.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":56}},"sink":{"start":51,"end":51,"column":{"start":9,"end":56},"content":""},"parent_line_number":51,"fingerprint":"48bf97f43ccf5b4d1b3d1582f4ada9f8_0","old_fingerprint":"48bf97f43ccf5b4d1b3d1582f4ada9f8_27","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01618.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01618.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":57}},"sink":{"start":51,"end":51,"column":{"start":9,"end":57},"content":""},"parent_line_number":51,"fingerprint":"8abb506a7315ff23db4787eac1c1063e_0","old_fingerprint":"8abb506a7315ff23db4787eac1c1063e_33","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01619.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01619.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":57}},"sink":{"start":51,"end":51,"column":{"start":9,"end":57},"content":""},"parent_line_number":51,"fingerprint":"ca5653590a483bbfc8e1770807124267_0","old_fingerprint":"ca5653590a483bbfc8e1770807124267_32","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":13,"end":73}},"sink":{"start":108,"end":108,"column":{"start":13,"end":73},"content":""},"parent_line_number":108,"fingerprint":"7ca0aea4213b4bf2a78a2153a9b5accb_0","old_fingerprint":"7ca0aea4213b4bf2a78a2153a9b5accb_551","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01675.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01675.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":13,"end":73}},"sink":{"start":108,"end":108,"column":{"start":13,"end":73},"content":""},"parent_line_number":108,"fingerprint":"6e80cd2237e4470781070301c73dfeb7_0","old_fingerprint":"6e80cd2237e4470781070301c73dfeb7_548","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"9089dd70b7cabfc550a3b76136fb0e1a_0","old_fingerprint":"9089dd70b7cabfc550a3b76136fb0e1a_541","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"ffc8be66b8ada115bc1cab0bb8c90df7_0","old_fingerprint":"ffc8be66b8ada115bc1cab0bb8c90df7_542","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"306379d745502922ffc7bc9977aba3ac_0","old_fingerprint":"306379d745502922ffc7bc9977aba3ac_543","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"d5e932a3e0bc21d985c639f8b0d93a33_0","old_fingerprint":"d5e932a3e0bc21d985c639f8b0d93a33_534","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":13,"end":73}},"sink":{"start":106,"end":106,"column":{"start":13,"end":73},"content":""},"parent_line_number":106,"fingerprint":"3a428a77c3c431ef0663d8637f3cd76b_0","old_fingerprint":"3a428a77c3c431ef0663d8637f3cd76b_527","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":13,"end":73}},"sink":{"start":106,"end":106,"column":{"start":13,"end":73},"content":""},"parent_line_number":106,"fingerprint":"bd9e51c877369bc2478f0eb74f69826f_0","old_fingerprint":"bd9e51c877369bc2478f0eb74f69826f_528","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":115,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01694.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01694.java","category_groups":["PII","Personal Data"],"source":{"start":115,"end":115,"column":{"start":17,"end":77}},"sink":{"start":115,"end":115,"column":{"start":17,"end":77},"content":""},"parent_line_number":115,"fingerprint":"54c2a1755cacc2d2a62eb5cdad4edebf_0","old_fingerprint":"54c2a1755cacc2d2a62eb5cdad4edebf_600","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":114,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01695.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01695.java","category_groups":["PII","Personal Data"],"source":{"start":114,"end":114,"column":{"start":17,"end":77}},"sink":{"start":114,"end":114,"column":{"start":17,"end":77},"content":""},"parent_line_number":114,"fingerprint":"127e9fd01e3a649942dd2c9a35b99dd5_0","old_fingerprint":"127e9fd01e3a649942dd2c9a35b99dd5_595","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01696.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01696.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"14b85bcbce5aec8943a7b947b253859f_0","old_fingerprint":"14b85bcbce5aec8943a7b947b253859f_581","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01697.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01697.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"d50e17123b7a8b5a6a42f9cf1c3e6517_0","old_fingerprint":"d50e17123b7a8b5a6a42f9cf1c3e6517_584","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01698.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01698.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"52a5906f49523472d0a5027d38db780f_0","old_fingerprint":"52a5906f49523472d0a5027d38db780f_585","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01699.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01699.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"19d0a80951ff6423803536a1fc20b17a_0","old_fingerprint":"19d0a80951ff6423803536a1fc20b17a_586","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01700.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01700.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"ce8297f860a3d86eb13b7b9f44d5c6f8_0","old_fingerprint":"ce8297f860a3d86eb13b7b9f44d5c6f8_588","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01701.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01701.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"97e79c6beb32486e749cce2f96dca335_0","old_fingerprint":"97e79c6beb32486e749cce2f96dca335_577","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01702.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01702.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"16a2b354e1cf29612619f14d1e52cc24_0","old_fingerprint":"16a2b354e1cf29612619f14d1e52cc24_589","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01703.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01703.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"9b42cc1fe654608114972cb58c554420_0","old_fingerprint":"9b42cc1fe654608114972cb58c554420_561","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01704.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01704.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"71e0c6e14c16af4bab647d4f865740d2_0","old_fingerprint":"71e0c6e14c16af4bab647d4f865740d2_557","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01705.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01705.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"eed457087bd4f54395abbbc101637663_0","old_fingerprint":"eed457087bd4f54395abbbc101637663_555","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01706.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01706.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"39b9d67edfb97f47c1e11fa6c7092594_0","old_fingerprint":"39b9d67edfb97f47c1e11fa6c7092594_550","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01707.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01707.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"f7a62c13883d2de5075799d5e2f801d6_0","old_fingerprint":"f7a62c13883d2de5075799d5e2f801d6_549","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01708.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01708.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":52}},"sink":{"start":73,"end":73,"column":{"start":9,"end":52},"content":""},"parent_line_number":73,"fingerprint":"70a525e7a5157083f60c35ae5b8f80aa_0","old_fingerprint":"70a525e7a5157083f60c35ae5b8f80aa_108","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01709.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01709.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":53}},"sink":{"start":73,"end":73,"column":{"start":9,"end":53},"content":""},"parent_line_number":73,"fingerprint":"2ea8dc09a294795d71352b97bd38e3c4_0","old_fingerprint":"2ea8dc09a294795d71352b97bd38e3c4_109","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01710.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01710.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":57}},"sink":{"start":73,"end":73,"column":{"start":9,"end":57},"content":""},"parent_line_number":73,"fingerprint":"bf35807d1a47ac164a067a992f2edb29_0","old_fingerprint":"bf35807d1a47ac164a067a992f2edb29_110","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01711.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01711.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":57}},"sink":{"start":73,"end":73,"column":{"start":9,"end":57},"content":""},"parent_line_number":73,"fingerprint":"a0e02e8dd895c84feb17c0220d67ef3f_0","old_fingerprint":"a0e02e8dd895c84feb17c0220d67ef3f_104","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"faa534838ef0cb59bcb06565c51ad0b3_0","old_fingerprint":"faa534838ef0cb59bcb06565c51ad0b3_147","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"0a0904d5aa5eb74ceed3bae5c94cceb2_0","old_fingerprint":"0a0904d5aa5eb74ceed3bae5c94cceb2_128","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"7f54adf3c6e41edc6a8987ed586621cd_0","old_fingerprint":"7f54adf3c6e41edc6a8987ed586621cd_136","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"86b3b69eeab5654e69b5f6b096364c94_0","old_fingerprint":"86b3b69eeab5654e69b5f6b096364c94_130","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"9896322b01e437656503b4cb0e7475a9_0","old_fingerprint":"9896322b01e437656503b4cb0e7475a9_134","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"32affb36fc0b672edc2acebe00c733ab_0","old_fingerprint":"32affb36fc0b672edc2acebe00c733ab_137","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"4ea94c17abf8d7414cd309347989151a_0","old_fingerprint":"4ea94c17abf8d7414cd309347989151a_138","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"510b475394c1350bfc4ee0adec2f3d27_0","old_fingerprint":"510b475394c1350bfc4ee0adec2f3d27_146","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01797.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01797.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"2b8b324c513a71ff3c6f4aae0939013c_0","old_fingerprint":"2b8b324c513a71ff3c6f4aae0939013c_256","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01798.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01798.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"c1ebd40af2c253fdc967d021d09d7bfc_0","old_fingerprint":"c1ebd40af2c253fdc967d021d09d7bfc_205","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01799.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01799.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"dc7203193589cb9de679a345ca9a3ab0_0","old_fingerprint":"dc7203193589cb9de679a345ca9a3ab0_207","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01800.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01800.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"98abea447e24fd2493bc9045aa57d56b_0","old_fingerprint":"98abea447e24fd2493bc9045aa57d56b_187","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01801.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01801.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"bec92e7c89d3334d7772ef1eac00c7a8_0","old_fingerprint":"bec92e7c89d3334d7772ef1eac00c7a8_186","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01802.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01802.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":52}},"sink":{"start":50,"end":50,"column":{"start":9,"end":52},"content":""},"parent_line_number":50,"fingerprint":"dfd4838efd3f334a5272ae00c61734d9_0","old_fingerprint":"dfd4838efd3f334a5272ae00c61734d9_6","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"96a6589801a6e0899d2b6d55c3bca8da_0","old_fingerprint":"96a6589801a6e0899d2b6d55c3bca8da_496","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"dab343d8dd41a4a83923a7fa9e75d8ff_0","old_fingerprint":"dab343d8dd41a4a83923a7fa9e75d8ff_493","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01853.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01853.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":13,"end":73}},"sink":{"start":103,"end":103,"column":{"start":13,"end":73},"content":""},"parent_line_number":103,"fingerprint":"600e66c1355948921a0bac34122c486a_0","old_fingerprint":"600e66c1355948921a0bac34122c486a_492","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"eef960c018bb3f73806cc21674352d38_0","old_fingerprint":"eef960c018bb3f73806cc21674352d38_476","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"9d0da30f19d383bfd2a39e4a148fba3d_0","old_fingerprint":"9d0da30f19d383bfd2a39e4a148fba3d_475","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"af9270ac7eec5a348a9521b810e805d7_0","old_fingerprint":"af9270ac7eec5a348a9521b810e805d7_474","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"3cc4bdf24bebacbbf499eb593ebe0732_0","old_fingerprint":"3cc4bdf24bebacbbf499eb593ebe0732_473","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"15f5447dcf107ddd1725f9a0b81fce28_0","old_fingerprint":"15f5447dcf107ddd1725f9a0b81fce28_472","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"d44c5a81f1b24d85dec113306351153f_0","old_fingerprint":"d44c5a81f1b24d85dec113306351153f_471","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":73}},"sink":{"start":102,"end":102,"column":{"start":13,"end":73},"content":""},"parent_line_number":102,"fingerprint":"de7341808e35e6aa16393b7667e4c263_0","old_fingerprint":"de7341808e35e6aa16393b7667e4c263_470","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01866.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01866.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"d902226dc331613b491930a93d313fe4_0","old_fingerprint":"d902226dc331613b491930a93d313fe4_522","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01867.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01867.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"9d78d6b3615ab39e9fcf0340bc2cbdeb_0","old_fingerprint":"9d78d6b3615ab39e9fcf0340bc2cbdeb_526","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01868.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01868.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"49a9a55bb7b4482e15fe787eff839558_0","old_fingerprint":"49a9a55bb7b4482e15fe787eff839558_572","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":110,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01869.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01869.java","category_groups":["PII","Personal Data"],"source":{"start":110,"end":110,"column":{"start":17,"end":77}},"sink":{"start":110,"end":110,"column":{"start":17,"end":77},"content":""},"parent_line_number":110,"fingerprint":"eccea9d66e9b05b6858a2b03142a67c7_0","old_fingerprint":"eccea9d66e9b05b6858a2b03142a67c7_576","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01870.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01870.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":17,"end":77}},"sink":{"start":103,"end":103,"column":{"start":17,"end":77},"content":""},"parent_line_number":103,"fingerprint":"c959a65bc49808aad246e6248f657d96_0","old_fingerprint":"c959a65bc49808aad246e6248f657d96_501","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":103,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01871.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01871.java","category_groups":["PII","Personal Data"],"source":{"start":103,"end":103,"column":{"start":17,"end":77}},"sink":{"start":103,"end":103,"column":{"start":17,"end":77},"content":""},"parent_line_number":103,"fingerprint":"0fe75fff0d1b381372ac6f291073fa08_0","old_fingerprint":"0fe75fff0d1b381372ac6f291073fa08_502","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":52}},"sink":{"start":68,"end":68,"column":{"start":9,"end":52},"content":""},"parent_line_number":68,"fingerprint":"a1db86aed13e88d01e6ed6f91717c52f_0","old_fingerprint":"a1db86aed13e88d01e6ed6f91717c52f_98","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":53}},"sink":{"start":68,"end":68,"column":{"start":9,"end":53},"content":""},"parent_line_number":68,"fingerprint":"4f4aa607e6f073e53727bb9e83aa482c_0","old_fingerprint":"4f4aa607e6f073e53727bb9e83aa482c_100","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":56}},"sink":{"start":68,"end":68,"column":{"start":9,"end":56},"content":""},"parent_line_number":68,"fingerprint":"da5af93a38de67d7c5a655ee4f61d26f_0","old_fingerprint":"da5af93a38de67d7c5a655ee4f61d26f_99","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":56}},"sink":{"start":68,"end":68,"column":{"start":9,"end":56},"content":""},"parent_line_number":68,"fingerprint":"5087514d9dd4f475c08f6236ed671cd2_0","old_fingerprint":"5087514d9dd4f475c08f6236ed671cd2_94","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":9,"end":57}},"sink":{"start":68,"end":68,"column":{"start":9,"end":57},"content":""},"parent_line_number":68,"fingerprint":"389200d13d6b1ebb1a96288d28227ec5_0","old_fingerprint":"389200d13d6b1ebb1a96288d28227ec5_93","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"b27e040d78dbaac39b6963db04842400_0","old_fingerprint":"b27e040d78dbaac39b6963db04842400_285","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"f0b88442531b9cf439bc6a2e2d2335f4_0","old_fingerprint":"f0b88442531b9cf439bc6a2e2d2335f4_254","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"4625ee5ec2c2bbaaaaaf0ec855781418_0","old_fingerprint":"4625ee5ec2c2bbaaaaaf0ec855781418_242","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":13,"end":73}},"sink":{"start":87,"end":87,"column":{"start":13,"end":73},"content":""},"parent_line_number":87,"fingerprint":"edb9e7433efee2877906589acef278cb_0","old_fingerprint":"edb9e7433efee2877906589acef278cb_232","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"81e30ff89c66415452de2af23623348f_0","old_fingerprint":"81e30ff89c66415452de2af23623348f_243","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"bb23aefeac7c588073f6deb948d6ca13_0","old_fingerprint":"bb23aefeac7c588073f6deb948d6ca13_239","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01945.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01945.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"05093f26cc9ba6ea2ab8e20436041a8c_0","old_fingerprint":"05093f26cc9ba6ea2ab8e20436041a8c_396","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01946.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01946.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"4e2a587a9fca839bec5135e01a0bb8a1_0","old_fingerprint":"4e2a587a9fca839bec5135e01a0bb8a1_394","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01947.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01947.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"11e9e652964db7a79149acb676f2ea6e_0","old_fingerprint":"11e9e652964db7a79149acb676f2ea6e_393","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":96,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01948.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01948.java","category_groups":["PII","Personal Data"],"source":{"start":96,"end":96,"column":{"start":17,"end":77}},"sink":{"start":96,"end":96,"column":{"start":17,"end":77},"content":""},"parent_line_number":96,"fingerprint":"ca9824e0e8a0a1e77b89982f56b15b42_0","old_fingerprint":"ca9824e0e8a0a1e77b89982f56b15b42_392","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01949.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01949.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"c4581beab79d62e2e7e65de0981d767f_0","old_fingerprint":"c4581beab79d62e2e7e65de0981d767f_323","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01950.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01950.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"82e12030e197a6db91e07c30eedc7333_0","old_fingerprint":"82e12030e197a6db91e07c30eedc7333_288","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01951.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01951.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"34b503f153c354ff69f5b8e945745516_0","old_fingerprint":"34b503f153c354ff69f5b8e945745516_289","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01952.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01952.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"c8bea33c912987de252835c50fe98de1_0","old_fingerprint":"c8bea33c912987de252835c50fe98de1_290","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01953.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01953.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"ae6db31598fec32e15cedc845e33dae9_0","old_fingerprint":"ae6db31598fec32e15cedc845e33dae9_272","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01954.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01954.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"ae229c43a5e85fb758b5597f38b13b5a_0","old_fingerprint":"ae229c43a5e85fb758b5597f38b13b5a_283","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01955.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01955.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":52}},"sink":{"start":54,"end":54,"column":{"start":9,"end":52},"content":""},"parent_line_number":54,"fingerprint":"5e5dcfc9134d29834d1ec21741f379d7_0","old_fingerprint":"5e5dcfc9134d29834d1ec21741f379d7_44","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01956.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01956.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":52}},"sink":{"start":54,"end":54,"column":{"start":9,"end":52},"content":""},"parent_line_number":54,"fingerprint":"4f54660bfef884616b5c2578f482e0f1_0","old_fingerprint":"4f54660bfef884616b5c2578f482e0f1_43","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01957.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01957.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":52}},"sink":{"start":54,"end":54,"column":{"start":9,"end":52},"content":""},"parent_line_number":54,"fingerprint":"bc71d754007586b95df456cc47028ba5_0","old_fingerprint":"bc71d754007586b95df456cc47028ba5_50","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01958.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01958.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":53}},"sink":{"start":54,"end":54,"column":{"start":9,"end":53},"content":""},"parent_line_number":54,"fingerprint":"992e1fec63f676e27286107f7fed92df_0","old_fingerprint":"992e1fec63f676e27286107f7fed92df_51","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01959.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01959.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":57}},"sink":{"start":54,"end":54,"column":{"start":9,"end":57},"content":""},"parent_line_number":54,"fingerprint":"7708ddceb4ed1a1ac0f9e76c6e288e83_0","old_fingerprint":"7708ddceb4ed1a1ac0f9e76c6e288e83_52","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":54,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01960.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01960.java","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":9,"end":57}},"sink":{"start":54,"end":54,"column":{"start":9,"end":57},"content":""},"parent_line_number":54,"fingerprint":"76bdc775a308969d8f00b55919d5167e_0","old_fingerprint":"76bdc775a308969d8f00b55919d5167e_53","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"6eccd714f456fe80e66c35d4231540a6_0","old_fingerprint":"6eccd714f456fe80e66c35d4231540a6_446","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01999.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01999.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"ebd0fec2b27df8842f8808d30aaa5add_0","old_fingerprint":"ebd0fec2b27df8842f8808d30aaa5add_447","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02000.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02000.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":13,"end":73}},"sink":{"start":99,"end":99,"column":{"start":13,"end":73},"content":""},"parent_line_number":99,"fingerprint":"205e9e921b7a86ff9129c456ede84bba_0","old_fingerprint":"205e9e921b7a86ff9129c456ede84bba_448","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":13,"end":73}},"sink":{"start":98,"end":98,"column":{"start":13,"end":73},"content":""},"parent_line_number":98,"fingerprint":"32aecf4efba4aafdbb32d7f78474b471_0","old_fingerprint":"32aecf4efba4aafdbb32d7f78474b471_429","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"4068c6812b30b268d81c783c415393db_0","old_fingerprint":"4068c6812b30b268d81c783c415393db_406","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"245ead1c991351fdbb88ee1de46282dc_0","old_fingerprint":"245ead1c991351fdbb88ee1de46282dc_422","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":13,"end":73}},"sink":{"start":98,"end":98,"column":{"start":13,"end":73},"content":""},"parent_line_number":98,"fingerprint":"aa86a7de2142c32e6f112248c79b6bff_0","old_fingerprint":"aa86a7de2142c32e6f112248c79b6bff_427","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02007.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02007.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"e7a22debababa249ed13f611a15d9ada_0","old_fingerprint":"e7a22debababa249ed13f611a15d9ada_519","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02008.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02008.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"34c102ac41bbec3ea94bc7415d4436e9_0","old_fingerprint":"34c102ac41bbec3ea94bc7415d4436e9_512","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":105,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02009.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02009.java","category_groups":["PII","Personal Data"],"source":{"start":105,"end":105,"column":{"start":17,"end":77}},"sink":{"start":105,"end":105,"column":{"start":17,"end":77},"content":""},"parent_line_number":105,"fingerprint":"7b9f386b9b1850b82079620083116477_0","old_fingerprint":"7b9f386b9b1850b82079620083116477_513","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02010.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02010.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":17,"end":77}},"sink":{"start":102,"end":102,"column":{"start":17,"end":77},"content":""},"parent_line_number":102,"fingerprint":"a0a1c7e22ee231c03e96a8de0247d3a9_0","old_fingerprint":"a0a1c7e22ee231c03e96a8de0247d3a9_483","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02011.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02011.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":17,"end":77}},"sink":{"start":102,"end":102,"column":{"start":17,"end":77},"content":""},"parent_line_number":102,"fingerprint":"546fd28e1b1e3f09b0f8eaabaeebc5b1_0","old_fingerprint":"546fd28e1b1e3f09b0f8eaabaeebc5b1_480","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":106,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02012.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02012.java","category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":17,"end":77}},"sink":{"start":106,"end":106,"column":{"start":17,"end":77},"content":""},"parent_line_number":106,"fingerprint":"ddc32bd23d12dcab8964ff020ee7f069_0","old_fingerprint":"ddc32bd23d12dcab8964ff020ee7f069_521","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02013.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02013.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":17,"end":77}},"sink":{"start":102,"end":102,"column":{"start":17,"end":77},"content":""},"parent_line_number":102,"fingerprint":"43795c45c3ad82992b23b6b412f01015_0","old_fingerprint":"43795c45c3ad82992b23b6b412f01015_469","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":99,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02014.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02014.java","category_groups":["PII","Personal Data"],"source":{"start":99,"end":99,"column":{"start":17,"end":77}},"sink":{"start":99,"end":99,"column":{"start":17,"end":77},"content":""},"parent_line_number":99,"fingerprint":"27a05cad579682f927d5ddcf0400de73_0","old_fingerprint":"27a05cad579682f927d5ddcf0400de73_441","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02015.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02015.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":52}},"sink":{"start":64,"end":64,"column":{"start":9,"end":52},"content":""},"parent_line_number":64,"fingerprint":"b7773bb8289b234b301f7844466920c6_0","old_fingerprint":"b7773bb8289b234b301f7844466920c6_80","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02016.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02016.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":9,"end":53}},"sink":{"start":64,"end":64,"column":{"start":9,"end":53},"content":""},"parent_line_number":64,"fingerprint":"5a3f62c7814cbc7122e5580a44c59576_0","old_fingerprint":"5a3f62c7814cbc7122e5580a44c59576_81","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"26809d9cbaf7874008a482f79bfe4798_0","old_fingerprint":"26809d9cbaf7874008a482f79bfe4798_315","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"cc4445b28d72bd1d177ff3f486b23616_0","old_fingerprint":"cc4445b28d72bd1d177ff3f486b23616_316","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":73}},"sink":{"start":91,"end":91,"column":{"start":13,"end":73},"content":""},"parent_line_number":91,"fingerprint":"06d7da1bd960c3a960ff0486636e93ce_0","old_fingerprint":"06d7da1bd960c3a960ff0486636e93ce_317","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":13,"end":73}},"sink":{"start":90,"end":90,"column":{"start":13,"end":73},"content":""},"parent_line_number":90,"fingerprint":"473316124a193b4dcf51da252c75f00a_0","old_fingerprint":"473316124a193b4dcf51da252c75f00a_297","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"9502f6802f3a87b43e55484abc4527d2_0","old_fingerprint":"9502f6802f3a87b43e55484abc4527d2_271","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":13,"end":73}},"sink":{"start":89,"end":89,"column":{"start":13,"end":73},"content":""},"parent_line_number":89,"fingerprint":"261baae97f07f3a86af01387da7d6604_0","old_fingerprint":"261baae97f07f3a86af01387da7d6604_276","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":13,"end":73}},"sink":{"start":90,"end":90,"column":{"start":13,"end":73},"content":""},"parent_line_number":90,"fingerprint":"f091a9484bfa9d8aa8cf27d0117cfa2b_0","old_fingerprint":"f091a9484bfa9d8aa8cf27d0117cfa2b_296","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02071.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02071.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"109eaa898de892a430ce87f78ae06769_0","old_fingerprint":"109eaa898de892a430ce87f78ae06769_435","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02072.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02072.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"7c25ccfab6f208adf88a65179ff5dc2c_0","old_fingerprint":"7c25ccfab6f208adf88a65179ff5dc2c_437","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02073.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02073.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":17,"end":77}},"sink":{"start":97,"end":97,"column":{"start":17,"end":77},"content":""},"parent_line_number":97,"fingerprint":"ad8f912cc6281d4684016df72020a694_0","old_fingerprint":"ad8f912cc6281d4684016df72020a694_410","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02074.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02074.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"e1cf94db9b9a0876a17ff7a11b80c6b6_0","old_fingerprint":"e1cf94db9b9a0876a17ff7a11b80c6b6_367","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02075.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02075.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"ba2e6a34fe6a50f11a430231fc6ae4b9_0","old_fingerprint":"ba2e6a34fe6a50f11a430231fc6ae4b9_368","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02076.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02076.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"24464d8d5ad331b3c8ce9217a340c484_0","old_fingerprint":"24464d8d5ad331b3c8ce9217a340c484_369","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02077.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02077.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"4488601e0b7ad3de817dcdcaf5dc963d_0","old_fingerprint":"4488601e0b7ad3de817dcdcaf5dc963d_423","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02078.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02078.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"fe5a0406d34ef3fd042b98a34440b6ce_0","old_fingerprint":"fe5a0406d34ef3fd042b98a34440b6ce_370","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02079.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02079.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"1ebdc89db714cb4389745713ea00b17e_0","old_fingerprint":"1ebdc89db714cb4389745713ea00b17e_326","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02080.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02080.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"e06187930253a35ad4c340e9b4d9084e_0","old_fingerprint":"e06187930253a35ad4c340e9b4d9084e_325","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02081.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02081.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"9f59004dc5f384669fe99a0649aa2f74_0","old_fingerprint":"9f59004dc5f384669fe99a0649aa2f74_322","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02082.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02082.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"192319900a3cf96409da63c1e5d3304b_0","old_fingerprint":"192319900a3cf96409da63c1e5d3304b_321","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02083.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02083.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"45a358645bf838b294cedb17ebe89a23_0","old_fingerprint":"45a358645bf838b294cedb17ebe89a23_320","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02084.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02084.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":57}},"sink":{"start":56,"end":56,"column":{"start":9,"end":57},"content":""},"parent_line_number":56,"fingerprint":"f9ba6ca3a03f1ce045d2450647af4ad7_0","old_fingerprint":"f9ba6ca3a03f1ce045d2450647af4ad7_57","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02085.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02085.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":57}},"sink":{"start":56,"end":56,"column":{"start":9,"end":57},"content":""},"parent_line_number":56,"fingerprint":"e47e256593d67b0d8388140dbbd53f91_0","old_fingerprint":"e47e256593d67b0d8388140dbbd53f91_58","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":56,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02086.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02086.java","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":9,"end":57}},"sink":{"start":56,"end":56,"column":{"start":9,"end":57},"content":""},"parent_line_number":56,"fingerprint":"acc07273381bb2772d1d68fd28c9b901_0","old_fingerprint":"acc07273381bb2772d1d68fd28c9b901_59","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"9a3679f56b9e86aaff25631568daacde_0","old_fingerprint":"9a3679f56b9e86aaff25631568daacde_148","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02138.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02138.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"7e070cad5a18b9ed90e128bde7df4c3f_0","old_fingerprint":"7e070cad5a18b9ed90e128bde7df4c3f_149","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"3ad4d4e6a25a8e69aca43fc58b6e7747_0","old_fingerprint":"3ad4d4e6a25a8e69aca43fc58b6e7747_131","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":73}},"sink":{"start":82,"end":82,"column":{"start":13,"end":73},"content":""},"parent_line_number":82,"fingerprint":"de785eeab7b7585198607a559d347156_0","old_fingerprint":"de785eeab7b7585198607a559d347156_120","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"f7a58a867f86284cdd25be05ddfab60f_0","old_fingerprint":"f7a58a867f86284cdd25be05ddfab60f_129","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02157.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02157.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":17,"end":77}},"sink":{"start":90,"end":90,"column":{"start":17,"end":77},"content":""},"parent_line_number":90,"fingerprint":"ca27ea818fda30147f79b3a8d4622488_0","old_fingerprint":"ca27ea818fda30147f79b3a8d4622488_295","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02158.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02158.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"aba9f82b4e7445e35dcd9620350f2500_0","old_fingerprint":"aba9f82b4e7445e35dcd9620350f2500_224","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02159.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02159.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"2f4376067322f98e2534f8c88a37689c_0","old_fingerprint":"2f4376067322f98e2534f8c88a37689c_225","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02160.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02160.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"024b26de565d7b8a6e8aee88cad95210_0","old_fingerprint":"024b26de565d7b8a6e8aee88cad95210_226","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02161.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02161.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"f6c79cff34b007fc9b6efa19e48684bd_0","old_fingerprint":"f6c79cff34b007fc9b6efa19e48684bd_155","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02162.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02162.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"7bbd611033b95e3ecd43620125c4c25e_0","old_fingerprint":"7bbd611033b95e3ecd43620125c4c25e_156","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02163.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02163.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"3c77b7d6a325a5d3e090c21cf227d229_0","old_fingerprint":"3c77b7d6a325a5d3e090c21cf227d229_141","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02164.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02164.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":17,"end":77}},"sink":{"start":84,"end":84,"column":{"start":17,"end":77},"content":""},"parent_line_number":84,"fingerprint":"486ec585c737455b3554b69a0fd2e5a4_0","old_fingerprint":"486ec585c737455b3554b69a0fd2e5a4_166","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02165.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02165.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":52}},"sink":{"start":49,"end":49,"column":{"start":9,"end":52},"content":""},"parent_line_number":49,"fingerprint":"b79a8de878fa0a474492bd8035d7c63d_0","old_fingerprint":"b79a8de878fa0a474492bd8035d7c63d_0","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02166.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02166.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":53}},"sink":{"start":49,"end":49,"column":{"start":9,"end":53},"content":""},"parent_line_number":49,"fingerprint":"00b19c00cc664d1a99a6b5d5b9c656e4_0","old_fingerprint":"00b19c00cc664d1a99a6b5d5b9c656e4_5","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02167.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02167.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":57}},"sink":{"start":49,"end":49,"column":{"start":9,"end":57},"content":""},"parent_line_number":49,"fingerprint":"f9a62ea95bd205a9edca4597ddf7f7bd_0","old_fingerprint":"f9a62ea95bd205a9edca4597ddf7f7bd_3","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":49,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02168.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02168.java","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":9,"end":57}},"sink":{"start":49,"end":49,"column":{"start":9,"end":57},"content":""},"parent_line_number":49,"fingerprint":"d108a4cf8b142974d04aba9ee32c10d8_0","old_fingerprint":"d108a4cf8b142974d04aba9ee32c10d8_2","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":73}},"sink":{"start":88,"end":88,"column":{"start":13,"end":73},"content":""},"parent_line_number":88,"fingerprint":"13e6e0cab8c8cae256672bc0b53c980a_0","old_fingerprint":"13e6e0cab8c8cae256672bc0b53c980a_253","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"09c69215a31230009a1cba775bf9627d_0","old_fingerprint":"09c69215a31230009a1cba775bf9627d_217","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"07d3f7c41541f720c8480bee1bda75bf_0","old_fingerprint":"07d3f7c41541f720c8480bee1bda75bf_213","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":94,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02254.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02254.java","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":17,"end":77}},"sink":{"start":94,"end":94,"column":{"start":17,"end":77},"content":""},"parent_line_number":94,"fingerprint":"6a1a4ec81628b8c26841008c6cda9ec8_0","old_fingerprint":"6a1a4ec81628b8c26841008c6cda9ec8_360","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02255.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02255.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"86dfaef1231f2ec7f9d54672c6610c95_0","old_fingerprint":"86dfaef1231f2ec7f9d54672c6610c95_310","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02256.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02256.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"04837447be553488879668acbda6b874_0","old_fingerprint":"04837447be553488879668acbda6b874_309","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02257.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02257.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"2e5d94f73d4c8dd5ed3a38bcf3291962_0","old_fingerprint":"2e5d94f73d4c8dd5ed3a38bcf3291962_308","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02258.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02258.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"e6b8f449130868f46d159e491975a64b_0","old_fingerprint":"e6b8f449130868f46d159e491975a64b_305","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02259.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02259.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":17,"end":77}},"sink":{"start":91,"end":91,"column":{"start":17,"end":77},"content":""},"parent_line_number":91,"fingerprint":"e1fcdbc9527dbccea434ef1bae919cf7_0","old_fingerprint":"e1fcdbc9527dbccea434ef1bae919cf7_304","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02260.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02260.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"8df1cf0436e954b8a955bea0cd78ea7d_0","old_fingerprint":"8df1cf0436e954b8a955bea0cd78ea7d_248","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02261.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02261.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":52}},"sink":{"start":53,"end":53,"column":{"start":9,"end":52},"content":""},"parent_line_number":53,"fingerprint":"67a607a2736c39906964aad9ac2ba0ac_0","old_fingerprint":"67a607a2736c39906964aad9ac2ba0ac_42","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02262.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02262.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":53}},"sink":{"start":53,"end":53,"column":{"start":9,"end":53},"content":""},"parent_line_number":53,"fingerprint":"9dd0d303e563451efd2d01265e08f0c8_0","old_fingerprint":"9dd0d303e563451efd2d01265e08f0c8_41","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":53,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02263.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02263.java","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":9,"end":56}},"sink":{"start":53,"end":53,"column":{"start":9,"end":56},"content":""},"parent_line_number":53,"fingerprint":"3df971bc81074dfe77dc892b3970dc28_0","old_fingerprint":"3df971bc81074dfe77dc892b3970dc28_39","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"b3dceeb2384efbb6efa0b1de4e85c171_0","old_fingerprint":"b3dceeb2384efbb6efa0b1de4e85c171_421","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":73}},"sink":{"start":97,"end":97,"column":{"start":13,"end":73},"content":""},"parent_line_number":97,"fingerprint":"ca63bcb8570980053cc054a068df7c20_0","old_fingerprint":"ca63bcb8570980053cc054a068df7c20_408","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02345.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02345.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":17,"end":77}},"sink":{"start":104,"end":104,"column":{"start":17,"end":77},"content":""},"parent_line_number":104,"fingerprint":"91aa84a8c86e48493183ce91145ebc1b_0","old_fingerprint":"91aa84a8c86e48493183ce91145ebc1b_506","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":104,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02346.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02346.java","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":17,"end":77}},"sink":{"start":104,"end":104,"column":{"start":17,"end":77},"content":""},"parent_line_number":104,"fingerprint":"3688c00af8265e705a245c51eede0c76_0","old_fingerprint":"3688c00af8265e705a245c51eede0c76_508","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":101,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02347.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02347.java","category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":17,"end":77}},"sink":{"start":101,"end":101,"column":{"start":17,"end":77},"content":""},"parent_line_number":101,"fingerprint":"4d2557bb9a0337794d998c165b3b8f31_0","old_fingerprint":"4d2557bb9a0337794d998c165b3b8f31_459","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02348.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02348.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"ad6de0eff915ec926bb41c64299a2edf_0","old_fingerprint":"ad6de0eff915ec926bb41c64299a2edf_438","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02349.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02349.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"0889c13e5381441f68abc957412a5136_0","old_fingerprint":"0889c13e5381441f68abc957412a5136_434","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02350.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02350.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"383cb376ef612d435fb3ada4b8715926_0","old_fingerprint":"383cb376ef612d435fb3ada4b8715926_432","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02351.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02351.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":17,"end":77}},"sink":{"start":98,"end":98,"column":{"start":17,"end":77},"content":""},"parent_line_number":98,"fingerprint":"257f40424d4fa324cd9270b1db5b640a_0","old_fingerprint":"257f40424d4fa324cd9270b1db5b640a_431","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":63,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02352.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02352.java","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":9,"end":56}},"sink":{"start":63,"end":63,"column":{"start":9,"end":56},"content":""},"parent_line_number":63,"fingerprint":"af4344b21184e8c557a4e87c823f6651_0","old_fingerprint":"af4344b21184e8c557a4e87c823f6651_78","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02415.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02415.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"32d1b9dc8d06925e3f4c256f23b32564_0","old_fingerprint":"32d1b9dc8d06925e3f4c256f23b32564_198","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"c99462fdc3a5784afa0fd38c87b00f54_0","old_fingerprint":"c99462fdc3a5784afa0fd38c87b00f54_181","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"e6f2320a9a7edf36b99d7c4bc7d166d0_0","old_fingerprint":"e6f2320a9a7edf36b99d7c4bc7d166d0_193","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"0f7c0246c75dcdd79577266536f627ae_0","old_fingerprint":"0f7c0246c75dcdd79577266536f627ae_191","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"2de2ad1ab1a1a69385bba1778d9ec6fe_0","old_fingerprint":"2de2ad1ab1a1a69385bba1778d9ec6fe_185","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"e9df976ad54931780d91ea690cc0eb1a_0","old_fingerprint":"e9df976ad54931780d91ea690cc0eb1a_140","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"930842554a5b5e4a6b551636e92758fb_0","old_fingerprint":"930842554a5b5e4a6b551636e92758fb_153","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"2c9c2a5f8be3c41d083e7bad13d71713_0","old_fingerprint":"2c9c2a5f8be3c41d083e7bad13d71713_154","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"adaff9ea0cd4d9011b8bf2b9082d8158_0","old_fingerprint":"adaff9ea0cd4d9011b8bf2b9082d8158_157","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"dc9d41ba9db6e68c317a5875451db273_0","old_fingerprint":"dc9d41ba9db6e68c317a5875451db273_158","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"71d2229e72adf7e2e711d030418428bd_0","old_fingerprint":"71d2229e72adf7e2e711d030418428bd_161","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"cc69b36ca74c861d43da9a543882a4f6_0","old_fingerprint":"cc69b36ca74c861d43da9a543882a4f6_176","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02434.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02434.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"2b08308a7ddbf9c9b05caa9642473c6f_0","old_fingerprint":"2b08308a7ddbf9c9b05caa9642473c6f_328","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02435.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02435.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":17,"end":77}},"sink":{"start":92,"end":92,"column":{"start":17,"end":77},"content":""},"parent_line_number":92,"fingerprint":"0028fe00a4f66300b9771d63fac5ffaa_0","old_fingerprint":"0028fe00a4f66300b9771d63fac5ffaa_332","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02436.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02436.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"2014be26494075a27175f36a4962efcf_0","old_fingerprint":"2014be26494075a27175f36a4962efcf_278","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02437.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02437.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"f2442d11b6b5c1871823d46a835edb19_0","old_fingerprint":"f2442d11b6b5c1871823d46a835edb19_277","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02438.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02438.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"b3776078ef53b186c960f5edd38eb534_0","old_fingerprint":"b3776078ef53b186c960f5edd38eb534_259","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02439.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02439.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":17,"end":77}},"sink":{"start":93,"end":93,"column":{"start":17,"end":77},"content":""},"parent_line_number":93,"fingerprint":"683792b2247510afa95f3909e6f533ad_0","old_fingerprint":"683792b2247510afa95f3909e6f533ad_346","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02440.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02440.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"0223ea728197927b2d938d8b0207a5b5_0","old_fingerprint":"0223ea728197927b2d938d8b0207a5b5_228","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02441.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02441.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"bef54569c8a2b305434847831f7c73c9_0","old_fingerprint":"bef54569c8a2b305434847831f7c73c9_229","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02442.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02442.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"e0845656e83dd93e02a5501dbe8fdf4a_0","old_fingerprint":"e0845656e83dd93e02a5501dbe8fdf4a_236","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02443.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02443.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"6ce02d935900de8e0c978a7806040cc1_0","old_fingerprint":"6ce02d935900de8e0c978a7806040cc1_237","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02444.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02444.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"1f2073f01c214ba6c93f7032efccab2b_0","old_fingerprint":"1f2073f01c214ba6c93f7032efccab2b_212","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02445.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02445.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"ced64a2e7df2b1f1f460db3df32d6cbe_0","old_fingerprint":"ced64a2e7df2b1f1f460db3df32d6cbe_211","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02446.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02446.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":52}},"sink":{"start":51,"end":51,"column":{"start":9,"end":52},"content":""},"parent_line_number":51,"fingerprint":"1024b622b63a9e79b8d09f0a5bf6a5b0_0","old_fingerprint":"1024b622b63a9e79b8d09f0a5bf6a5b0_18","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02447.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02447.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"7130c237393d474e513554cf436e33eb_0","old_fingerprint":"7130c237393d474e513554cf436e33eb_21","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02448.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02448.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":56}},"sink":{"start":51,"end":51,"column":{"start":9,"end":56},"content":""},"parent_line_number":51,"fingerprint":"93acd053555dee90efcb24050a544749_0","old_fingerprint":"93acd053555dee90efcb24050a544749_28","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":73}},"sink":{"start":86,"end":86,"column":{"start":13,"end":73},"content":""},"parent_line_number":86,"fingerprint":"b4cdc729ca62647a897de30287e69742_0","old_fingerprint":"b4cdc729ca62647a897de30287e69742_209","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"34e8ad444d3ca4180796e0da6954d62e_0","old_fingerprint":"34e8ad444d3ca4180796e0da6954d62e_172","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"6f9493cdc2c7a249efdaac855cbbc37f_0","old_fingerprint":"6f9493cdc2c7a249efdaac855cbbc37f_173","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"8acadbb3cdeae9d80d7920b72306ef72_0","old_fingerprint":"8acadbb3cdeae9d80d7920b72306ef72_192","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"97ca9488f8b2895c48c011f1e7546127_0","old_fingerprint":"97ca9488f8b2895c48c011f1e7546127_145","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"8dea6cd9fcc8ad60de021479a71191da_0","old_fingerprint":"8dea6cd9fcc8ad60de021479a71191da_144","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"5b7b2629309e9fa5d102247fb2fb751e_0","old_fingerprint":"5b7b2629309e9fa5d102247fb2fb751e_143","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"5e520b89bc20f2e6a86cecf21df7bed2_0","old_fingerprint":"5e520b89bc20f2e6a86cecf21df7bed2_142","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"5ef184d21912205041fcd26b4f79fd35_0","old_fingerprint":"5ef184d21912205041fcd26b4f79fd35_152","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"3501a5f7ed4ff9001295a042d4df710d_0","old_fingerprint":"3501a5f7ed4ff9001295a042d4df710d_167","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"c3da91be1f99f741f843ff80b25eed92_0","old_fingerprint":"c3da91be1f99f741f843ff80b25eed92_179","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02519.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02519.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"76aa6df08f582054a4db47c023fcd34a_0","old_fingerprint":"76aa6df08f582054a4db47c023fcd34a_265","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02520.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02520.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":17,"end":77}},"sink":{"start":89,"end":89,"column":{"start":17,"end":77},"content":""},"parent_line_number":89,"fingerprint":"2506ccff661c1167fd67589a2357a32c_0","old_fingerprint":"2506ccff661c1167fd67589a2357a32c_266","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02521.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02521.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":17,"end":77}},"sink":{"start":87,"end":87,"column":{"start":17,"end":77},"content":""},"parent_line_number":87,"fingerprint":"ded785e2a606218c3175fc876fb2904f_0","old_fingerprint":"ded785e2a606218c3175fc876fb2904f_220","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02522.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02522.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"568bac431ffa07b7cea1728040ac7925_0","old_fingerprint":"568bac431ffa07b7cea1728040ac7925_216","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02523.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02523.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":52}},"sink":{"start":51,"end":51,"column":{"start":9,"end":52},"content":""},"parent_line_number":51,"fingerprint":"0a271f07ddab6d61645c5db8f80b4eed_0","old_fingerprint":"0a271f07ddab6d61645c5db8f80b4eed_29","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02524.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02524.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"0fcc43fb0062663a1f3c0162c67db787_0","old_fingerprint":"0fcc43fb0062663a1f3c0162c67db787_30","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02525.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02525.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"dae13305817090c7ef2785100b4dbe32_0","old_fingerprint":"dae13305817090c7ef2785100b4dbe32_15","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02526.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02526.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":53}},"sink":{"start":51,"end":51,"column":{"start":9,"end":53},"content":""},"parent_line_number":51,"fingerprint":"1eb52f3cfc3ad4977f34f1f546138e17_0","old_fingerprint":"1eb52f3cfc3ad4977f34f1f546138e17_17","code_extract":"        request.getSession().putValue(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":51,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02527.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02527.java","category_groups":["PII","Personal Data"],"source":{"start":51,"end":51,"column":{"start":9,"end":56}},"sink":{"start":51,"end":51,"column":{"start":9,"end":56},"content":""},"parent_line_number":51,"fingerprint":"1fd5521ec89448193a31c2e4d4d8c072_0","old_fingerprint":"1fd5521ec89448193a31c2e4d4d8c072_34","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02602.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02602.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":13,"end":73}},"sink":{"start":108,"end":108,"column":{"start":13,"end":73},"content":""},"parent_line_number":108,"fingerprint":"434c89636699e8ad4fad4495c5c177ab_0","old_fingerprint":"434c89636699e8ad4fad4495c5c177ab_559","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02603.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02603.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":13,"end":73}},"sink":{"start":108,"end":108,"column":{"start":13,"end":73},"content":""},"parent_line_number":108,"fingerprint":"5bd8c0a5086224847fcee207abc81fce_0","old_fingerprint":"5bd8c0a5086224847fcee207abc81fce_552","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"52df16b1cc14f3ebe394b72a124725da_0","old_fingerprint":"52df16b1cc14f3ebe394b72a124725da_537","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"f1ae811cdf5ab9823f4e0364d59b4c02_0","old_fingerprint":"f1ae811cdf5ab9823f4e0364d59b4c02_538","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":107,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":13,"end":73}},"sink":{"start":107,"end":107,"column":{"start":13,"end":73},"content":""},"parent_line_number":107,"fingerprint":"b6ec59d5cb7907380eac02c8047f0538_0","old_fingerprint":"b6ec59d5cb7907380eac02c8047f0538_533","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":114,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02614.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02614.java","category_groups":["PII","Personal Data"],"source":{"start":114,"end":114,"column":{"start":17,"end":77}},"sink":{"start":114,"end":114,"column":{"start":17,"end":77},"content":""},"parent_line_number":114,"fingerprint":"878f396369692d515dabe476963b786a_0","old_fingerprint":"878f396369692d515dabe476963b786a_597","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02615.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02615.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"22fe0b7439214dca142fe69d5902cc01_0","old_fingerprint":"22fe0b7439214dca142fe69d5902cc01_579","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02616.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02616.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"4330299d7fa5eb46af02f7cc06ffa623_0","old_fingerprint":"4330299d7fa5eb46af02f7cc06ffa623_580","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":115,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02617.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02617.java","category_groups":["PII","Personal Data"],"source":{"start":115,"end":115,"column":{"start":17,"end":77}},"sink":{"start":115,"end":115,"column":{"start":17,"end":77},"content":""},"parent_line_number":115,"fingerprint":"0045b128654e900fa6ae7fa3e15c6677_0","old_fingerprint":"0045b128654e900fa6ae7fa3e15c6677_599","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":111,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02618.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02618.java","category_groups":["PII","Personal Data"],"source":{"start":111,"end":111,"column":{"start":17,"end":77}},"sink":{"start":111,"end":111,"column":{"start":17,"end":77},"content":""},"parent_line_number":111,"fingerprint":"3c05dd5090994a16c8a3f5d52ee5af08_0","old_fingerprint":"3c05dd5090994a16c8a3f5d52ee5af08_582","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":109,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02619.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02619.java","category_groups":["PII","Personal Data"],"source":{"start":109,"end":109,"column":{"start":17,"end":77}},"sink":{"start":109,"end":109,"column":{"start":17,"end":77},"content":""},"parent_line_number":109,"fingerprint":"e7ff94eaa7a18ba2487231286474f963_0","old_fingerprint":"e7ff94eaa7a18ba2487231286474f963_567","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02620.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02620.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"8226421dd5aa97115d8130b03af1c229_0","old_fingerprint":"8226421dd5aa97115d8130b03af1c229_546","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":108,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02621.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02621.java","category_groups":["PII","Personal Data"],"source":{"start":108,"end":108,"column":{"start":17,"end":77}},"sink":{"start":108,"end":108,"column":{"start":17,"end":77},"content":""},"parent_line_number":108,"fingerprint":"21061120f957e1c42279f00e5ffce32d_0","old_fingerprint":"21061120f957e1c42279f00e5ffce32d_554","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02622.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02622.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":56}},"sink":{"start":73,"end":73,"column":{"start":9,"end":56},"content":""},"parent_line_number":73,"fingerprint":"2f5a1ef988451eb316cb1e7b3d533f84_0","old_fingerprint":"2f5a1ef988451eb316cb1e7b3d533f84_106","code_extract":"        request.getSession().setAttribute(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02623.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02623.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":57}},"sink":{"start":73,"end":73,"column":{"start":9,"end":57},"content":""},"parent_line_number":73,"fingerprint":"523c38aa2318e2a65fc1986240e582c4_0","old_fingerprint":"523c38aa2318e2a65fc1986240e582c4_107","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02624.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02624.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":9,"end":57}},"sink":{"start":73,"end":73,"column":{"start":9,"end":57},"content":""},"parent_line_number":73,"fingerprint":"f85aead2da6d1fad1a43535d858d1716_0","old_fingerprint":"f85aead2da6d1fad1a43535d858d1716_105","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02700.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02700.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"6e66312f0e077411474fcc28376e68ec_0","old_fingerprint":"6e66312f0e077411474fcc28376e68ec_171","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02701.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02701.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":13,"end":73}},"sink":{"start":85,"end":85,"column":{"start":13,"end":73},"content":""},"parent_line_number":85,"fingerprint":"6cbed3b23d8800f0de7fb7ff17467746_0","old_fingerprint":"6cbed3b23d8800f0de7fb7ff17467746_170","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"33872ed2f4554f7a84e90a24c1227fe9_0","old_fingerprint":"33872ed2f4554f7a84e90a24c1227fe9_165","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"dcecf930ec8a0da9765a6c7ce9e17c9d_0","old_fingerprint":"dcecf930ec8a0da9765a6c7ce9e17c9d_164","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"e94cde9b3be79b67514acbc17e58563d_0","old_fingerprint":"e94cde9b3be79b67514acbc17e58563d_163","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"1a937866a297ff76d74a83a5cfdad39d_0","old_fingerprint":"1a937866a297ff76d74a83a5cfdad39d_133","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"1c9a7bc85474c3ccd9ca1c0e1362af59_0","old_fingerprint":"1c9a7bc85474c3ccd9ca1c0e1362af59_124","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":73}},"sink":{"start":83,"end":83,"column":{"start":13,"end":73},"content":""},"parent_line_number":83,"fingerprint":"00ed592aba3f76f64ceda1442027e37f_0","old_fingerprint":"00ed592aba3f76f64ceda1442027e37f_125","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":73}},"sink":{"start":84,"end":84,"column":{"start":13,"end":73},"content":""},"parent_line_number":84,"fingerprint":"83d4e0f5758f57406edfd681e4cc065e_0","old_fingerprint":"83d4e0f5758f57406edfd681e4cc065e_162","code_extract":"            request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02715.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02715.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":17,"end":77}},"sink":{"start":88,"end":88,"column":{"start":17,"end":77},"content":""},"parent_line_number":88,"fingerprint":"8ff63eef275c602683e5272e5d1a5f8b_0","old_fingerprint":"8ff63eef275c602683e5272e5d1a5f8b_255","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02716.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02716.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"d93a725e50329910888515dd568eb422_0","old_fingerprint":"d93a725e50329910888515dd568eb422_201","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02717.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02717.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"b80e3e3bf2f1be1b4118f5234007d21a_0","old_fingerprint":"b80e3e3bf2f1be1b4118f5234007d21a_197","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02718.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02718.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":17,"end":77}},"sink":{"start":86,"end":86,"column":{"start":17,"end":77},"content":""},"parent_line_number":86,"fingerprint":"cc6bc59709233cbde542f8ac75f7671c_0","old_fingerprint":"cc6bc59709233cbde542f8ac75f7671c_206","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02719.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02719.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"1f844f5a57d378f864f3fdef7375da4f_0","old_fingerprint":"1f844f5a57d378f864f3fdef7375da4f_184","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02720.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02720.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"70d2c332c28a81719f6e71f80ded179a_0","old_fingerprint":"70d2c332c28a81719f6e71f80ded179a_182","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":85,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02721.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02721.java","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":17,"end":77}},"sink":{"start":85,"end":85,"column":{"start":17,"end":77},"content":""},"parent_line_number":85,"fingerprint":"e05215e765749d24da6b13e72786e779_0","old_fingerprint":"e05215e765749d24da6b13e72786e779_178","code_extract":"                request.getSession().setAttribute(cookieName, rememberMeKey);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02722.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02722.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":52}},"sink":{"start":50,"end":50,"column":{"start":9,"end":52},"content":""},"parent_line_number":50,"fingerprint":"e8d74f7be2dce2b6f45816a89a02dcaf_0","old_fingerprint":"e8d74f7be2dce2b6f45816a89a02dcaf_8","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02723.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02723.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":52}},"sink":{"start":50,"end":50,"column":{"start":9,"end":52},"content":""},"parent_line_number":50,"fingerprint":"a35040b0f328bdc84fb598e2738123aa_0","old_fingerprint":"a35040b0f328bdc84fb598e2738123aa_12","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02724.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02724.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":52}},"sink":{"start":50,"end":50,"column":{"start":9,"end":52},"content":""},"parent_line_number":50,"fingerprint":"e0f421454a910a38836a2c731cbd57c4_0","old_fingerprint":"e0f421454a910a38836a2c731cbd57c4_9","code_extract":"        request.getSession().putValue(bar, \"10340\");"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02725.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02725.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":57}},"sink":{"start":50,"end":50,"column":{"start":9,"end":57},"content":""},"parent_line_number":50,"fingerprint":"274b0c31f0aec53427d540a4fae2887e_0","old_fingerprint":"274b0c31f0aec53427d540a4fae2887e_13","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["501"],"id":"java_lang_trust_boundary_violation","title":"Usage of trusted and untrusted data inside the same data structure","description":"## Description\n\nCombining trusted and untrusted data within a single data structure poses a significant security risk. This practice may result in untrusted data being incorrectly regarded as trustworthy, potentially leading to security vulnerabilities.\n\n## Remediations\n\n- **Do not** mix trusted and untrusted data in the same data structure. Keeping them separate ensures that untrusted data does not accidentally gain the same level of trust as the verified data.","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation","line_number":50,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02726.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02726.java","category_groups":["PII","Personal Data"],"source":{"start":50,"end":50,"column":{"start":9,"end":57}},"sink":{"start":50,"end":50,"column":{"start":9,"end":57},"content":""},"parent_line_number":50,"fingerprint":"c7f0f6e5e2486a6296731f51093b9d04_0","old_fingerprint":"c7f0f6e5e2486a6296731f51093b9d04_7","code_extract":"        request.getSession().setAttribute(\"userid\", bar);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00046.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00046.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":29}},"sink":{"start":65,"end":65,"column":{"start":13,"end":29},"content":""},"parent_line_number":65,"fingerprint":"f09442b62ea78ef33797723439e6d41a_0","old_fingerprint":"f09442b62ea78ef33797723439e6d41a_3","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":102,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java","category_groups":["PII","Personal Data"],"source":{"start":102,"end":102,"column":{"start":13,"end":29}},"sink":{"start":102,"end":102,"column":{"start":13,"end":29},"content":""},"parent_line_number":102,"fingerprint":"a26ca9498e9a898d5bef05ff15a6283b_0","old_fingerprint":"a26ca9498e9a898d5bef05ff15a6283b_27","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":90,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00272.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00272.java","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":13,"end":29}},"sink":{"start":90,"end":90,"column":{"start":13,"end":29},"content":""},"parent_line_number":90,"fingerprint":"d442507f7d02ad586288fdf02dfc7c03_0","old_fingerprint":"d442507f7d02ad586288fdf02dfc7c03_25","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00372.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00372.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":29}},"sink":{"start":69,"end":69,"column":{"start":13,"end":29},"content":""},"parent_line_number":69,"fingerprint":"9023959686f325c90c208ea7bbc6e49b_0","old_fingerprint":"9023959686f325c90c208ea7bbc6e49b_15","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00465.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00465.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"5175efbbf6f052b054d19bdd5a5e801f_0","old_fingerprint":"5175efbbf6f052b054d19bdd5a5e801f_16","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00536.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00536.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":29}},"sink":{"start":83,"end":83,"column":{"start":13,"end":29},"content":""},"parent_line_number":83,"fingerprint":"e460031ade9fde5032e55e68ff2b5147_0","old_fingerprint":"e460031ade9fde5032e55e68ff2b5147_21","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00537.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00537.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":13,"end":29}},"sink":{"start":78,"end":78,"column":{"start":13,"end":29},"content":""},"parent_line_number":78,"fingerprint":"b76c265e86b097612203164d5ec53ec0_0","old_fingerprint":"b76c265e86b097612203164d5ec53ec0_20","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00637.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00637.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"3198c9bd5ed353a8fdc29522d9d6b352_0","old_fingerprint":"3198c9bd5ed353a8fdc29522d9d6b352_17","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00708.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00708.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"34dbaacd394912024a65bc06c8910e56_0","old_fingerprint":"34dbaacd394912024a65bc06c8910e56_12","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00794.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00794.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":29}},"sink":{"start":91,"end":91,"column":{"start":13,"end":29},"content":""},"parent_line_number":91,"fingerprint":"90f734d7ad4827ddc3fe41371cfb8a5f_0","old_fingerprint":"90f734d7ad4827ddc3fe41371cfb8a5f_26","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":29}},"sink":{"start":83,"end":83,"column":{"start":13,"end":29},"content":""},"parent_line_number":83,"fingerprint":"6365ea295c8959e7289415027dc523a0_0","old_fingerprint":"6365ea295c8959e7289415027dc523a0_22","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01038.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01038.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":29}},"sink":{"start":69,"end":69,"column":{"start":13,"end":29},"content":""},"parent_line_number":69,"fingerprint":"f1e3000ffa1d6bd5f7d779b33c2913b2_0","old_fingerprint":"f1e3000ffa1d6bd5f7d779b33c2913b2_14","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01167.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01167.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"e311b5f4ba529c6cc5fd9818955af0d8_0","old_fingerprint":"e311b5f4ba529c6cc5fd9818955af0d8_18","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01247.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01247.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":13,"end":29}},"sink":{"start":64,"end":64,"column":{"start":13,"end":29},"content":""},"parent_line_number":64,"fingerprint":"e1287537297b164cada364ea349919ff_0","old_fingerprint":"e1287537297b164cada364ea349919ff_0","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01333.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01333.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"7672e685c1afe59748b1251780844fa8_0","old_fingerprint":"7672e685c1afe59748b1251780844fa8_10","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01334.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01334.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"8674dcbc4dfe8327569a05150f2b42b7_0","old_fingerprint":"8674dcbc4dfe8327569a05150f2b42b7_13","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01504.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01504.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"e6ca9ed5f9112c77664226d7535b835c_0","old_fingerprint":"e6ca9ed5f9112c77664226d7535b835c_9","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01577.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01577.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"8195c6fcbefffa01b22cec63b390a176_0","old_fingerprint":"8195c6fcbefffa01b22cec63b390a176_8","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01653.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01653.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"00eff2269f32aa6f0cac954d48b8b74e_0","old_fingerprint":"00eff2269f32aa6f0cac954d48b8b74e_23","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02217.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02217.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"201ade4af64b0dab93c371d2190ce942_0","old_fingerprint":"201ade4af64b0dab93c371d2190ce942_11","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02311.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02311.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":13,"end":29}},"sink":{"start":78,"end":78,"column":{"start":13,"end":29},"content":""},"parent_line_number":78,"fingerprint":"b28d20b39fe1943a49bc43cbe3cfd0ff_0","old_fingerprint":"b28d20b39fe1943a49bc43cbe3cfd0ff_19","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02387.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02387.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"d9a8e766864581d6f1624c10dafa1057_0","old_fingerprint":"d9a8e766864581d6f1624c10dafa1057_7","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02388.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02388.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"a33169e42654fa131fe3d3189aa9e319_0","old_fingerprint":"a33169e42654fa131fe3d3189aa9e319_6","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02475.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02475.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"79a0e4cf6411a97e78fb2b140d0f4190_0","old_fingerprint":"79a0e4cf6411a97e78fb2b140d0f4190_5","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02476.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02476.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"bfc65353676829f9b55d24734602ee7a_0","old_fingerprint":"bfc65353676829f9b55d24734602ee7a_4","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02575.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02575.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"e5db12c573dfb846ee5b43e04f7b3979_0","old_fingerprint":"e5db12c573dfb846ee5b43e04f7b3979_24","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02674.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02674.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":29}},"sink":{"start":65,"end":65,"column":{"start":13,"end":29},"content":""},"parent_line_number":65,"fingerprint":"61fb325b55f853210e2b1061b048c0fd_0","old_fingerprint":"61fb325b55f853210e2b1061b048c0fd_2","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing purposes. This algorithm is no longer considered secure and can compromise data integrity.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\"); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to ensure data security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02675.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02675.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":29}},"sink":{"start":65,"end":65,"column":{"start":13,"end":29},"content":""},"parent_line_number":65,"fingerprint":"8af5eb25450fe6ef8d777bb8e89be8d4_0","old_fingerprint":"8af5eb25450fe6ef8d777bb8e89be8d4_1","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"181028ac946a41414df7c8449258de75_0","old_fingerprint":"181028ac946a41414df7c8449258de75_50","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"40024c1ab76017a4337f0e05930027ee_0","old_fingerprint":"40024c1ab76017a4337f0e05930027ee_44","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00141.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00141.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":13,"end":29}},"sink":{"start":82,"end":82,"column":{"start":13,"end":29},"content":""},"parent_line_number":82,"fingerprint":"dc8211ba939bba9de7ab83da06c560ca_0","old_fingerprint":"dc8211ba939bba9de7ab83da06c560ca_36","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00223.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00223.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":13,"end":29}},"sink":{"start":92,"end":92,"column":{"start":13,"end":29},"content":""},"parent_line_number":92,"fingerprint":"debc668ae98d549845bf431855e3586d_0","old_fingerprint":"debc668ae98d549845bf431855e3586d_56","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00266.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00266.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":29}},"sink":{"start":84,"end":84,"column":{"start":13,"end":29},"content":""},"parent_line_number":84,"fingerprint":"8484fc4cdf2433619b9894f512d23a82_0","old_fingerprint":"8484fc4cdf2433619b9894f512d23a82_39","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":80,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00267.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00267.java","category_groups":["PII","Personal Data"],"source":{"start":80,"end":80,"column":{"start":13,"end":29}},"sink":{"start":80,"end":80,"column":{"start":13,"end":29},"content":""},"parent_line_number":80,"fingerprint":"840e7cf512a77969928d425df50a4911_0","old_fingerprint":"840e7cf512a77969928d425df50a4911_35","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00268.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00268.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":13,"end":29}},"sink":{"start":76,"end":76,"column":{"start":13,"end":29},"content":""},"parent_line_number":76,"fingerprint":"3fffe3c63195f4048b6bb930541decb0_0","old_fingerprint":"3fffe3c63195f4048b6bb930541decb0_28","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00269.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00269.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":13,"end":29}},"sink":{"start":76,"end":76,"column":{"start":13,"end":29},"content":""},"parent_line_number":76,"fingerprint":"bce7efa8e30130cad356af534940ae14_0","old_fingerprint":"bce7efa8e30130cad356af534940ae14_27","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00346.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00346.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"f056ecdd9ec078aa55e8c6be06820cf8_0","old_fingerprint":"f056ecdd9ec078aa55e8c6be06820cf8_16","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":69,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00371.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00371.java","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":29}},"sink":{"start":69,"end":69,"column":{"start":13,"end":29},"content":""},"parent_line_number":69,"fingerprint":"c3a7b2a26ef81b2eda854fa553cc4c28_0","old_fingerprint":"c3a7b2a26ef81b2eda854fa553cc4c28_11","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00462.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00462.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":29}},"sink":{"start":86,"end":86,"column":{"start":13,"end":29},"content":""},"parent_line_number":86,"fingerprint":"2f791fa1c93a1196071bf073274882b3_0","old_fingerprint":"2f791fa1c93a1196071bf073274882b3_41","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00464.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00464.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"a113b1cac54317c47ab68902f599850c_0","old_fingerprint":"a113b1cac54317c47ab68902f599850c_15","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00531.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00531.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":29}},"sink":{"start":91,"end":91,"column":{"start":13,"end":29},"content":""},"parent_line_number":91,"fingerprint":"ec8a706feecb84cacb1b7c9be9c6708e_0","old_fingerprint":"ec8a706feecb84cacb1b7c9be9c6708e_52","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":98,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00532.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00532.java","category_groups":["PII","Personal Data"],"source":{"start":98,"end":98,"column":{"start":13,"end":29}},"sink":{"start":98,"end":98,"column":{"start":13,"end":29},"content":""},"parent_line_number":98,"fingerprint":"8223b476ec4ee8fbd63df4634f8aaab0_0","old_fingerprint":"8223b476ec4ee8fbd63df4634f8aaab0_60","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00533.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00533.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"c057657fd401620b45ac0c23597ca575_0","old_fingerprint":"c057657fd401620b45ac0c23597ca575_42","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":97,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00534.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00534.java","category_groups":["PII","Personal Data"],"source":{"start":97,"end":97,"column":{"start":13,"end":29}},"sink":{"start":97,"end":97,"column":{"start":13,"end":29},"content":""},"parent_line_number":97,"fingerprint":"952b7d24b88550e4e06923304e74e352_0","old_fingerprint":"952b7d24b88550e4e06923304e74e352_59","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00631.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00631.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":13,"end":29}},"sink":{"start":75,"end":75,"column":{"start":13,"end":29},"content":""},"parent_line_number":75,"fingerprint":"809f34dfa0d44cce4884d05d1a4607f7_0","old_fingerprint":"809f34dfa0d44cce4884d05d1a4607f7_26","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":76,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00634.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00634.java","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":13,"end":29}},"sink":{"start":76,"end":76,"column":{"start":13,"end":29},"content":""},"parent_line_number":76,"fingerprint":"afd9b27d3124e8949eff3e310af96b1f_0","old_fingerprint":"afd9b27d3124e8949eff3e310af96b1f_29","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00635.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00635.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"c245c5eb165a6b1cb933523fc5288196_0","old_fingerprint":"c245c5eb165a6b1cb933523fc5288196_4","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00636.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00636.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"edd99f98b17ea433f522b131767ae3ea_0","old_fingerprint":"edd99f98b17ea433f522b131767ae3ea_3","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00703.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00703.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":13,"end":29}},"sink":{"start":84,"end":84,"column":{"start":13,"end":29},"content":""},"parent_line_number":84,"fingerprint":"ee29abc4f9029b35a6b67ccb49066536_0","old_fingerprint":"ee29abc4f9029b35a6b67ccb49066536_38","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00704.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00704.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":29}},"sink":{"start":77,"end":77,"column":{"start":13,"end":29},"content":""},"parent_line_number":77,"fingerprint":"328549299dd125f5c3d440e5ced2937e_0","old_fingerprint":"328549299dd125f5c3d440e5ced2937e_30","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00705.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00705.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":29}},"sink":{"start":72,"end":72,"column":{"start":13,"end":29},"content":""},"parent_line_number":72,"fingerprint":"719c72893d13649f8b5d35c96323533c_0","old_fingerprint":"719c72893d13649f8b5d35c96323533c_20","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":95,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00789.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00789.java","category_groups":["PII","Personal Data"],"source":{"start":95,"end":95,"column":{"start":13,"end":29}},"sink":{"start":95,"end":95,"column":{"start":13,"end":29},"content":""},"parent_line_number":95,"fingerprint":"7387bcb0c90fd33eaaae269842abb89c_0","old_fingerprint":"7387bcb0c90fd33eaaae269842abb89c_58","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00790.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00790.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"6d93be48b945b04dea596653560f8af8_0","old_fingerprint":"6d93be48b945b04dea596653560f8af8_43","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":93,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00868.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00868.java","category_groups":["PII","Personal Data"],"source":{"start":93,"end":93,"column":{"start":13,"end":29}},"sink":{"start":93,"end":93,"column":{"start":13,"end":29},"content":""},"parent_line_number":93,"fingerprint":"88ed9c38a64237e503d542034f42b202_0","old_fingerprint":"88ed9c38a64237e503d542034f42b202_57","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":92,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00869.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00869.java","category_groups":["PII","Personal Data"],"source":{"start":92,"end":92,"column":{"start":13,"end":29}},"sink":{"start":92,"end":92,"column":{"start":13,"end":29},"content":""},"parent_line_number":92,"fingerprint":"25e5c96d2031021cd03cde68aa7743fa_0","old_fingerprint":"25e5c96d2031021cd03cde68aa7743fa_55","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00870.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00870.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":29}},"sink":{"start":65,"end":65,"column":{"start":13,"end":29},"content":""},"parent_line_number":65,"fingerprint":"268da0f9220c2cd2fa4c34dae3c24678_0","old_fingerprint":"268da0f9220c2cd2fa4c34dae3c24678_1","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00871.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00871.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":13,"end":29}},"sink":{"start":70,"end":70,"column":{"start":13,"end":29},"content":""},"parent_line_number":70,"fingerprint":"1f5b61c3fd65d3ea3ea7126f90e085b0_0","old_fingerprint":"1f5b61c3fd65d3ea3ea7126f90e085b0_12","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00872.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00872.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"a73f14e9aff57b085f26acfe83a7cfe0_0","old_fingerprint":"a73f14e9aff57b085f26acfe83a7cfe0_5","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":83,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java","category_groups":["PII","Personal Data"],"source":{"start":83,"end":83,"column":{"start":13,"end":29}},"sink":{"start":83,"end":83,"column":{"start":13,"end":29},"content":""},"parent_line_number":83,"fingerprint":"ee0c10128b9d9584206b86808faa597f_0","old_fingerprint":"ee0c10128b9d9584206b86808faa597f_37","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01123.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01123.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":13,"end":29}},"sink":{"start":79,"end":79,"column":{"start":13,"end":29},"content":""},"parent_line_number":79,"fingerprint":"bfb6726437f73ef0bb5a271fdd2d1a2f_0","old_fingerprint":"bfb6726437f73ef0bb5a271fdd2d1a2f_34","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01165.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01165.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"9399f8f18bdcd3638bbe6e48129ae990_0","old_fingerprint":"9399f8f18bdcd3638bbe6e48129ae990_17","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01166.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01166.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"ca40a4b95f1ccb00ee9040dbbcd62497_0","old_fingerprint":"ca40a4b95f1ccb00ee9040dbbcd62497_13","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01244.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01244.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":29}},"sink":{"start":72,"end":72,"column":{"start":13,"end":29},"content":""},"parent_line_number":72,"fingerprint":"6ad5fcf43a038110f1182afa0a5e52a6_0","old_fingerprint":"6ad5fcf43a038110f1182afa0a5e52a6_18","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":64,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01246.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01246.java","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":13,"end":29}},"sink":{"start":64,"end":64,"column":{"start":13,"end":29},"content":""},"parent_line_number":64,"fingerprint":"6c7c1cadd0b14a148cc53069ecc84c45_0","old_fingerprint":"6c7c1cadd0b14a148cc53069ecc84c45_0","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01411.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01411.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":13,"end":29}},"sink":{"start":78,"end":78,"column":{"start":13,"end":29},"content":""},"parent_line_number":78,"fingerprint":"7fde05e1bee34eaf698b878f07e9c8fd_0","old_fingerprint":"7fde05e1bee34eaf698b878f07e9c8fd_32","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01503.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01503.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":13,"end":29}},"sink":{"start":74,"end":74,"column":{"start":13,"end":29},"content":""},"parent_line_number":74,"fingerprint":"cadf73d2adad68016793ba8c80e8452b_0","old_fingerprint":"cadf73d2adad68016793ba8c80e8452b_25","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01649.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01649.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"2485b54cfcf462ec3e042741c8b9a89b_0","old_fingerprint":"2485b54cfcf462ec3e042741c8b9a89b_48","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01650.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01650.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"bb81c46b96377dc0cabd32c89b963198_0","old_fingerprint":"bb81c46b96377dc0cabd32c89b963198_47","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01651.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01651.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"029d385610a7dc1a32e34d6d1f5000b6_0","old_fingerprint":"029d385610a7dc1a32e34d6d1f5000b6_46","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01757.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01757.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":13,"end":29}},"sink":{"start":73,"end":73,"column":{"start":13,"end":29},"content":""},"parent_line_number":73,"fingerprint":"00b4f4229e29853ec8f4986516e7fbdd_0","old_fingerprint":"00b4f4229e29853ec8f4986516e7fbdd_21","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":65,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01761.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01761.java","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":13,"end":29}},"sink":{"start":65,"end":65,"column":{"start":13,"end":29},"content":""},"parent_line_number":65,"fingerprint":"28036849917aaeb351d439587b633186_0","old_fingerprint":"28036849917aaeb351d439587b633186_2","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":29}},"sink":{"start":91,"end":91,"column":{"start":13,"end":29},"content":""},"parent_line_number":91,"fingerprint":"bb1d3c557ef676e7e3858e58418684a1_0","old_fingerprint":"bb1d3c557ef676e7e3858e58418684a1_51","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":29}},"sink":{"start":91,"end":91,"column":{"start":13,"end":29},"content":""},"parent_line_number":91,"fingerprint":"eb36851bc7aa25fdd16f9347ed514e57_0","old_fingerprint":"eb36851bc7aa25fdd16f9347ed514e57_54","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":91,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java","category_groups":["PII","Personal Data"],"source":{"start":91,"end":91,"column":{"start":13,"end":29}},"sink":{"start":91,"end":91,"column":{"start":13,"end":29},"content":""},"parent_line_number":91,"fingerprint":"4dacbf06b1b2d0d4a758887f799f451f_0","old_fingerprint":"4dacbf06b1b2d0d4a758887f799f451f_53","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":77,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01911.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01911.java","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":29}},"sink":{"start":77,"end":77,"column":{"start":13,"end":29},"content":""},"parent_line_number":77,"fingerprint":"d54724cbf3f24a57d90072daf02171fb_0","old_fingerprint":"d54724cbf3f24a57d90072daf02171fb_31","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":71,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02042.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02042.java","category_groups":["PII","Personal Data"],"source":{"start":71,"end":71,"column":{"start":13,"end":29}},"sink":{"start":71,"end":71,"column":{"start":13,"end":29},"content":""},"parent_line_number":71,"fingerprint":"607a690d0a1ec6ff234f0714e82e9fee_0","old_fingerprint":"607a690d0a1ec6ff234f0714e82e9fee_14","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02118.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02118.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":13,"end":29}},"sink":{"start":72,"end":72,"column":{"start":13,"end":29},"content":""},"parent_line_number":72,"fingerprint":"6a2b7fe8e5a27862e7b8272a56f218cd_0","old_fingerprint":"6a2b7fe8e5a27862e7b8272a56f218cd_19","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02211.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02211.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"37c471d0e3525d84b219a0196339458a_0","old_fingerprint":"37c471d0e3525d84b219a0196339458a_8","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02212.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02212.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"dc04850d50676bef37a4401d99671462_0","old_fingerprint":"dc04850d50676bef37a4401d99671462_9","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":68,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02213.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02213.java","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":29}},"sink":{"start":68,"end":68,"column":{"start":13,"end":29},"content":""},"parent_line_number":68,"fingerprint":"aa03087fb14cef5a93dec97e5c2c6865_0","old_fingerprint":"aa03087fb14cef5a93dec97e5c2c6865_10","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":86,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02307.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02307.java","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":13,"end":29}},"sink":{"start":86,"end":86,"column":{"start":13,"end":29},"content":""},"parent_line_number":86,"fingerprint":"3f7b9f95a3519304b2b8a6edf5cb8bca_0","old_fingerprint":"3f7b9f95a3519304b2b8a6edf5cb8bca_40","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":78,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02308.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02308.java","category_groups":["PII","Personal Data"],"source":{"start":78,"end":78,"column":{"start":13,"end":29}},"sink":{"start":78,"end":78,"column":{"start":13,"end":29},"content":""},"parent_line_number":78,"fingerprint":"75afe30c44f31bfae585daf722175e89_0","old_fingerprint":"75afe30c44f31bfae585daf722175e89_33","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":74,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02385.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02385.java","category_groups":["PII","Personal Data"],"source":{"start":74,"end":74,"column":{"start":13,"end":29}},"sink":{"start":74,"end":74,"column":{"start":13,"end":29},"content":""},"parent_line_number":74,"fingerprint":"8e88cf573a77c87421062d03c799994c_0","old_fingerprint":"8e88cf573a77c87421062d03c799994c_24","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02386.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02386.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"baef053bb15669a9e317c77410e25f54_0","old_fingerprint":"baef053bb15669a9e317c77410e25f54_7","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":66,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02474.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02474.java","category_groups":["PII","Personal Data"],"source":{"start":66,"end":66,"column":{"start":13,"end":29}},"sink":{"start":66,"end":66,"column":{"start":13,"end":29},"content":""},"parent_line_number":66,"fingerprint":"581d9e9ed165a88d4eef84b96caf214b_0","old_fingerprint":"581d9e9ed165a88d4eef84b96caf214b_6","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02573.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02573.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"24486a6b5d20d0f8f2153a2d1b0bd1da_0","old_fingerprint":"24486a6b5d20d0f8f2153a2d1b0bd1da_49","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":88,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02574.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02574.java","category_groups":["PII","Personal Data"],"source":{"start":88,"end":88,"column":{"start":13,"end":29}},"sink":{"start":88,"end":88,"column":{"start":13,"end":29},"content":""},"parent_line_number":88,"fingerprint":"55b61042002fca3dece23dcb72c35d42_0","old_fingerprint":"55b61042002fca3dece23dcb72c35d42_45","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02670.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02670.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":13,"end":29}},"sink":{"start":73,"end":73,"column":{"start":13,"end":29},"content":""},"parent_line_number":73,"fingerprint":"b88e76aff60d8fd08d45b944335eac40_0","old_fingerprint":"b88e76aff60d8fd08d45b944335eac40_23","code_extract":"            md.update(input);"},{"cwe_ids":["328"],"id":"java_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is no longer considered secure.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // unsafe\n  ```\n- **Do** use stronger hashing algorithms such as SHA-256 to enhance security.\n  ```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n  ```\n\n## References\n\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1","line_number":73,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02671.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02671.java","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":13,"end":29}},"sink":{"start":73,"end":73,"column":{"start":13,"end":29},"content":""},"parent_line_number":73,"fingerprint":"824ca63c556223595ccf6e4b809ef3fd_0","old_fingerprint":"824ca63c556223595ccf6e4b809ef3fd_22","code_extract":"            md.update(input);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":51}},"sink":{"start":89,"end":89,"column":{"start":29,"end":51},"content":""},"parent_line_number":89,"fingerprint":"35d2a34537a7069d0f72d788b9a96e4c_0","old_fingerprint":"35d2a34537a7069d0f72d788b9a96e4c_21","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":65}},"sink":{"start":87,"end":87,"column":{"start":29,"end":65},"content":""},"parent_line_number":87,"fingerprint":"87b489b68ebfcfcc500dbf25437a4ffb_0","old_fingerprint":"87b489b68ebfcfcc500dbf25437a4ffb_18","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":75,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java","category_groups":["PII","Personal Data"],"source":{"start":75,"end":75,"column":{"start":29,"end":65}},"sink":{"start":75,"end":75,"column":{"start":29,"end":65},"content":""},"parent_line_number":75,"fingerprint":"fb7d77bde9135d6c1baf2c2642ba8611_0","old_fingerprint":"fb7d77bde9135d6c1baf2c2642ba8611_7","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":29,"end":65}},"sink":{"start":72,"end":72,"column":{"start":29,"end":65},"content":""},"parent_line_number":72,"fingerprint":"6655e18903f9afbb2251a67046969999_0","old_fingerprint":"6655e18903f9afbb2251a67046969999_4","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":65}},"sink":{"start":79,"end":79,"column":{"start":29,"end":65},"content":""},"parent_line_number":79,"fingerprint":"f91684e69c4126f03323b956c4fa9af7_0","old_fingerprint":"f91684e69c4126f03323b956c4fa9af7_8","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":51}},"sink":{"start":84,"end":84,"column":{"start":29,"end":51},"content":""},"parent_line_number":84,"fingerprint":"8881a57c586ac4d20b91dabe39edbb49_0","old_fingerprint":"8881a57c586ac4d20b91dabe39edbb49_14","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":29,"end":65}},"sink":{"start":82,"end":82,"column":{"start":29,"end":65},"content":""},"parent_line_number":82,"fingerprint":"abdbc096924601e9e4fdec092185d44e_0","old_fingerprint":"abdbc096924601e9e4fdec092185d44e_12","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01223.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01223.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":29,"end":51}},"sink":{"start":72,"end":72,"column":{"start":29,"end":51},"content":""},"parent_line_number":72,"fingerprint":"2d737db2217c939a969ae7c459b4a6bd_0","old_fingerprint":"2d737db2217c939a969ae7c459b4a6bd_6","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":29,"end":65}},"sink":{"start":70,"end":70,"column":{"start":29,"end":65},"content":""},"parent_line_number":70,"fingerprint":"faf108f89ecc7e16a36f57d7f5c80f44_0","old_fingerprint":"faf108f89ecc7e16a36f57d7f5c80f44_1","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":29,"end":65}},"sink":{"start":70,"end":70,"column":{"start":29,"end":65},"content":""},"parent_line_number":70,"fingerprint":"655e4b570694313e01255db81aee9255_0","old_fingerprint":"655e4b570694313e01255db81aee9255_3","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":67,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":29,"end":65}},"sink":{"start":67,"end":67,"column":{"start":29,"end":65},"content":""},"parent_line_number":67,"fingerprint":"f602ca2ad3a467a0a8741ba5f9e99f07_0","old_fingerprint":"f602ca2ad3a467a0a8741ba5f9e99f07_0","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01478.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01478.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":51}},"sink":{"start":79,"end":79,"column":{"start":29,"end":51},"content":""},"parent_line_number":79,"fingerprint":"aa047be67bae51bba7b620f07f090353_0","old_fingerprint":"aa047be67bae51bba7b620f07f090353_9","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01479.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01479.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":51}},"sink":{"start":79,"end":79,"column":{"start":29,"end":51},"content":""},"parent_line_number":79,"fingerprint":"3760b87ec71714558c947c6f2ed3733e_0","old_fingerprint":"3760b87ec71714558c947c6f2ed3733e_10","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01734.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01734.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":51}},"sink":{"start":89,"end":89,"column":{"start":29,"end":51},"content":""},"parent_line_number":89,"fingerprint":"d128928c509622d3264ee1605e9fb2f0_0","old_fingerprint":"d128928c509622d3264ee1605e9fb2f0_20","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":89,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01735.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01735.java","category_groups":["PII","Personal Data"],"source":{"start":89,"end":89,"column":{"start":29,"end":51}},"sink":{"start":89,"end":89,"column":{"start":29,"end":51},"content":""},"parent_line_number":89,"fingerprint":"463f59381532c5885c411f8188a3de24_0","old_fingerprint":"463f59381532c5885c411f8188a3de24_19","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":87,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java","category_groups":["PII","Personal Data"],"source":{"start":87,"end":87,"column":{"start":29,"end":65}},"sink":{"start":87,"end":87,"column":{"start":29,"end":65},"content":""},"parent_line_number":87,"fingerprint":"baf24327b11751f18fca7897b1d6f6b3_0","old_fingerprint":"baf24327b11751f18fca7897b1d6f6b3_17","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":51}},"sink":{"start":84,"end":84,"column":{"start":29,"end":51},"content":""},"parent_line_number":84,"fingerprint":"7fbda5f47712dc34d1c09a6a8732f504_0","old_fingerprint":"7fbda5f47712dc34d1c09a6a8732f504_15","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":84,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java","category_groups":["PII","Personal Data"],"source":{"start":84,"end":84,"column":{"start":29,"end":51}},"sink":{"start":84,"end":84,"column":{"start":29,"end":51},"content":""},"parent_line_number":84,"fingerprint":"9aac086249088fcd39a823ba2ea262ee_0","old_fingerprint":"9aac086249088fcd39a823ba2ea262ee_16","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":82,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","category_groups":["PII","Personal Data"],"source":{"start":82,"end":82,"column":{"start":29,"end":65}},"sink":{"start":82,"end":82,"column":{"start":29,"end":65},"content":""},"parent_line_number":82,"fingerprint":"4a2e8837f6600fb5674d80aed117f746_0","old_fingerprint":"4a2e8837f6600fb5674d80aed117f746_13","code_extract":"            String result = xp.evaluate(expression, xmlDocument);"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":70,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01974.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01974.java","category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":29,"end":51}},"sink":{"start":70,"end":70,"column":{"start":29,"end":51},"content":""},"parent_line_number":70,"fingerprint":"61b5c3462e8283cb452328c550713c4f_0","old_fingerprint":"61b5c3462e8283cb452328c550713c4f_2","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":72,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02100.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02100.java","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":29,"end":51}},"sink":{"start":72,"end":72,"column":{"start":29,"end":51},"content":""},"parent_line_number":72,"fingerprint":"be68829ba4979476ba6740fb309c2c16_0","old_fingerprint":"be68829ba4979476ba6740fb309c2c16_5","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["643"],"id":"java_lang_xpath_injection","title":"Unsanitized user input in XPath","description":"## Description\n\nUsing unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.\n\n## Remediations\n\n- **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.\n  ```java\n  public class Cls extends HttpServlet\n  {\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID); // Ensure sanitization\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n  ```\n- **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.\n\n## References\n\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_xpath_injection","line_number":79,"full_filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02370.java","filename":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02370.java","category_groups":["PII","Personal Data"],"source":{"start":79,"end":79,"column":{"start":29,"end":51}},"sink":{"start":79,"end":79,"column":{"start":29,"end":51},"content":""},"parent_line_number":79,"fingerprint":"ba1d0048c34076b4a6c86f1d0e562d38_0","old_fingerprint":"ba1d0048c34076b4a6c86f1d0e562d38_11","code_extract":"                            xp.compile(expression)"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":62,"full_filename":"src/main/webapp/js/testsuiteutils.js","filename":"src/main/webapp/js/testsuiteutils.js","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":24,"end":59}},"sink":{"start":62,"end":62,"column":{"start":24,"end":59},"content":""},"parent_line_number":62,"fingerprint":"1fdb111854069d7d450e183b7afaeac6_0","old_fingerprint":"1fdb111854069d7d450e183b7afaeac6_0","code_extract":"    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);"}]}
